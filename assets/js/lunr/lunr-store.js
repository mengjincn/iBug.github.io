var store = [{
"title": "Chisel 配置及入门",
"excerpt":"Chisel (Constructing Hardware In a Scala Embedded Language) 是一种嵌入在高级编程语言 Scala 的硬件构建语言。Chisel 实际上只是一些特殊的类定义，预定义对象的集合，使用 Scala 的用法，所以在写 Chisel 程序时实际上是在写 Scala 程序。   1. 系统需求      Java 运行环境   Scala            SBT (Simple Build Tool)           1.A Windows 环境配置   1.A.1 安装 Java   Java 的安装并不困难，也不需要额外的操作。直接从 Oracle 官网下载一个合适的 JDK 安装包，运行安装即可。这里我选择的版本是 JDK 8 Update 191。      下载 JDK 8u191 Windows 32位   下载 JDK 8u191 Windows 64位   安装过程直接点击 [下一步] 直到完成即可。   1.A.2 安装 Scala 及 SBT   Scala 是一门运行在 Java 上的语言，其编译器和工具链等都以 JAR 形式提供，因此不区分系统版本。SBT (Simple Build Tool) 是一个简单的 Scala 项目构建工具。Chisel 使用 SBT 来构建工程。对于 Windows 系统来说，只需要一个统一的安装包即可。编写本文时，SBT 的最新版本为 1.2.7，可以通过以下链接下载。      下载 SBT 1.2.7 Windows   SBT 的安装也不复杂，双击 msi 安装包，一路点击 [下一步] 即可。   虽然不是必要的，但是建议在安装完 SBT 之后重启一下电脑。   1.A.3 准备 Chisel 依赖   安装好 SBT 之后，我们所有的准备工作都将借助 SBT 完成。   首先解压附件 chisel-101.tar.gz 并打开文件夹 chisel-101，然后在该文件夹中打开命令提示符。Windows 7 下可以按住 Shift 键并在文件夹空白处点右键，此时的菜单中会有 “在此处打开命令提示符” 的选项，如图：      在打开的命令提示符中输入 sbt run，确保网络通畅，等待 SBT 工具下载所需的依赖。由于众所周知的原因，在国内下载很慢，并且有可能中断，需要耐心重试。如果一切顺利，SBT 会完成所需的全部依赖，然后编译样例代码并运行。参考截图如下：      1.B Linux 环境配置 (Ubuntu)   Ubuntu 资源丰富，配置起来十分简单。这里以 18.04 版本为例，配置过程全程使用终端命令。   echo \"deb https://dl.bintray.com/sbt/debian /\" | sudo tee -a /etc/apt/sources.list.d/sbt.list sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 sudo apt-get update sudo apt-get install default-jdk build-essential perl sbt   参考链接：Installing sbt on Linux   以上操作会添加 SBT 提供的 APT 源，然后刷新 APT 软件包列表，并安装 JDK, SBT 等需要的软件包。   接下来解包附件 chisel-101.tar.gz （见末尾），并利用 sbt 配置所需的依赖。这些依赖全部是 Java 软件包，因此过程十分简单。请确保网络畅通，由于众所周知的原因，在国内下载很慢，并且有可能中断，需要耐心重试。   tar zxvf chisel-101.tar.gz cd chisel-101/ sbt run   如果一切顺利，SBT 会完成所需的全部依赖，然后编译样例代码 hello.scala 并运行。具体输出可以参考上面 Windows 7 系统中的截图。   2. 开始第一个 Chisel 工程并生成 Verilog 代码   保留好附件 chisel-101.tar.gz 或者解包出来的文件夹 chisel-101，后面我们会经常用到它。   请注意，本文不是教你如何编辑 Scala 或 Chisel 代码，而是关注 Verilog 的生成。由于未直接使用官方的教程仓库，因此避开了 Verilator 的依赖（它相当不好配置）。   2.1 第一个组合逻辑电路   用文本编辑器或者 IDE (例如 IntelliJ IDEA) 打开 src/main/scala/example/hello.scala，观察内容：   package example  object Hello {   def main(args: Array[String]): Unit = {     println(\"Hello, Chisel!\")   } }   这是一个最简单的 Scala 程序，它只输出一行 Hello, Chisel!。这并不是我们要学习的 Chisel 代码，所以现在把这个文件删掉。   下面我们用一个简单的示例（组合逻辑电路）来展示 Chisel，以及生成 Verilog 文件。   package example  import chisel3._  class FullAdder extends Module {   val io = IO(new Bundle {     val a    = Input(UInt(1.W))     val b    = Input(UInt(1.W))     val cin  = Input(UInt(1.W))     val sum  = Output(UInt(1.W))     val cout = Output(UInt(1.W))   })    // Generate the sum   val a_xor_b = io.a ^ io.b   io.sum := a_xor_b ^ io.cin   // Generate the carry   val a_and_b = io.a &amp; io.b   val b_and_cin = io.b &amp; io.cin   val a_and_cin = io.a &amp; io.cin   io.cout := a_and_b | b_and_cin | a_and_cin }   这就是一个 1 位全加器模块。把它放在 src/main/scala/example/Main.scala 里，然后我们来尝试编译（综合）：   还是在工程目录 (有 build.sbt 文件的那个地方) 打开命令提示符（或终端），输入 sbt run 开始编译。稍等片刻，就会发现编译失败了。最后几行的错误信息中可以看到这样的内容：   [error] java.lang.RuntimeException: No main class detected.   我们的样例代码只包含了电路模块，并没有一个 “主函数” 可以让 Scala 运行。   打开刚才的 Main.scala 文件，在文件后面追加这几行代码：   object ChiselExample extends App {   chisel3.Driver.execute(args, () =&gt; new FullAdder) }   再次在工程目录中运行 sbt run，观察输出，这时候整个项目应该能正常编译了。   也许细心的你已经发现目录中出现了 FullAdder.v 这样一个文件。没错，这就是生成的 Verilog 代码！赶紧打开看看：   module FullAdder( // @[:@3.2]   input   clock, // @[:@4.4]   input   reset, // @[:@5.4]   input   io_a, // @[:@6.4]   input   io_b, // @[:@6.4]   input   io_cin, // @[:@6.4]   output  io_sum, // @[:@6.4]   output  io_cout // @[:@6.4] );   wire  a_xor_b; // @[Main.scala 15:22:@8.4]   wire  a_and_b; // @[Main.scala 18:22:@11.4]   wire  b_and_cin; // @[Main.scala 19:24:@12.4]   wire  a_and_cin; // @[Main.scala 20:24:@13.4]   wire  _T_16; // @[Main.scala 21:22:@14.4]   assign a_xor_b = io_a ^ io_b; // @[Main.scala 15:22:@8.4]   assign a_and_b = io_a &amp; io_b; // @[Main.scala 18:22:@11.4]   assign b_and_cin = io_b &amp; io_cin; // @[Main.scala 19:24:@12.4]   assign a_and_cin = io_a &amp; io_cin; // @[Main.scala 20:24:@13.4]   assign _T_16 = a_and_b | b_and_cin; // @[Main.scala 21:22:@14.4]   assign io_sum = a_xor_b ^ io_cin; // @[Main.scala 16:10:@10.4]   assign io_cout = _T_16 | a_and_cin; // @[Main.scala 21:11:@16.4] endmodule   虽然看起来十分机械化，但是生成的这个 Verilog 代码是可以放在其他软件 (如 Xilinx Vidado) 中综合的。   好了，我们的第一个样例就到这里，你已经知道怎么写 Chisel 代码并生成 Verilog 了。   2.2 第一个时序逻辑电路   我从网上的样例中选出了这个作为时序逻辑电路的示范   package example  import chisel3._  class EnableShiftRegister extends Module {   val io = IO(new Bundle {     val in    = Input(UInt(4.W))     val shift = Input(Bool())     val out   = Output(UInt(4.W))   })   val r0 = Reg(UInt())   val r1 = Reg(UInt())   val r2 = Reg(UInt())   val r3 = Reg(UInt())   when(reset.toBool) {     r0 := 0.U(4.W)     r1 := 0.U(4.W)     r2 := 0.U(4.W)     r3 := 0.U(4.W)   } .elsewhen(io.shift) {     r0 := io.in     r1 := r0     r2 := r1     r3 := r2   }   io.out := r3 }   上一节中编写的 Main.scala 先放着别动，把上面的代码保存到另一个文件，例如 src/main/scala/example/Sequential.scala 中，我们来尝试编译：在命令提示符或者终端中运行 sbt run。当 SBT 运行完成之后，你肯定迫不及待地想看看 EnableShiftRegister.v 长什么样。不过这次你可能要失望了，因为这个文件并不存在。   怎么回事呢？   打开上一节的 Main.scala，观察内容：   object ChiselExample extends App {   chisel3.Driver.execute(args, () =&gt; new FullAdder) }   也许你已经发现了，是这个地方决定哪些模块要被编译。所以我们添加一行，让它也编译新的模块。现在代码看起来像这样：   object ChiselExample extends App {   chisel3.Driver.execute(args, () =&gt; new FullAdder)   chisel3.Driver.execute(args, () =&gt; new EnableShiftRegister) }   好了，再次运行 sbt run，你就可以看到 EnableShiftRegister.v 了，它的内容应该是这样：   module EnableShiftRegister( // @[:@3.2]   input        clock, // @[:@4.4]   input        reset, // @[:@5.4]   input  [3:0] io_in, // @[:@6.4]   input        io_shift, // @[:@6.4]   output [3:0] io_out // @[:@6.4] );   reg [3:0] r0; // @[Sequential.scala 11:15:@8.4]   reg [31:0] _RAND_0;   reg [3:0] r1; // @[Sequential.scala 12:15:@9.4]   reg [31:0] _RAND_1;   reg [3:0] r2; // @[Sequential.scala 13:15:@10.4]   reg [31:0] _RAND_2;   reg [3:0] r3; // @[Sequential.scala 14:15:@11.4]   reg [31:0] _RAND_3;   wire [3:0] _GEN_0; // @[Sequential.scala 20:25:@20.6]   wire [3:0] _GEN_1; // @[Sequential.scala 20:25:@20.6]   wire [3:0] _GEN_2; // @[Sequential.scala 20:25:@20.6]   wire [3:0] _GEN_3; // @[Sequential.scala 20:25:@20.6]   assign _GEN_0 = io_shift ? io_in : r0; // @[Sequential.scala 20:25:@20.6]   assign _GEN_1 = io_shift ? r0 : r1; // @[Sequential.scala 20:25:@20.6]   assign _GEN_2 = io_shift ? r1 : r2; // @[Sequential.scala 20:25:@20.6]   assign _GEN_3 = io_shift ? r2 : r3; // @[Sequential.scala 20:25:@20.6]   assign io_out = r3; // @[Sequential.scala 26:10:@26.4] `ifdef RANDOMIZE_GARBAGE_ASSIGN `define RANDOMIZE `endif `ifdef RANDOMIZE_INVALID_ASSIGN `define RANDOMIZE `endif `ifdef RANDOMIZE_REG_INIT `define RANDOMIZE `endif `ifdef RANDOMIZE_MEM_INIT `define RANDOMIZE `endif `ifndef RANDOM `define RANDOM $random `endif `ifdef RANDOMIZE   integer initvar;   initial begin     `ifdef INIT_RANDOM       `INIT_RANDOM     `endif     `ifndef VERILATOR       #0.002 begin end     `endif   `ifdef RANDOMIZE_REG_INIT   _RAND_0 = {1{`RANDOM}};   r0 = _RAND_0[3:0];   `endif // RANDOMIZE_REG_INIT   `ifdef RANDOMIZE_REG_INIT   _RAND_1 = {1{`RANDOM}};   r1 = _RAND_1[3:0];   `endif // RANDOMIZE_REG_INIT   `ifdef RANDOMIZE_REG_INIT   _RAND_2 = {1{`RANDOM}};   r2 = _RAND_2[3:0];   `endif // RANDOMIZE_REG_INIT   `ifdef RANDOMIZE_REG_INIT   _RAND_3 = {1{`RANDOM}};   r3 = _RAND_3[3:0];   `endif // RANDOMIZE_REG_INIT   end `endif // RANDOMIZE   always @(posedge clock) begin     if (reset) begin       r0 &lt;= 4'h0;     end else begin       r0 &lt;= _GEN_0;     end     if (reset) begin       r1 &lt;= 4'h0;     end else begin       r1 &lt;= _GEN_1;     end     if (reset) begin       r2 &lt;= 4'h0;     end else begin       r2 &lt;= _GEN_2;     end     if (reset) begin       r3 &lt;= 4'h0;     end else begin       r3 &lt;= _GEN_3;     end   end endmodule   注意到，由于 Chisel 语言只有 0/1，不支持三态或者高阻态，所以这里对几个寄存器采取了随机初始化的办法。另外也可以看到，尽管模块中没有声明时钟 clock 和重置 reset 信号，但是所有编译出来的 Verilog 代码都会包含这两个输入，并且在有需要的时候向嵌套的模块传递，这可以在下面这个示例中观察到。   2.3 嵌套模块   这次我们使用前面编写的 1 位全加器来构建一个多位全加器   package example  import chisel3._  class Inner extends Module {   val io = IO(new Bundle {     val dataIn  = Input(UInt(1.W))     val dataOut = Output(UInt(1.W))   })   val data = RegNext(io.dataIn)   io.dataOut := data }  class Outer extends Module {   val io = IO(new Bundle {     val dataIn  = Input(UInt(1.W))     val dataOut = Output(UInt(1.W))   })   val core = Module(new Inner()).io   core.dataIn := io.dataIn   io.dataOut := core.dataOut }   把以上内容保存为 src/main/scala/example/Nested.scala。同样，我们要修改 Main.scala，使它编译新的 Outer 模块。   object ChiselExample extends App {   chisel3.Driver.execute(args, () =&gt; new Outer) }   运行 sbt run，然后观察生成的 Outer.v。可以发现，Chisel 自动将 clock 从模块 Outer 传递到了模块 Inner。   module Inner( // @[:@3.2]   input   clock, // @[:@4.4]   input   io_dataIn, // @[:@6.4]   output  io_dataOut // @[:@6.4] );   reg  data; // @[Nested.scala 10:21:@8.4]   reg [31:0] _RAND_0;   assign io_dataOut = data; // @[Nested.scala 11:14:@10.4] `ifdef RANDOMIZE_GARBAGE_ASSIGN `define RANDOMIZE `endif `ifdef RANDOMIZE_INVALID_ASSIGN `define RANDOMIZE `endif `ifdef RANDOMIZE_REG_INIT `define RANDOMIZE `endif `ifdef RANDOMIZE_MEM_INIT `define RANDOMIZE `endif `ifndef RANDOM `define RANDOM $random `endif `ifdef RANDOMIZE   integer initvar;   initial begin     `ifdef INIT_RANDOM       `INIT_RANDOM     `endif     `ifndef VERILATOR       #0.002 begin end     `endif   `ifdef RANDOMIZE_REG_INIT   _RAND_0 = {1{`RANDOM}};   data = _RAND_0[0:0];   `endif // RANDOMIZE_REG_INIT   end `endif // RANDOMIZE   always @(posedge clock) begin     data &lt;= io_dataIn;   end endmodule module Outer( // @[:@12.2]   input   clock, // @[:@13.4]   input   reset, // @[:@14.4]   input   io_dataIn, // @[:@15.4]   output  io_dataOut // @[:@15.4] );   wire  Inner_clock; // @[Nested.scala 19:20:@17.4]   wire  Inner_io_dataIn; // @[Nested.scala 19:20:@17.4]   wire  Inner_io_dataOut; // @[Nested.scala 19:20:@17.4]   Inner Inner ( // @[Nested.scala 19:20:@17.4]     .clock(Inner_clock),     .io_dataIn(Inner_io_dataIn),     .io_dataOut(Inner_io_dataOut)   );   assign io_dataOut = Inner_io_dataOut; // @[Nested.scala 21:14:@21.4]   assign Inner_clock = clock; // @[:@18.4]   assign Inner_io_dataIn = io_dataIn; // @[Nested.scala 20:15:@20.4] endmodule   2.4 关于多个主函数 (Scala 入口)   有时候你并不需要一次编译全部代码，而反复修改 Main.scala 中的那个 object 又较为麻烦，那有什么办法简化这种工作吗？就像 Make 可以指定目一样。   方法是，编写多个 “主函数”，然后按需选择入口。例如   object Main extends App {   chisel3.Driver.execute(args, () =&gt; new FullAdder) }  object Sequential extends App {   chisel3.Driver.execute(args, () =&gt; new EnableShiftRegister) }  object Nested extends App {   chisel3.Driver.execute(args, () =&gt; new Outer) }   请注意，这时候由于我们有三个入口，因此直接运行 sbt run 的时候将无法编译。我们需要指定一个入口：   sbt run Sequential   运行上面的命令后，可以看到模块 EnableShiftRegister 被编译，生成了 EnableShiftRegister.v，而其他模块并没有生成对应的 Verilog 文件。   好了，关于生成 Verilog 代码就到这里了。     更多样例代码可以在 GitHub 仓库 chisel-tutorial 中找到。   附录      附件 chisel-101.tar.gz 下载： https://github.com/iBug/Archive/releases/download/Release/chisel-101.tar.gz        包含三个样例代码的 chisel-101-with-examples.tar.gz 下载： https://github.com/iBug/Archive/releases/download/Release/chisel-101-with-examples.tar.gz       Chisel 官方网站： https://chisel.eecs.berkeley.edu/   GitHub 教程仓库： https://github.com/freechipsproject/chisel3/  ","categories": [],
"tags": ["study-notes"],
"url": "https://ibugone.com/cn/chisel-101/",
"teaser":null},{
"title": "数理方程思考题",
"excerpt":"题目（P248 例 3）      设弦的一端（$x=0$）固定，另一端（$x=l$）以 $\\sin\\omega t \\; \\color{red}{(\\omega\\ne\\frac{n\\pi a}l,\\;n=1,2,\\ldots)}$ 作周期振动，且初值为零，试研究弦的自由振动。    问题：研究当 $\\omega \\to \\frac{n\\pi a}l,\\;n=1,2,\\ldots$ 的时候的弦的振动。   解答   要想研究这个特殊情况的振动，首先要观察原问题的求解过程。   1. 原问题的求解过程      依题意，得定解问题         由于边界条件是非齐次的，首先应把边界条件齐次化。选取合适的 $v(t,x)$ 使得 $v$ 既满足泛定方程，又满足边界条件，这时再令 $u=v+w$ 后得到的关于 $w(t,x)$ 的泛定方程也是齐次的。     为此，令         由边界条件 $\\eqref{eq4}$，可知 $X(0)=0,X(l)=1$。把 $v(t,x)$ 代入泛定方程 $\\eqref{eq3}$，且消去 $\\sin\\omega t$，得         所以         由 $X(0)=0$ 得 $C_1=0$；再由 $X(l)=1$，得         从而可得         将 $v(t,x)$ 的表达式和 $u=v+w$ 代回原定解问题，就得到关于 $w$ 的定解问题         由公式解得         相加可得        这就是原问题的解。   2. 解的分析   从上面的原问题的解可以很直观的发现一点：当 $\\omega\\to\\cfrac{n\\pi l}a$ 的时候，会有 $\\sin\\cfrac{\\omega l}a \\to \\sin n\\pi=0$ 以及 $\\omega l=n\\pi a$ 的情况，进而导致多个地方出现分母为 $0$ 的现象。这些部分已用红色标出。也就是说     求解一个定解问题，一般包含三个步骤。上面的过程就算是完成了第一个步骤——分析步骤，即从数学和物理的角度出发，找出了所要的解。   接下来的步骤与书上相同，跳过第二个步骤——综合步骤，即论证所求得的解的确是原问题的解，满足泛定方程和定解条件的步骤——直接进入第三个步骤，对所求得的解进行物理解释。   3. 对所求得的解进行物理解释   对于我们当前求得的这个含有无穷值的解，对其直接进行物理解释并不容易，因此需要从头再看看整个问题的结构。   3.1 问题的提出   本问题 “理想弦的横振动方程” 在书上的 P197 提出。这里我们忽略提出过程中大量的简化过程，直接观察结果 (P199)     由于本问题讨论的是弦的自由振动，因此 $f(t,x)=0$，所以问题化为     考虑到本问题的特殊条件 $\\omega = \\cfrac {n\\pi a}l$，因此这里需要讨论一下 $a$ 的物理意义（$l$ 是弦长，这无需讨论）。为了简化讨论过程，这里先忽略问题的定解条件，专注于泛定方程的物理意义。   3.2 一维波动方程中参数 $a$ 的物理意义   设一根张力为 $T$，密度 $\\cfrac{\\mathrm{d}m}{\\mathrm{d}l}=\\rho$ 的理想弦作自由振动，取其在惯性参考系下的一个波峰附近的一个微元，如图      设这一小段弦的曲率半径为 $R$，则该段微元对应的加速度     其沿竖直方向所受的合力     又因为     得     这时候我们发现，弦上的波速 $v$ 就是一维波动方程的参数 $a$。但是这有什么意义呢？   3.3 驻波与固有频率   回想力学中学过的驻波相关的内容，两列传播方向相反，而振幅、频率都相同的波相遇时，会形成驻波。由于驻波的两端均固定，因此其波长 $\\lambda$ 满足     而波的频率     则波的角频率     从上一节中我们得到了波速 $v$ 与方程参数 $a$ 的一致性，因此这里用 $a$ 替代 $v$ 后可得     也就是说，$\\omega = \\cfrac{n\\pi a}l$ 是长度为 $l$ 的弦作自由振动的固有频率！当 $n=1$ 时，称 $\\omega_1 = \\cfrac{\\pi a}l$ 为基频，同时也可以知道，一根弦的固有频率一定是基频的整数倍。   3.4 共振   谈到固有频率，就不得不讨论共振。在一个机械系统中，当受迫振动的频率与结构的固有频率相吻合，就会有共振的发生。在共振频中，受迫振动只需要很小的驱动力，就可在系统中产生巨大的振幅。   结合以上分析过程，我们判断，当 $\\omega \\to \\cfrac{n\\pi a}l$ 时，在 $u| _ {x=l}$ 端产生的胁迫振动的频率将在弦上产生共振，进而导致振幅随时间的推移可以无限增大，这与理论计算中出现的 $\\lim _ {\\omega \\to \\frac{n\\pi l}a}u=\\infty$ 相符。   而共振在历史上非常有名的一次出现，是塔科马海峡吊桥 (Tacoma Narrows Bridge) (1940 年版)。1940 年塔科马海峡吊桥建成通车后不到 5 个月就倒塌了，而倒塌的原因，是因为其桥面厚度不足，在受到强风的吹袭下引起卡门涡街，使桥身摆动；当卡门涡街的振动频率和吊桥自身的固有频率相同时，引起吊桥剧烈共振，最终因振幅过大而崩塌。   4. 计算机模拟   为了使问题的求解过程更容易理解，我使用了计算机软件 Wolfram Mathematica 12.0 进行绘图模拟。   4.1 准备工作   首先将 $u(t,x)$ 的解导入软件，定义为函数：   u[t_, x_] :=   2*a*l*\\[Omega]*    Sum[      ((-1)^(n + 1)*Sin[(Pi*n*x)/l]*Sin[(Pi*a*n*t)/l])/((l*\\[Omega])^2 - (Pi*a*n)^2),      {n, 1, 20}    ] + (Sin[t*\\[Omega]]*Sin[(x*\\[Omega])/a])/Sin[(l*\\[Omega])/a]   这里由于计算机计算方式的限制，无法将 $\\sum_{n=1}^{+\\infty}$ 导入计算。经过测试，当累加上限为 $20$ 时，该函数已经能够提供很好的近似结果了，因此出于各种考虑（尤其是计算资源的利用），这里就取累加上限为 $20$ 了，因此实际绘图的函数是：     接下来为函数选定合适的参数。根据上面的分析结果，$a$ 为波的传播速率，为了产生较为明显的观察效果，经过测试，我决定选取 $l=10$ 与 $a=1$，则基频 $\\omega = \\cfrac{\\pi a}l = \\cfrac \\pi{10}$。   确定好了参数，就可以开始绘图了。   4.2 静态 3D 绘图   如图，当 $\\omega = 0.5$ 时，$\\omega$ 与任意固有频率都有足够的偏差，此时得到的波形较为随机：   l = 10; a = 1; \\[Omega] = 0.5; Plot3D[u[t, x], {x, 0, 10}, {t, 0, 50}]      当 $\\omega$ 接近基频 (即 $n=1$) 时，可以看出发生了共振现象，振幅随时间不断增大。这里考虑到计算机不能处理分母为零的情况，因此参数 $\\omega$ 不能取基频 $\\cfrac\\pi{10}$，而必须与该值有微小差别，因此我取了 $0.31$。   l = 10; a = 1; \\[Omega] = 0.31; Plot3D[u[t, x], {x, 0, 10}, {t, 0, 200}]      而当 $\\omega$ 接近基频的某个整数倍时，同样能观察到共振现象，但驻波的数量不是一个，而是 $n$ 个。下图取 $n=3$ 绘制：   l = 10; a = 1; \\[Omega] = 3*Pi/10 + 1/1000; Plot3D[u[t, x], {x, 0, 10}, {t, 0, 60}]      4.3 动态图像   通过将一维波形用动态图像展示出来可以很直观地看出不同的 $\\omega = \\cfrac {n\\pi a}l$ 对弦的自由振动的影响。以下几张图分别取 $n=\\cfrac 12,1,2,4$ 绘制。   当 $n = \\cfrac 12$ 时，右端的受迫振动看起来与弦并不和谐，振幅维持在 $1$ 以下：   l = 10; a = 1; \\[Omega] = 0.15; Animate[  Plot[u[t, x], {x, 0, 10}, PlotRange -&gt; {-5, 5}], {t, 0, 300},   AnimationRate -&gt; 30]      当 $n=1$ 时，右端受迫振动与弦的基频相吻合，弦的自由振动的振幅随右端受迫振动的影响而不断增大：   l = 10; a = 1; \\[Omega] = 0.31; Animate[  Plot[u[t, x], {x, 0, 10}, PlotRange -&gt; {-5, 5}], {t, 0, 120, 0.4},   AnimationRate -&gt; 30]      而当 $n$ 取大于 $1$ 的整数时，受迫振动的频率与弦的某个非基固有频率相吻合，结果是出现了多个驻波，且它们的振幅仍然不断增大：   l = 10; a = 1; \\[Omega] = 0.63; Animate[  Plot[u[t, x], {x, 0, 10}, PlotRange -&gt; {-5, 5}], {t, 0, 120, 0.4},   AnimationRate -&gt; 30]      l = 10; a = 1; \\[Omega] = 1.257; Animate[  Plot[u[t, x], {x, 0, 10}, PlotRange -&gt; {-5, 5}], {t, 0, 120, 0.4},   AnimationRate -&gt; 30]      以上就是我对 $\\omega \\to \\frac{n\\pi a}l,\\;n=1,2,\\ldots$ 的时候的理想弦的自由振动的非齐次混合问题的研究。  ","categories": [],
"tags": ["study-notes"],
"url": "https://ibugone.com/cn/pde-thinking-question/",
"teaser":null},{
"title": "简论当代网络安全",
"excerpt":"21 世纪是信息时代，在信息时代中，每个人都有能力去自由地产生、获取、使用和传递信息。而在信息的获取和传递的过程中，计算机互联网是最重要的载体。随着 21 世纪的到来，计算机互联网也走入了家家户户，成为百姓日常生活中不可或缺的基础设施。而随着网络的普及，与其相关的安全事项自然也成为了一个重要话题。   中国科学技术大学公选课《网络安全基础与应用》课程的幻灯片中对“网络安全”是这样定义的：      网络安全是指网络系统的硬、软件及其系统中的数据受到保护，不会由于偶然或恶意的原因而遭到破坏、更改、泄露等。    如同人身安全和财产安全一样，在网络安全的领域中发生的事件也有它自己的特点。下面用几个例子说明网络安全对于个人、对于企业和对于国家的意义。   个人层面的网络安全事件   1. CIH 病毒 (1998)   CIH 是由当时仍在大同大学（台湾）就读的陈盈豪编写，其初衷是挑战当时被广泛接受的“杀毒软件可以有效防止病毒”这一认知，而病毒的命名也是作者的姓名首字母 (Chen Ing-hau)。该病毒在每年的 4 月 26 日发作，用大量垃圾数据覆盖硬盘内容，导致数据损坏和系统崩溃，并尝试重写 BIOS 内容，可导致硬件损坏并需要返厂维修。   据估计，全球范围内超过 6,000 万台计算机受到感染，并因此造成了约 10 亿美元的损失。   2. 熊猫烧香 (2006-2007)   “熊猫烧香” 是一种经过多次变种的病毒，受其感染的计算机中的可执行文件会变成熊猫举着三根香的图标，因而得名。该病毒主要通过网络下载的文件传播，同时也大量利用当时常见的体现出网络安全防范意识低的现象，例如默认密码和空密码，以及未及时安装系统安全更新而导致的可利用的已知漏洞。   据新闻《”熊猫烧香”作者被抓获 灰色资产成幕后元凶》报导，      在最嚣张的时候，李俊（病毒作者）效仿安全厂商的做法，设立病毒自动升级服务器。曾在一天之中升级 8 次，公然挑战反病毒软件厂商，甚至在病毒中嵌入自己的名字，其嚣张气焰不可一世。”    3. XcodeGhost 事件 (2015)   Xcode 是苹果公司发布的用于在 iOS 和 macOS 等操作系统中开发应用程序的开发软件，通过官方的 Mac App Store 免费提供，而由于在中国大陆连接 Mac App Store 常常遇到各种问题，因此不少开发者选择从百度网盘或论坛等较为方便的渠道下载 Xcode 软件，这带来了安全隐患，也是本次事件发生的主要原因之一。   黑客通过修改 Xcode 软件，使得用修改后的 Xcode 编译出来的应用程序都带有黑客提前准备的代码（该代码名为 XcodeGhost，即本事件的名称），收集隐私信息并上传至黑客的服务器。被插入后门的 Xcode 软件通过论坛等渠道传播，造成了此次事件。   XcodeGhost 事件中大量国产应用程序受影响，其中不乏多个知名软件，如微信、网易云音乐、滴滴出行、58 同城、高德地图，甚至 12306 手机软件和一些金融相关的软件（如同花顺）。   4. WannaCry 勒索病毒 (2017)   2017 年初由于美国国家安全局 (NSA, National Security Agency) 的“武器库”泄露，使得 Windows 操作系统中的“永恒之蓝”漏洞被外界所知。微软公司于 2017 年 3 月 14 日发布了针对“永恒之蓝”的补丁，然而利用该漏洞传播的 WannaCry 勒索病毒在两个月后大规模爆发，在全世界范围内传播。受攻击的公司和企业包括西班牙电信、英国国民保健署和联邦快递等。   该病毒会将受害计算机上的所有文件加密，并向受害者索要 300 或 600 美元等值的比特币，且声称若一个星期不支付比特币则“撕票”。该病毒内置的勒索信有多种语言，其中中文版勒索信中有一句话是这么写的：      我敢保证，没有我们的解密服务，就算老天爷来了也不能恢复这些文档。    企业层面的网络安全事件   5. CSDN 密码泄露事件 (2011)   2011 年 12 月 21 日，网络消息称 CSDN 社区遭黑客攻击，600 万用户账户和明文密码泄露。   通常情况下，用户密码不应当明文存储，而是使用安全的措施处理，例如加密后，再存储。   网络文章《CSDN 明文口令泄露的启示》指出：      我昨晚下载了 www.csdn.net.sql 文件，并分析了一下这个文件，经过各种 awk, grep, sort, uniq, sed 后，下面是我看到的东西：          有近 45 万的用户使用 123456789 和 12345678 做口令。     有近 40 万的用户使用自己的生日做口令。     有近 15 万的用户使用自己的手机号做口令。     有近 25 万的用户使用自己的 QQ 号做口令。     设置成弱口令的用户占了 590 万，也就是那种就算你用 MD5 或是 SHA 散列的也能很快就被暴力破解出来的口令。     只有 8000 多个用户的口令里在 8 个长度以上，并有大写字母，小写字母，数字，并不在字典表里。      6. iCloud 名人照片泄露事件 (2014)   2014 年 8 月 31 日，约 200 张好莱坞女性艺人的私人照片被人盗取并上传至贴图网站 4chan，并随后在互联网中被大量转发。苹果公司调查发现，这些私人照片的盗取者为获取图片，非常有针对性地攻击了帐户名、密码和安全问题。据事后分析，该事件可能与 iCloud 登录时允许无限次尝试密码有关。   7. 哔哩哔哩源代码泄露事件 (2019)   2019 年 4 月 22 日下午，有网友发现 B 站（哔哩哔哩视频网站）的网站后台源代码疑似被上传至 GitHub，并且不少关键基础设施，如数据库等，其用户名密码被硬编码在代码里面。在该代码被 GitHub 平台禁用前，其评论区看板已积累超过 6,000 条回复，并且随后几天的网络中不断流传出围观群众在代码中发现的彩蛋，如欺骗用户发送虚假弹幕：      //抽奖不成功也要发送弹幕，概率20% 造成一种很多人中奖的假象    国家层面的网络安全事件   8. 震网 (2010)   震网 (Stuxnet) 在 2010 年 6 月被俄罗斯安全公司首次发现，是针对工业控制系统的蠕虫病毒。该病毒利用西门子的控制系统和 Windows 系统的多个漏洞进行传输和破坏，并通过伪装其他公司的数字签名来逃避检测。2012 年，美国官员承认这个病毒是由美国国家安全局在以色列的协助下研发的，目的在于阻止伊朗发展核武器。   美国对伊朗核武器设施进行的这种有长期准备、组织了庞大的精英黑客团队、有针对性和持续性的攻击称为 APT攻击。APT 指的是高级持续性威胁 (Advanced Persistent Threat)，是隐匿而持久的电脑入侵过程，通常由某些人员精心策划，针对特定的目标。其通常是出于商业或政治动机，针对特定组织或国家，并要求在长时间内保持高隐蔽性。本例就是一个典型的 APT 攻击。   9. 棱镜门 (2007-2013)   棱镜计划是一项由美国国家安全局自 2007 年开始实施的网络监控计划，其深度监听使用加入计划的互联网公司的服务的用户，和与国外人士通信的美国公民，收集的数据包括电子邮件、视频、图片、通话、传输的文件等。该计划由美国国家安全局的合约外包员工爱德华 · 斯诺登于 2013 年 6 月向世人公开，而在此之前，德国总理默克尔据传已经被美国监听长达 11 年。   对网络安全的关注   通过上面的例子可以看出，网络安全与每一个使用网络的人息息相关，因此对网络安全的关注也在随时代的变化而不断增长。   网络攻击目的的变化   在计算机网络发展的早期，大部分网络攻击没有太大的利益驱使，攻击者的目的大多只是为了好玩和证明自己的技术实力；而今天的网络中，大量的攻击都有商业或政治等利益的驱使，因此现在大多数的网络攻击不再是“明目张胆”的炫耀，而是偷偷进入系统中进行破坏或者窃取信息等。   网络设备的普及与多样化   10 ~ 20 年前，不是每个人都能用上连接网络的电脑；而现在，几乎每个人都有连接 4G 网络的智能手机，互联网中产生的信息量也在爆炸性地增长。因此，对个人的网络攻击的目标也从传统的个人计算机扩展到了多样化的网络设备，这样的攻击的目标群体也更大。毫不夸张地说，互联网已经成为了现代的基础设施，如果被攻击破坏，造成的影响是无法估算的。   网络技术的更新与迭代   从计算机系统的初期开始，计算机技术就一直在进行高速地发展和更新换代，与之相伴的也是网络安全领域层出不穷的新型攻击技术。网络攻击的技术从利用软件漏洞传播和发作的蠕虫病毒，到具有社会工程学面貌的钓鱼邮件，再到近几年颇受关注的硬件漏洞，使现代的网络安全技术对防御人员的要求也越来越高。   公民对个人隐私的关注   近年来的多起隐私泄露事件使得公民对个人隐私的关注也在不断提升：           2016 年 12 月 12 日 《南方都市报》：《恐怖！南都记者700元就买到同事行踪，包括乘机、开房、上网吧等11项记录》       2018 年 8 月，华住旗下酒店数据库泄露，涉及 1.3 亿人的个人信息和开房记录等 5 亿多条信息。根据泄露的数据库配置文件，数据库暴露在互联网中，使用默认账户，密码为 123456。   2019 年 1 月，由于 58 同城的一个数据库未做安全保护措施，超过 2 亿中国用户的简历被泄露。   另外，2018 年 3 月，百度董事长李彦宏表示“中国人愿用隐私换方便”，在网络上引起轩然大波，并被央视等多家媒体点名批评。这体现出人民对隐私的关注和对隐私权的需求越来越大。   应对网络安全问题的措施     国家   针对层出不穷的网络安全问题，我们也不是手束手无策乖乖就范的肉鸡。早在 2016 年 11 月，我国就通过了《网络安全法》，该法律已于 2017 年 6 月 1 日正式实施。该法律的不少内容针对近年的网络安全隐患，如个人信息泄露等；明确了网络诈骗等行为的定义和刑罚，明确了网络运营商的责任，要求其处置违法信息、配合侦察机关工作等。   而在此之前，我国也有其他与信息安全相关的法律法规，如      国务院 -《计算机信息系统安全保护条例》、《互联网信息服务管理办法》   公安部 - 《计算机病毒防治管理办法》   公安部等六部委 - 《信息安全等级保护管理办法》   全国人大常委会 - 《保守国家秘密法》   这些法律法规包含了对个人信息的保护、对网络运营者的安全要求，是对公民在网络安全领域的有效的法律保护。与这些法律法规相伴的，是具有相关功能的职能部门，如网信办和国家互联网应急中心。   个人   在个人层面，应当学会自我保护。一方面在受到侵害时要拿起法律武器维护自己的合法权益以外，另一方面也要了解相关知识、提高安全意识、加强自我保护。      及时更新系统和软件，安装安全软件   谨慎对待不知名的或来源未知的软件，拒绝盗版和破解版软件   避免在多个网络账号中重复使用相同密码，不要使用弱密码   网络服务运营者   网络服务运营者应当具有安全意识和责任意识，主动承担起自己在网络安全中应承担的责任，积极解决安全问题。同时，网络服务运营者可以采取的措施有           建立有效的安全生产责任制度，定期对自己提供的网络服务进行安全审查，加强防护，做到未雨绸缪，将安全隐患解决于未然       设立安全响应中心 (Security Response Center, SRC)，积极接受白帽黑客的安全反馈   进行网络安全培训，提升员工的网络安全意识，避免在服务中出现常见的安全漏洞   结语   总而言之，21 世纪中，随着网络技术的不断进步，网络安全的重要性也日益上升。只有关注网络安全、提高网络安全意识、加强网络安全保护、增进网络安全的研究与探索，才能跟紧时代的脚步，不在发展的路上摔跟头。   参考资料      「网络安全基础及应用」课程第 1 章 PPT，http://staff.ustc.edu.cn/~hsi/nsea/ch01.pdf   Virus:DOS/CIH Description | F-Secure Labs，https://www.f-secure.com/v-descs/cih.shtml   CIH 作者陈盈豪在 HITCON 2013 上的演讲：兴趣执着和专注力让我与众不同，https://bbs.pediy.com/thread-176361.htm   李俊的人生病毒：靠熊猫烧香成毒王 网赌 7000 万二进宫，https://news.ifeng.com/a/20180101/54713980_0.shtml   “熊猫烧香”作者被抓获 灰色资产成幕后元凶，http://money.163.com/07/0213/02/3767TGC8002524SC.html   What You Need to Know About iOS Malware XcodeGhost，https://www.macrumors.com/2015/09/20/xcodeghost-chinese-malware-faq/   XcodeGhost 源代码，https://github.com/XcodeGhostSource/XcodeGhost   Xcode 非官方版本恶意代码污染事件（XcodeGhost）的分析与综述，https://www.antiy.com/response/xcodeghost.html   Reflections on Trusting Trust，Communications of the ACM. August 1984, 27 (8): 761–763.   关于防范 Windows 操作系统勒索软件 Wannacry 的情况通报，https://www.cert.org.cn/publish/main/9/2017/20170513170143329476057/20170513170143329476057_.html   安天针对勒索蠕虫“魔窟”（WannaCry）的深度分析报告，https://www.antiy.com/response/wannacry.html   CSDN 明文口令泄露的启示，https://coolshell.cn/articles/6193.html   CSDN 产品总监范凯就密码明文保存问题发布解释，https://36kr.com/p/70800   Apple Media Advisory - Update to Celebrity Photo Investigation，https://www.apple.com/newsroom/2014/09/02Apple-Media-Advisory/   The Heartbleed Bug，http://heartbleed.com/   AVG on Heartbleed: It’s dangerous to go alone. Take this (an AVG tool)，https://www.theregister.co.uk/2014/05/20/heartbleed_still_prevalent/   「震网」病毒的震撼，https://zhuanlan.zhihu.com/p/24037701   西门子曝系统新漏洞中国企业恐受波及，http://jjckb.xinhuanet.com/2011-06/07/content_313556.htm   Stuxnet worm slithers into China, heralds alien invasion，https://www.theregister.co.uk/2010/10/01/stuxnet_china_analysis/   棱镜门泄密事件五周年，改变了什么？，https://news.sina.cn/global/szzx/doc-ihcqccip8322391.d.html?vt=4   Everything you need to know about PRISM，https://www.theverge.com/2013/7/17/4517480/nsa-spying-prism-surveillance-cheat-sheet   Mikko Hypponen: Fighting viruses, defending the net，https://www.ted.com/talks/mikko_hypponen_fighting_viruses_defending_the_net   中国互联网络发展状况统计报告 - 中共中央网络安全和信息化委员会办公室，http://www.cac.gov.cn/wxb_pdf/CNNIC42.pdf   Meltdown and Spectre，https://meltdownattack.com/   华住 5 亿条用户信息疑泄露 警方已介入调查，http://www.xinhuanet.com/fortune/2018-08/29/c_1123343927.htm   超 2 亿中国用户简历曝光！MongoDB 又一重大安全事故，https://www.infoq.cn/article/TL*mYAa6vjUb26gItCdY   恐怖！南都记者 700 元就买到同事行踪，包括乘机、开房、上网吧等 11 项记录，http://epaper.oeeee.com/epaper/A/html/2016-12/12/content_103959.htm   中华人民共和国网络安全法，http://www.npc.gov.cn/npc/xinwen/2016-11/07/content_2001605.htm   《网络安全法》概览，https://assets.kpmg/content/dam/kpmg/cn/pdf/zh/2017/02/overview-of-cybersecurity-law.pdf   国家互联网信息办公室关于《数据安全管理办法（征求意见稿）》公开征求意见的通知，http://www.chinalaw.gov.cn/government_public/content/2019-05/28/657_235862.html   国家计算机网络应急技术处理协调中心简介，https://www.cert.org.cn/publish/main/34/index.html   App 违法收集个人信息官方投诉举报渠道来了，https://www.ithome.com/0/416/613.htm  ","categories": [],
"tags": [],
"url": "https://ibugone.com/cn/about-internet-security/",
"teaser":null},{
"title": "About iBug",
"excerpt":"Undergraduate CS student at USTC, hobbiest programmer and passionate geek. Primarily a developer, often a DevOps engineer and Linux SysAdmin.   My Stack Overflow profile:             See my questions and answers on Stack Overflow, or view a selected list of my questions and answers.   Quick facts   On the techie side:      Primary languages1: Python, C++, C, Bash (these are also my top tags on Stack Overflow)   Secondary languages1: VBScript, JavaScript (also HTML/CSS), Ruby, Verilog, Scala   Minor languages1 and technologies: Nginx, SQL (MySQL / MariaDB), PHP, AWK, Perl   Favorite VCS: Git (and proficient with it)   Favorite automation: Shell scripts, Make, Cron, At   Favorite text editor: &lt;ESC&gt;:wq (get my config)   Daily environment: Windows Subsystem for Linux (Ubuntu 19.04 Disco Dingo), with virtual machines and VPS’s to satisfy additional needs   MSI produces high-performance laptops with very comfortable and beautiful keyboards. Must buy!   Personally:      Primary languages2:            Chinese (Native speaker)       English (Proficient as a foreign language)           Secondary languages2: French, Spanish and Italian (all read-only)        Note on contacting: Using Chinese usually infers a casual talk, so unless you write very formal Chinese documents (e-mails, GitHub issues, etc.) to me, you will likely get a casually-written response, in IM chat-flavor language, and sometimes incoherent. Meanwhile, I’m careful when writing English and often try to be serious. Prefer English if you expect professional talks.       ","categories": [],
"tags": [],
"url": "https://ibugone.com/about/",
"teaser":null},{
"title": "Curriculum Vitae (Beta)",
"excerpt":"   Jan 2019  Reached 20k reputation on Stack Overflow      Jan 2019  Awarded c silver tag badge on Stack Overflow.      Sep 2018  Reached 15k reputation on Stack Overflow      Jun 2018  Gained push access to SmokeDetector, a spam detection bot written in Python   See this chat message from a project owner      Feb 2018  Awarded c++ silver tag badge on Stack Overflow.      Feb 2018  Reached 10k reputation on Stack Overflow.       ","categories": [],
"tags": [],
"url": "https://ibugone.com/cv/",
"teaser":null},{
"title": "Education",
"excerpt":" ","categories": [],
"tags": [],
"url": "https://ibugone.com/education/",
"teaser":null},{
"title": "Friends",
"excerpt":"Ordered randomly           taoky:  https://blog.taoky.moe/            Volltin:  https://volltin.com/            Zihan Zheng:  https://zhengzihan.com/            Sirius:  https://sirius1242.github.io/            Hypercube:  https://0x01.me/            Mingliang Zeng:  https://mlzeng.com/            cvhc:  https://i-yu.me/            ksqsf:  https://ksqsf.moe/       Other good folks online:      ArtOfCode:  https://artofcode.co.uk/     ","categories": [],
"tags": [],
"url": "https://ibugone.com/friends/",
"teaser":null},{
"title": "Projects",
"excerpt":"OJSandbox  An experimental sandbox for online judgers (OJ) utilizing multiple Linux features, including rlimit, cgroup and chroot. I am a co-author.   (Charcoal) Smoke Detector ( Website)  A community-driven chatbot that detects spam across the Stack Exchange Network and reports them, so they can be quickly removed.   I joined the team in December 2017, and was recognized as a developer in March 2018.   This is the largest project in this page and also the first existing project that I’ve joined (all other projects are started from scratch).   Chisel RISC-V  A Chisel implementation of the RISC-V CPU aiming to pave the way for its application in school teaching, across several courses, including Introduction to Computer Systems (ICS), Computer Organization and Design (COD) and more. It consists of a RISC-V-based SoC design (hardware) and a full set of toolchain to compile C programs for the SoC.   It is currently under development.   Tetris with AI  A good game automation that you must try and watch!   SpaceRider  An old Flash plane-shooting game that I made when I was 13. ActionScript 2.0 (so expect that it won’t run very fluently on a low-end computer)   Python Reversi  An implementation of the classic Reversi / Othello game using Python and PyQt5. It has an intensive AI that’s hard to beat.   Aurora Theme  Aurora is a clean, responsive Jekyll theme for GitHub Pages.   And it’s the theme for my Project Pages. I have published this theme on RubyGems.   College Physics Experiments Toolbox (incomplete)  A set of tools made to make College Physics Experiments easy!  ","categories": [],
"tags": [],
"url": "https://ibugone.com/projects/",
"teaser":null},{
"title": "Skills",
"excerpt":"Grading scale mechanism:                  Score       Explanation                       10       You literally have written a book.                 7 - 9       Expert, go-to person on this technology.                 5 - 6       Solid daily working knowledge. Highly proficient.                 3 - 4       Comfortable working with this, have to check manual on some things.                 1 - 2       Have worked with it previously but either not much, or rusty.           (Copied from https://www.cirosantilli.com/skills, thanks Ciro!)   However, since I’m only an amateur CS student without too many years of solid development experiences (without the word solid, I may say 8 years, but with it, I’d go with only 5 years, being conservative), I’m very hesitant to give myself a single 5 score on anything, because I still need to occasionally check manuals and documentations on many technologies I work with. For this reason, instead of numbers, I’ll show the scores with stars. One ★ means one score (and it’s also more intuitive to look at).   Ordered at my own discretion, what I deem more important goes first :)   Software Programming      C++ #3#        Stack Overflow activity (also my top tag as of May 2019)       Reason for not giving a fourth score: I’m not particularly familiar with STL and I haven’t participated in a scaled C++ project. This should be considered a downside as I’m familiar with C++ syntax and many sneaky language features (and that’s where my Stack Overflow score under the [c++] tag primarily comes from).        C #4#        Stack Overflow activity (also my second top tag as of May 2019) and my  repositories        Python #4#        Stack Overflow activity       Also long-term contributor to SmokeDetector, a mid-scale Python chatbot that detects spam and deletes them rapidly.        Bash #3#        Stack Overflow activity and a collection of my gadgets written in Bash or POSIX sh.        VBScript #3#        A vicious project and some gadgets.        SQL #1#        Merely touched and played with. Built some projects with MariaDB. SQLite3 CLI utility is good for tampering game saves :)        Ruby #1#        Barely touched Ruby, write short snippets to aid existing Ruby projects (my Jekyll website or other Rails apps)        Verilog #1#        Learned from school courses Digital Circuit labs and Computer Organization and Design labs. Not practiced much        Scala / Chisel #1#        Assigned a research on Chisel for performing particularly well in Digital Circuit labs, and have worked on a few entry-level projects (my COD  repo and this RISC-V project).        Flash ActionScript #2#        A very addictive plane-shooting game when I wrote back when I was 14. (Project home page)        The Web Trilogy (HTML/CSS/JavaScript) #2#        The ugly “previous” website that I designed and wrote on my own. Also a few pages on this site contains short JS snippets serving for various purposes. jQuery included.        Regular expressions #5#        The only item on this page that I dare claiming solid knowledge on. Still learned and practiced in the SmokeDetector project linked above.       Tools and technologies      Git #3#        I was about to give myself a score of 5 on this when I realized that Ciro Santilli claimed the same score, but backed with a huge tutorial he wrote on his own. Then I reevaluated myself and gave a score of only 3 - I can’t even write a fifth of Ciro’s tutorial.        Linux #3#        Daily working environment (WSL) with enough supporting knowledge. Ironically, I don’t have a preferred desktop environment because I mostly work in CLI. I have a few Ubuntu and Debian servers that I maintain personally, including a  Raspberry Pi.       What about checking out my tmux config?        Windows Desktop #4#        Long since I was 12 I began to learn various configurations and tweaks (primarily the Registry) of Windows XP and Windows 7, which helped build my solid knowledge on Windows setup, maintenance and recovery.       Still using a Windows laptop (by MSI) for day-to-day working, yet heavily relies on WSL.        Docker #2#        My favorite application deployment solution, but haven’t got much experience with it. I also have private CIs running in Docker containers.        Make #1#        My preferred build automation system. Usually writes Makefile for personal projects.        NGINX #1#   Other      Hardware maintenance #3#        I assembled several desktop computers, and I maintain all my hardware on my own, ranging from my laptop to my phones. I send them to repair shops only when I identify that I can’t repair or replace it by myself.              I disassembled new laptop even on day 1 of puechase, usually for an immediate upgrade (e.g. SSD 256 GB → 1 TB). (Dec 2018)       I replaced a broken screen of an old phone manually. (Oct 2016)       I dismantaled a HDD to learn how it worked. (April 2016)       I assembled my first desktop computer from parts. (May 2014)            Cryptography #2#        My specialty in CTF competitions.              ","categories": [],
"tags": [],
"url": "https://ibugone.com/skills/",
"teaser":null},{
"title": "Status",
"excerpt":"   Build time   2019-07-12 20:00:24  \tCurrent time \t    Source Git revision   ee9e8ab iBug: Cleanup _config.yml  \t \t\tContinuous Integration \t\t \t\t \t    \tThis site is deployed from CircleCI build 348 &#9200;       ","categories": [],
"tags": [],
"url": "https://ibugone.com/status/",
"teaser":null},{
"title": "RegEx match open tags except XHTML self-contained tags",
"excerpt":"Original post: RegEx match open tags except XHTML self-contained tags by bobince on Stack Overflow     You can’t parse [X]HTML with regex. Because HTML can’t be parsed by regex. Regex is not a tool that can be used to correctly parse HTML. As I have answered in HTML-and-regex questions here so many times before, the use of regex will not allow you to consume HTML. Regular expressions are a tool that is insufficiently sophisticated to understand the constructs employed by HTML. HTML is not a regular language and hence cannot be parsed by regular expressions. Regex queries are not equipped to break down HTML into its meaningful parts. so many times but it is not getting to me. Even enhanced irregular regular expressions as used by Perl are not up to the task of parsing HTML. You will never make me crack. HTML is a language of sufficient complexity that it cannot be parsed by regular expressions. Even Jon Skeet cannot parse HTML using regular expressions. Every time you attempt to parse HTML with regular expressions, the unholy child weeps the blood of virgins, and Russian hackers pwn your webapp. Parsing HTML with regex summons tainted souls into the realm of the living. HTML and regex go together like love, marriage, and ritual infanticide. The &lt;center&gt; cannot hold it is too late. The force of regex and HTML together in the same conceptual space will destroy your mind like so much watery putty. If you parse HTML with regex you are giving in to Them and their blasphemous ways which doom us all to inhuman toil for the One whose Name cannot be expressed in the Basic Multilingual Plane, he comes. HTML-plus-regexp will liquify the n​erves of the sentient whilst you observe, your psyche withering in the onslaught of horror. Rege̿̔̉x-based HTML parsers are the cancer that is killing StackOverflow it is too late it is too late we cannot be saved the trangession of a chi͡ld ensures regex will consume all living tissue (except for HTML which it cannot, as previously prophesied) dear lord help us how can anyone survive this scourge using regex to parse HTML has doomed humanity to an eternity of dread torture and security holes using regex as a tool to process HTML establishes a breach between this world and the dread realm of c͒ͪo͛ͫrrupt entities (like SGML entities, but more corrupt) a mere glimpse of the world of reg​ex parsers for HTML will ins​tantly transport a programmer’s consciousness into a world of ceaseless screaming, he comes, the pestilent slithy regex-infection wil​l devour your HT​ML parser, application and existence for all time like Visual Basic only worse he comes he comes do not fi​ght he com̡e̶s, ̕h̵i​s un̨ho͞ly radiańcé destro҉ying all enli̍̈́̂̈́ghtenment, HTML tags lea͠ki̧n͘g fr̶ǫm ̡yo​͟ur eye͢s̸ ̛l̕ik͏e liq​uid pain, the song of re̸gular exp​ression parsing will exti​nguish the voices of mor​tal man from the sp​here I can see it can you see ̲͚̖͔̙î̩́t̲͎̩̱͔́̋̀ it is beautiful t​he final snuffing of the lie​s of Man ALL IS LOŚ͖̩͇̗̪̏̈́T ALL I​S LOST the pon̷y he comes he c̶̮omes he comes the ich​or permeates all MY FACE MY FACE ᵒh god no NO NOO̼O​O NΘ stop the an​*̶͑̾̾​̅ͫ͏̙̤g͇̫͛͆̾ͫ̑͆l͖͉̗̩̳̟̍ͫͥͨe̠̅s ͎a̧͈͖r̽̾̈́͒͑e n​ot rȇͧ̌aͨl̘̝̙̃ͤ͂̾̆ ZA̡͊͠͝LGΌ ISͮ̂҉̯͈͕̹̘̱ TO͇̹̺ͅƝ̴ȳ̳ TH̘Ë͖́̉ ͠P̯͍̭O̚​N̐Y̡ H̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝S̨̥̫͎̭ͯ̿̔̀ͅ   ","categories": [],
"tags": ["stack-overflow"],
"url": "https://ibugone.com/blog/2009/11/regex-match-open-tags-except-xhtml-self-contained-tags/",
"teaser":null},{
"title": "Some ideas about multicore on Android",
"excerpt":"Laptops have usually at most four cores, and dualcores are probably more common. I have recently switched from quadcore to dualcore and I can confirm there is a limited number of use cases for quadcore, even with CPU intensive tasks.   On the other hand, on mobile phones, quadcores, hexacores and octacores seem to be common. Why? What tasks can utilize them?     First things first, the big.LITTLE combination strategy (technically, HMP, Heterogeneous Multi-Processing clusters) is the primary reason for so many (and sometimes overwhelmingly many) cores. A mobile device often runs into multiple scenarios, both heavy load and light load ones included.   An extreme consumer-class example is MediaTek’s Helio X20, which has 2 performance-oriented A72 cores, 4 balanced A53 cores, plus 4 energy-efficient A35 cores. That’s very flexible throughout different usage cases. However, I think 8 cores 2 clusters is usually enough.   There’s also another desktop-like example, Qualcomm’s Snapdragon 800 series (S 800, S 801, and S 805). There are only 4 cores of the same microarchitecture in each SoC, with 2 clocked higher and 2 clocked lower. Qualcomm made these SoCs because they were very confident of their own microarchitecture (Krait 400 and Krait 450).   For games, even if they seemingly demand GPU performance rather than CPU, they still put a heavy load on the CPU. A GPU cannot work alone without something else supplying it with data to be processed, and that’s one of the major jobs that the CPU is doing while you’re gaming. In most gaming cases, the GPU only renders graphics, while all other jobs like loading data, resources and assets, and calculating in-game mechanics like the system, environment and physics are done by the  CPU. You won’t observe a higher frame rate if you upgrade your GPU while sticking to a low-end CPU.   A secondary reason is how Android utilizes CPU resources. Android pretty much makes their own application environment. It uses nothing but codes (and APIs) from Java, but it has its own virtual machine named Dalvik, which was later replaced by ART (API Level 21). APKs have their executable codes in a “neutral” format, much like .class files in Java. Before they’re run, the codes get compiled once more into the machine’s native instructions[1]. The compilation process is multi-threaded and can utilize multi-cores for a performance boost.  And when an app is running, there are several other processes and mechanics (like the Garbage Collector) that run alongside, or parallel to the app. More cores can let the supportive processes run more efficiently, as well as the main app.  1. If you use a file type identifier, you’ll find that “optimized” dex files are in ELF format, while the “neutral” dex files are just in a format of their own.   Another lesser reason is that ARM cores can’t work as fast as an Intel x86 chip. The Intel x86 microarchitecture can be dated back to 1976, when the Intel 8086 chip started to be designed, which means that the x86 has developed over a long time. A single modern high-end ARM Cortex-A73 core is only as powerful as an Intel Clarkdale core, taking Core i5-660 as an example (GeekBench, single-core). This is because x86 is a CISC microarchitecture while ARM is a RISC microarchitecture. You surely don’t want a phone that becomes laggy with only two or so active apps. More cores will help relieve the pressure. That’s why dual-core SoCs are relatively popular only on smart watches. Who needs performance on a smart watch?   Interestingly, more cores will result in less power than a single core at the same load. The relationship between CPU frequency and power consumption is more than linear, so twice the frequency will always result in demanding more than twice, or even 3x or 4x as much power, while delivering less than twice the performance (due to other resource limitations like cache). So 4 cores can easily beat a single core at the same load, providing better performance and simultaneously demanding less power.   Further Reading:      Why 8 and 10 CPU cores in smartphones are a good idea – a lesson from the kitchen        Why some phones have two quad core processors and some have similar clocked octa core. Which is better one in terms of performance?       ","categories": [],
"tags": ["stack-exchange","android"],
"url": "https://ibugone.com/blog/2017/06/android-phone-cores/",
"teaser":null},{
"title": "Append int to std::string",
"excerpt":"For people new to template resolution and template type deduction in C++, they may have written this code and get confused why it doesn’t compile:   #include &lt;string&gt;  int main() {     std::string s;     s += 2;     // compiles correctly     s = s + 2;  // compiler error     return 0; }   And here’s my answer:     TL;DR operator+=() is a class member function in class string, while operator+() is a template function.   The standard class template&lt;typename CharT&gt; basic_string&lt;CharT&gt; has an overloaded member function basic_string&amp; operator+=(CharT), and string is just basic_string&lt;char&gt;.   As values that fits in a shorter type can be interpreted as that type, in the expression s += 2, the 2 is not treated as int, but char instead. It has exactly the same effect as s += '\\x02'. A char with ASCII code 2 (STX) is appended, instead of the character '2' (with ASCII value 50, or 0x32).   However, string does not have an overloaded member function like string operator+(int), so s + 2 is not a valid expression, thus throws an error during compilation. (More below)   You can use operator+ function in string in these ways:   s = s + char(2);  // or (char)2 s = s + std::string(2); s = s + std::to_string(2);  // C++11 and above only     For people concerned about why 2 isn’t automatically cast to char with operator+,   template &lt;typename CharT&gt;   basic_string&lt;CharT&gt;   operator+(const basic_string&lt;CharT&gt;&amp; lhs, CharT rhs);   The above is the prototype[note] for the plus operator in s + 2, and because it’s a template function, it is requiring an implementation of both operator+&lt;char&gt; and operator+&lt;int&gt;, which is conflicting. For details, see Why isn’t automatic downcasting applied to template functions?   Meanwhile, the prototype of operator+= is:   template &lt;typename CharT&gt; class basic_string{     basic_string&amp;       operator+=(CharT _c); };   You see, no template here (it’s a class member function), so the compiler deduces that type CharT is char from class implementation, and int(2) is automatically cast into char(2).     Note: Unnecessary code is stripped when copying from C++ standard include source. That includes typename 2 and 3 (Traits and Allocator) for template class “basic_string”, and unnecessary underscores, in order to improve readability.  ","categories": [],
"tags": ["stack-overflow","development"],
"url": "https://ibugone.com/blog/2017/08/append-int-to-stdstring/",
"teaser":null},{
"title": "Joining SmokeDetector",
"excerpt":"After a plain request, an administrator of the SmokeDetector project added me under the Developers section of their team member list, which indicates that I am a known personnel for contributing a non-trivial amount of code to the project.   Starting off   The whole SmokeDetector project is written in Python 3, and is currently the #2 starred repository tagged spam on GitHub. They use flake8 for coding convention enforcement, which makes the code pretty readable to anyone new to the project.   I started from reading the part of the code that I can understand, and making trivial changes like changing the content of string literals, as I usually do with unfamiliar code or learning a new programming language. My first pull request that actually changed some functionality was a not-so-hard bug fix: In the reason mostly dots in {}, it used to attempt to strip &lt;code&gt; blocks after stripping all HTML tags, when there was no code blocks to strip anymore. This way a lot of dots inside code blocks that should have been stripped were wrongly left intact, and counted towards “total number of dots”. A lot of false positives were generated because in some code blocks, the density of dots was particularly high.   It wasn’t hard to copy that function down and try running it locally. I only added a few print statements before I noticed the logical error and made some patch. Then I submitted it as a pull request and luckily, it did not take long for a maintainer to evaluate my patch and merge it.   Continuing more   Sure. I kept submitting a steady stream of pull requests since then, and most were small fixes/changes. They were mostly a few lines’ changes or even only a few characters, yet they made sense. They vary from catching a missing keyword to adding a handy new chat command.   Some changes that I’m specifically proud of:      #1544: Whitelist a few common file extensions that are often linked to external code sources like GitHub or Pastebin. They used to be caught for misleading link a lot.   #1634: Add a new command !!/scan (though it’s originally named !!/checkpost). This command instructs SmokeDetector to scan a post if it was missed earlier, or if the user isn’t sure if it’s spam and is hesitant to directly !!/report it. It has become more popular than the original !!/report command since it was introduced.        #1677: Show analyzed reasons for manually reported posts. The “why” part of a manually reported post used to have only one line like this:       Post manually reported by *iBug* in *Charcoal HQ*          After my patch, SmokeDetector now runs the post through all the tests and generates an analysis of the post, telling inspectors what reasons the post would have been caught for. See this report for example.       #1723: A bug fix for another long-standing bug in message parsing due to Stack Exchange inserting invisible characters every 80 characters, for the purpose of line breaking (strange why can’t they use CSS). There was a previous attempt that failed to fix this bug, and I reverted it by the way. The patch was verified to be working by later tests.   Conclusion   There’s no denying that it’s an important skill to continue from others’ code, as it’s a case that every programmer has to face sooner or later. Try starting at some easier tasks like inspecting a small single-file program and understanding it, then advance to trying modifying a multi-file project and make your own comprehension. Every project is a new start and you’ll soon learn your own way of joining another team of coders.   ","categories": [],
"tags": ["development"],
"url": "https://ibugone.com/blog/2018/03/joining-smokedetector/",
"teaser":null},{
"title": "Build GitHub Pages with Travis CI",
"excerpt":"I just set up my GitHub Pages to be built with Travis CI. It’s amazing. →    This site is now automatically built with Jekyll and pushed to my GitHub Pages repository whenever I push a commit to the source repository. Some build information is available on an About page that I specifically designed for auditing purposes.   Previous state: A site that’s previously hosted on GitHub Pages, with source files directly put in username.github.io, and uses one of GitHub’s official themes.   If you’re using a gem-based theme, it’s also OK, with only one extra line to add in a file.   What’s Travis CI?   From Wikipedia:      Travis CI is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub.    You really should read the Wikipedia entry. It’s comprehensive.   OK, but why do I need it?   If you stand with the small set of plugins allowed on GitHub Pages and the limited functionality it provides, as well as the unavailability of any pre- or post-processing scripts put together by yourself, then you probably don’t need this solution at all. BUT, if you need additional plugins, or have a custom script that you’d like to run before generating your Jekyll website, this is definitely an improvement over vanilla GitHub Pages.   1. Setting up your workspace for local building   Jekyll is written in Ruby, so of course you need Ruby to run Jekyll. Some dependencies of Jekyll may require other libraries before they can run.   To install necessary components for Jekyll to run, type this command in a terminal:   sudo apt install ruby ruby-dev   If you’re running Fedora/RHEL/CentOS etc, replace apt with yum, or with brew if you’re on a Mac that has Homebrew installed.   Ruby’s package manager, RubyGems, should be installed along with Ruby in the above command. Type gem in your terminal and see if it shows up. If not, install any package that contains rubygem in the package name and try again.   Now we need Ruby Bundler for dependency resolution and handling. It should be installed with RubyGems:   gem install bundler   If gem complains about permission stuff, run the command again with sudo.   We’re almost done! Just set up Jekyll and whatever GitHub Pages depends and you can build your site in GitHub flavor!   Create a file named Gemfile with the following content:   group :jekyll_plugins do     gem \"github-pages\" end   If you use another gem-based Jekyll theme for your site, add it in the group block as a gem. After that, run bundle install to set up your GitHub Pages build environment. Bundler should not require root privileges so you don’t need to prefix the command with sudo.   Done? Done. Now run bundle exec jekyll build and have some coffee. Jekyll should generate your site under the _site folder. You can also try it live with bundle exec jekyll serve and open http://localhost:4000 in a browser. It’s really simple, isn’t it?   Oh yes, there’s another small change to apply. Add these lines to your _config.yml if they aren’t present. These settings are safe and won’t change your site if you push them directly to GitHub, but will correct some errors (if present) in later builds.   url: https://{yourname}.github.io baseurl: /   2. Setting up Travis CI build   Set up Travis CI   To set up Travis CI, you need to first register, and then tell Travis what to do. If you have already set up Travis CI for your other projects, you can skip this part.   Open https://travis-ci.org and click on the top-right corner. Select Sign in with GitHub. Grant permissions to Travis CI and you’ll be redirected back to Travis. Flip the switch beside your repository name.   You can also go to the settings page of your repo and try them out. It’s recommended that you turn on the option Build only if .travis.yml is present. Make sure Build pushed branches is turned on.   Set up build settings   Now you’ve set up Travis CI. You need to tell Travis how to build your site. Create a file named .travis.yml with the following content. Note the file name starts with a dot.   language: ruby cache: bundler sudo: false  script: bundle exec jekyll build   The first two lines tell Travis that the project uses Ruby, and cache Ruby Bundler’s installation, so your subsequent builds will be faster as Bundler won’t have to actually install anything - it is correctly cached. The third line tells Travis that building the site does not require root privileges. The last line is your site’s build script.   Commit and push the file to GitHub, and go to Travis CI. You’ll see your site is being built by Travis. There may be a delay of up to half a minute before Travis detects your commit and builds it, so don’t haste.   You’ll see Travis’s build log, including Jekyll’s output. That’s it. The site is built.   3. Use Travis to deploy to GitHub   Generating access token for Travis CI   Before you use Travis to deploy built site to GitHub directly, there’s one thing to note: For user/organization pages, GitHub Pages can only be built from the master branch. Because of that, you need to push your sources to another branch like source, or another repository.   If you’ve pushed your sources to another branch of the same repository, you don’t need to change anything on Travis CI. If you’ve pushed your sources to another repository, go to Travis CI and turn on the switch for that repo (and probably turn off the switch for your GH Pages repo).   To allow Travis to push to your repositories, we need to generate an access token for it. Go to Personal Access Tokens settings page and click Generate new token. Enter an identifiable name like “Travis CI”, and tick the box beside public_repo. You can also tick other boxes but they won’t be useful.   Click Generate Token below and you’ll get your token. Be careful not to expose it because anyone will have push access to all your public repositories (and other privileges, if you checked the boxes) with that token. You can revoke it at any time.   Go to your build settings page on Travis CI. Scroll down and look for “Environment variables” section. Enter GH_TOKEN as the name, and your token as the value. Do not turn on “display value in build log”.   Setting up deployment   We need a deploy script. It can be as simple as following:   #!/bin/sh  cd _site git init git config user.name \"Travis CI\" git config user.email \"travis@travis-ci.org\" git add --all git commit --message \"Auto deploy from Travis CI build $TRAVIS_BUILD_NUMBER\" git remote add deploy https://$GH_TOKEN@github.com/&lt;yourname&gt;/&lt;yourname&gt;.github.io.git &gt;/dev/null 2&gt;&amp;1 git push --force deploy master &gt;/dev/null 2&gt;&amp;1   Replace &lt;yourname&gt; with your GitHub username in the above script. Name the script deploy.sh in your repository.   Now tell Travis to call the deploy script after building your site. Add these lines to your .travis.yml:   after_success:   - chmod 777 deploy.sh   - ./deploy.sh   Push the changes to GitHub and watch Travis CI. It’ll build your site in a moment, and push the built site to your GitHub Pages repo.   Voila! You can now push changes to your sources to GitHub, and let Travis CI build it and deploy it for you.   4. Miscellaneous   When building with Travis CI, it’s much like a local environment. You are no longer restricted to use only the supported plugins on GitHub Pages. You can use an arbitrary RubyGems-based plugin by adding gem \"plugin-name\" into your Gemfile, in group :jekyll_plugins. Travis will fetch the plugins and build your site for you.   Here’s a list of awesome gem-based Jekyll plugins that you can try.   ","categories": [],
"tags": ["development","github-pages"],
"url": "https://ibugone.com/blog/2018/04/build-github-pages-with-travis-ci/",
"teaser":null},{
"title": "Making a Reversi game with Python",
"excerpt":"As a casual attempt to accomplish a Grand Assignment, I created a Reversi game with Python. The project is open-source on GitHub and you can view it with the link above.      The game implements the following functionality:      Graphical User Interface (GUI), using PyQt5   Built-in AI implemented as a heuristic searching (and evaluation) algorithm   The core functionality of the game is pretty simple, and should be easy for anyone familiar with the Reverso game. The code is in reversi.py.   It’s the GUI and the AI part that differentiates implementations of the Reversi game. Since GUI isn’t very hard to create with Qt, I’ll focus on the AI algorithm here.   As a general (and relatively easy) way to create an AI for the game, heuristic searching well balances between coding complexity and the competence of the resulting algorithm. Heuristic searching is basically a complete searching tree at limited depth, equipped with a heuristic evaluation function that determines the situation of the game board.   Heuristic Evaluation   From my previous experiences in playing Reversi with others, I’ve learnt that it’s important to occupy side grids and corner grids, while avoiding the opponent to occupy them. With some research and calculation, this boils down to a predefined weight table:   SCORE = [     [  500, -150, 30, 10, 10, 30, -150,  500],     [ -150, -250,  0,  0,  0,  0, -250, -150],     [   30,    0,  1,  2,  2,  1,    0,   30],     [   10,    0,  2, 16, 16,  2,    0,   30],     [   10,    0,  2, 16, 16,  2,    0,   30],     [   30,    0,  1,  2,  2,  1,    0,   30],     [ -150, -250,  0,  0,  0,  0, -250, -150],     [  500, -150, 30, 10, 10, 30, -150,  500] ]   This is a good start but may not be sufficient in complicated scenarios. While it’s good to try to occupy sides and corners, it’d be of little value when they’re easily captured by the opponent.   Given the idea above, I came up with this “chess liberty” solution. The score will be decreased if a chess is “too liberated”.   for dx in [-1, 0, 1]:     for dy in [-1, 0, 1]:         tx, ty = x + dx, y + dy         if 0 &lt;= tx &lt; BS and 0 &lt;= ty &lt; BS and board[tx][ty] == EMPTY:             liberty += 1 if chess == BLACK:     c1 += 1     s1 += SCORE[x][y] - liberty * LIBERTY else:     c2 += 1     s2 += SCORE[x][y] - liberty * LIBERTY   where s1 is the score for the black side, and s2 is the score for the white side.   The final part is the side chess check (code). It checks if a corner may be occupied by the opponent (having own chess around), and if it’s occupied, add additional score if there are more chesses of the same color.   Searching tree   A plain searching algorithm would be really plain. The black side wants the score to be as high as possible, while the white side wants the exact opposite.   A pseudo-code of the algorithm is given below:   MAX = 999999  function heuristicSearch(game, side, depth)   if depth &lt;= 0     return null, heuristicScore(game)    want_max = (side == BLACK)   bestMove = null   if want_max     bestScore = -MAX - 1   else     bestScore = +MAX + 1    for move in game.availableMoves     game.perform move     // Recurse     subMove, subScore = heuristicSearch(game, side, depth - 1)     game.undo      if want_max       if subScore &gt; bestScore         bestScore = subScore         bestMove = move     else       if subScore &lt; bestScore         bestScore = subScore         bestMove = move   return bestMove, bestScore   That’s the abstract of the searching procedure. There are a few things to do before it’s fully working.      Handle the case where the game has ended already   Handle the case where the current player has no moves available   Both cases aren’t too complex to be handled with a few lines of codes. And then, there’s a performance concern: Why bother searching deeper when one move is bad enough that subsequent moves can’t perform any better?   Fortunately, with the help of the Alpha-Beta Pruning algorithm, this is a solvable problem, which ~I will describe in a later article~ I have written here.   ","categories": [],
"tags": ["development","study-notes"],
"url": "https://ibugone.com/blog/2018/05/python-reversi/",
"teaser":null},{
"title": "Alpha-Beta Pruning",
"excerpt":"As described in a previous article, Alpha-Beta pruning can be used to speed up minimax heuristic searching by pruning branches that will never be reached.   A quick glance from Wikipedia:      It is an adversarial search algorithm used commonly for machine playing of two-player games (Tic-tac-toe, Chess, Go, etc.). It stops completely evaluating a move when at least one possibility has been found that proves the move to be worse than a previously examined move.    Alpha-Beta pruning   The alpha-beta pruning algorithm is based on the fact that one side wants to maximize the evaluated score, while the other wants to minimize it. Both sides are later referred to as Max and Min.   The algorithm maintains two values, alpha and beta, which represent the minimum score Max is assured of, and the maximum score Min is assured of, respectively. The values start at the “worst state”, i.e.,  and . Whenever it goes to a point where , we know that this branch need not be examined as it will never be reached, given that both sides have found out that it’s no better (or worse) than a known, assured branch.   This image from Wikipedia demonstrates it well:      Let’s call the above tree “Levels 0 to 4”, where Level 0 contains only one node, the root node, and it’s where the searching starts. Levels 1 to 4 contains 3, 5, 7, 9 white nodes each. Greyed-out nodes are pruned by the alpha-beta algorithm. The numbers on the nodes are the best (maximum or minimum) score assured at this branch.   The tree is searched from left to right. It first completes the leftmost two nodes at level 4 and backtracks to the first node at level 2. At this time at the level 2 node, both sides know that this branch can assure Max of a minimum score of 5. The searching then goes to the second node at level 3, and it finds that this node can assure Min of a score of 4, which is lower than the minimum that Max has been assured of. This means that Max will not choose this branch if the game has reached the first node at level 2, and we can safely cut off the searching here (prune this branch).   Then we goes to the second node at level 2, and for Min it’s a better branch, so Min will choose this path. No pruning is happening here.   After completing the first two branches at level 1, the search goes to the last branch at level 1. It finds that this branch can assure Min of 5, which is, to Max, worse than what it has been assured of (6 from the 2nd branch), so the rest of this branch is cut off. The final result is that Max will pick the 2nd branch at level 1.   Heuristic searching with alpha-beta pruning   Here’s the pseudo-code in the previous post that demonstrates a plain heuristic searching algorithm.   function heuristicSearch(game, side, depth)   if depth &lt;= 0     return null, heuristicScore(game)    want_max = (side == BLACK)   bestMove = null   if want_max     bestScore = -MAX - 1   else     bestScore = +MAX + 1    for move in game.availableMoves     game.perform move     // Recurse     subMove, subScore = heuristicSearch(game, side, depth - 1)     game.undo      if want_max       if subScore &gt; bestScore         bestScore = subScore         bestMove = move     else       if subScore &lt; bestScore         bestScore = subScore         bestMove = move   return bestMove, bestScore   To add alpha-beta pruning, as described above, we need to maintain two values, α and β, and cut off searching when α&gt;β.   function heuristicSearch(game, side, depth, alpha, beta)   if depth &lt;= 0     return null, heuristicScore(game)    want_max = (side == BLACK)   bestMove = null   if want_max     bestScore = -MAX - 1   else     bestScore = +MAX + 1    for move in game.availableMoves     game.perform move     // Recurse     subMove, subScore = heuristicSearch(game, side, depth - 1, alpha, beta)     game.undo      if want_max       if subScore &gt; bestScore         bestScore = subScore         bestMove = move       alpha = max(alpha, bestScore)       if alpha &gt;= beta         break  // alpha cut     else       if subScore &lt; bestScore         bestScore = subScore         bestMove = move       beta = min(beta, bestScore)       if alpha &gt;= beta         break  // beta cut   return bestMove, bestScore   Since α and β are passed down to deeper recursive searches, they need initial values. The modified function should be called like   heuristicSearch(game, side, depth, -INF, INF)   Optimization   As seen in the image from Wikipedia:      We can see that if the 2nd node at level 2 is examined earlier, the 1st node would have been pruned. We want to find a way to make pruning occur more often, further improving the performance of the algorithm.   In most typical games, a partially good move often leads to better subsequences, and vice versa. This fact implies that we can sort the current steps we’re going deep into, and search better moves first. Worse moves will likely be pruned more often. This leads to a small change in the code:   function heuristicSearch(game, side, depth, alpha, beta)   if depth &lt;= 0     return null, heuristicScore(game)    want_max = (side == BLACK)   bestMove = null   if want_max     bestScore = -MAX - 1   else     bestScore = +MAX + 1    moves = game.availableMoves   // ↓↓↓   sort moves by heuristicScore(after move)   // ↑↑↑    for move in sorted_moves     game.perform move     // Recurse     subMove, subScore = heuristicSearch(game, side, depth - 1, alpha, beta)     game.undo      if want_max       if subScore &gt; bestScore         bestScore = subScore         bestMove = move       alpha = max(alpha, bestScore)       if alpha &gt;= beta         break  // alpha cut     else       if subScore &lt; bestScore         bestScore = subScore         bestMove = move       beta = min(beta, bestScore)       if alpha &gt;= beta         break  // beta cut   return bestMove, bestScore   Code   The whole project of the Python Reversi is open-source at GitHub. The AI algorithm is written in file ai.py.   ","categories": [],
"tags": ["algorithm","study-notes"],
"url": "https://ibugone.com/blog/2018/05/alpha-beta-pruning/",
"teaser":null},{
"title": "Minimal, Complete, Verifiable Example",
"excerpt":"How to create a Minimal, Complete, and Verifiable example   When asking a question about a problem caused by your code, you will get much better answers if you provide code people can use to reproduce the problem. That code should be…      …Minimal – Use as little code as possible that still produces the same problem   …Complete – Provide all parts needed to reproduce the problem   …Verifiable – Test the code you’re about to provide to make sure it reproduces the problem   Minimal   The more code there is to go through, the less likely people can find your problem. Streamline your example in one of two ways:      Restart from scratch. Create a new program, adding in only what is needed to see the problem.  This can be faster for vast systems where you think you already know the source of the problem. Also useful if you can’t post the original code publicly for legal or ethical reasons.   Divide and conquer. When you have a small amount of code, but the source of the problem is entirely unclear, start removing code a bit at a time until the problem disappears – then add the last part back.   Minimal and readable   Minimal does not mean terse – don’t sacrifice communication to brevity. Use consistent naming and indentation, and include comments if needed to explain portions of the code.  Most code editors have a shortcut for formatting code – find it, and use it! ~Also, don’t use tabs – they may look good in your editor, but they’ll just make a mess on Stack Overflow.~   Complete   Make sure all information necessary to reproduce the problem is included:      Some people might be prepared to load the parts up, and actually try them to test the answer they’re about to post.   The problem might not be in the part you suspect it is, but another part entirely.   If the problem requires some server-side code as well as an XML-based configuration file, include them both. If a web page problem requires HTML, some JavaScript and a stylesheet, include all three.   Verifiable   To help you solve your problem, others will need to verify that it exists:      Describe the problem. “It doesn’t work” is not a problem statement.  Tell us what the expected behavior should be.  Tell us what the exact wording of the error message is, and which line of code is producing it.  Put a brief summary of the problem in the title of your question.   Eliminate any issues that aren’t relevant to the problem. If your question isn’t about a compiler error, ensure that there are no compile-time errors. Use a program such as JSLint to validate interpreted languages. Validate any HTML or XML.   Ensure that the example actually reproduces the problem! If you inadvertently fixed the problem while composing the example but didn’t test it again, you’d want to know that before asking someone else to help.   It might help to shut the system down and restart it, or transport the example to a fresh machine to confirm it really does provide an example of the problem.   For more information on how to debug your program so you can create a minimal example, Eric Lippert has a fantastic blog post on the subject: How to debug small programs.   You may have been told to include an MCVE by some helpful commentary, or perhaps even an MVCE if they were rushed; sorry for the initialisms, this is what they were referring to.  ","categories": [],
"tags": ["stack-overflow"],
"url": "https://ibugone.com/blog/2018/06/minimal-complete-verifiable-example/",
"teaser":null},{
"title": "Pairing the new Xbox One S controller (2018) with Android",
"excerpt":"I just bought an Xbox One S controller yesterday, expecting it would pair with my Android phone via Bluetooth. I have learned that the key mapping would be a bit messed up because it’s a Microsoft product, and have already prepared for it by downloading a key layout file and placing it in my phone. However, it seems more stuff has changed since the tutorials found online were published.   Meeting the new controller      Configuring the new controller to play with Android   It is unarguably delighting that the new Xbox One S controller pairs with Android devices, but again, unfortunately, as reviews have shown, it doesn’t play well. While workarounds are easily available, those don’t work for me, probably because my controller is too new (manufactured in April 2018).   The supplied keylayout file looks like below:   key 304   BUTTON_A key 305   BUTTON_B key 306   BUTTON_X key 307   BUTTON_Y key 308   BUTTON_L1 key 309   BUTTON_R1 key 310   BACK key 311   BUTTON_START  key 139   HOME key 312   BUTTON_THUMBL key 313   BUTTON_THUMBR  # Left and right stick. axis 0x00 X flat 4096 axis 0x01 Y flat 4096 axis 0x03 Z flat 4096 axis 0x04 RZ flat 4096  # Triggers. axis 0x02 LTRIGGER axis 0x05 RTRIGGER  # Hat. axis 0x10 HAT_X axis 0x11 HAT_Y   Sadly, it has messed up on my phone. Button Y acts like button X, while button X doesn’t function at all.   This small issue shouldn’t be a problem for me, as has never been. With the help of Gamepad Tester applications, I worked out another keylayout file as following:   # XBox One S Controller (2018) key 304   BUTTON_A key 305   BUTTON_B key 307   BUTTON_X key 308   BUTTON_Y key 310   BUTTON_L1 key 311   BUTTON_R1 key 315   BUTTON_START  key 158   BUTTON_SELECT key 317   BUTTON_THUMBL key 318   BUTTON_THUMBR  # Left and right stick. axis 0x00 X axis 0x01 Y axis 0x0b Z axis 0x0e RZ  # Triggers. axis 0x17 LTRIGGER axis 0x17 BRAKE axis 0x16 RTRIGGER axis 0x16 THROTTLE  # Hat. axis 0x0f HAT_X axis 0x10 HAT_Y   If you’re encountering the same problem even after trying solutions found online, try mine. Replace the file content with my one, restart your device and connect the controller again. It should work then.   ","categories": [],
"tags": ["gaming"],
"url": "https://ibugone.com/blog/2018/06/new-xbox-one-s-controller/",
"teaser":null},{
"title": "Xi Jinping: Last Week Tonight with John Oliver (HBO)",
"excerpt":"I worked this out on my own, so it may contain mistakes.     China, the country responsible for huge technological advances, and yet, it still can’t seem to get pandas to fuck.   China is a gigantic and consequential country where roughly one out of every five people on earth live. It is also the place that Trump has been ranting about for years.      China is killing us.       What China’s doing to us is horrible.       China cheats, they devalue their currency.       We can’t continue to allow China to rape our country and that’s what they’re doing.    OK so Even in the context of a metaphor, the word rape is pretty jarring. As verbs go, it’s not exactly bandied about. It’s like if Trump said, “Congress is really toe fucking me on this border wall”, the underlying point is clear: what he chose to express it that way is not. And yet, for all that Trump talks about China, it seems that he’s very much in the process of learning about it. Just watch what happened when microphones picked up this exchange with China’s president during a state visit back in November.   [Video]   Well, if you’re worrying if Trump actually learned something there, rest assured, the only thing you took away from that conversation was that Egypt is older and therefore less fuckable than China. OK, great. Note to self: Don’t fuck Egypt. Too old. But the truth there is a lot of us are probably underinformed about China and that’s something that its leaders have historically been absolutely fine with. Deng Xiaoping famously had a “lay low” international strategy summed up by the same hide your strength and bide your time. But in recent years, there has been a significant shift regarding that because when China’s current leader Xi Jingping assumed the highest office in the land, he said this.      China needs to learn more about the world. The world also needs to learn more about China.    You know what he’s right. We probably should talk more about China. We should probably have talked more about it on this show, especially considering we’ve done roughly 4,000 different stories on New Zealand and multiple pieces on testicle receptacle from the 2005 Russell Crowe film Cinderella Man. So, so tonight, tonight, let’s talk about China, and let’s put America aside for most of this piece and talk instead about China on its own terms because it’s been going through seismic, social, economic and political changes which have happened head-spinningly quickly, and many of them center on its leader Xi Jinping who just recently tightened his grip on power.      The most dramatic political change in China in decades, a vote to scrap term limits for China’s president, the move clears the way for Xi Jinping to stay in power indefinitely and possibly for life.     Of nearly three thousand ballots, only two voted against the unprecedented move.    Three thousand to two, which means after that vote there were two members of Chinese Parliament thinking “Whoopsy! I really thought that would go the other way!” Maybe an edible arrangement will smooth things over with the man who’s now emperor for life. And that followed on the heels of what was arguably an even bigger change. The fact that last October Xi’s political doctrine known as Xi Jinping Thought was enshrined in the Party’s constitution and that may not sound like much to you, but it’s roughly the equivalent of Donald Trump making himself a founding father and including “Donald Trump thought” into the constitution which would mean that historians in the future would have to parse the meaning of      While Bette Midler is an extremely unattractive woman, I refuse to say that because I always insist on being politically correct.    And Xi’s consolidation of power has been aided by the fact that unlike many of his predecessors who tended to be dull bureaucrats, he’s gone out of his way to form a cult of personality about himself for a time state media called him Xi Dada or Uncle Xi, Both of which are objectively weird names for an adult to call another another adult, but fantastic names for a pair of hairless cats, “Xi Dada”, “Uncle Xi”, “Dinner’s ready!” You’re creepy weirdos! And Xi carefully presents a man-of-the-people image, his origin story is famous in China. Born into an elite family, his father fell from grace and like many during Mao’s Cultural Revolution, Xi was sent to work in a rural village, a place which has now become a tourist attract.      The smartly dressed tour guide shows us where Xi slept, an old picture on the wall. We see a well he helped dig, and a sewing shop he set up. Old farmers who knew Xi back then still roam about these pseudo mascots of this bizarre theme park.    Yeah, that is a bizarre theme park and I’ll say that knowing full well that this country’s most beloved theme park features vomit-inducing teacups and a massive pants-less sailor duck with no genitals. And Xi’s branding isn’t confined to tourist attractions. State media has also featured folksy moments like this video of him ordering pork buns at a Beijing restaurant. Now, that visit was huge news in China and that could be hard to believe because our politicians eat junk food in front of us all the time. You can find photos of 12 of the last 12 presidents shoving ice cream into their faces. It’s actually legitimately challenging to find a single photo of Obama where he is not about to inhale half a pint of vanilla. I didn’t even remember that he’d been demolishing a waffle cone during the Bin Laden raise, but clearly I’d remembered it wrong. I was wrong! But the reasons for Xi’s popularity go beyond marketing himself as a cuddly Xi Dada that you can grab a pork bun with is ‘cuz for starters he is riding an economic wave that long precedes him. Over the last 30 years, China’s GDP growth has averaged nearly 10 percent a year, making it the fastest sustained expansion by a major economy in history which has enabled more than 800 million people to lift themselves out of poverty, and many in China’s growing middle class are pretty content with how things have been going.      The tremendous public optimism is striking. Everyone is doing better than their parents did in their day.          I think we’ll be able to move to a bigger house within the next 5 years,  and I expect my life to improve a lot. Whatever happens, I’m very optimistic about the future.       Wow, a sense of optimism about the future. I’ve got a say as a British person “I just find that utterly incomprehensible.” If you look up optimism in the OED and this is true the definition simply reads “No.” So for many in China, things are going undeniably well. But Xi has even greater ambitions and I’d like to focus on two massive signature projects, one global and one domestic. First there’s his so-called Belt and Road initiative, a plan which is absolutely gigantic in scope, basically involves China spending a trillion dollars on infrastructure projects in more than 60 countries. Things like ports, bridges and roads, with the idea that it could eventually span international land and sea routes and reshape global trade with China at its center To hear China tell it, “It is the most ambitious infrastructure project in modern history”, they’ve even produced an English-language propaganda video to tell the whole world about it.   [Music]   OK, if I could just, If I could just interrupt this irritating Old Navy commercial hawking a trillion dollar infrastructure plan, I know, I know that you’re probably thinking right now: “If I have to listen to one more second of that, it’s going to be stuck in my head all week.” Well, just be thankful that you haven’t heard the rap break. Until now…   [Music]   OK, stop, stop stop stop stop, stop I can’t take it anymore, either. They basically made Kommunist Kars 4 Kids That is UN-FOR-GIV-ABLE!   Now, it is too early to say whether the Belt and Road is going to be a success, but Xi’s second bold project has already seen results because he’s undertaken a massive crackdown on political corruption, a long-standing grievance among Chinese citizens. It’s led to the investigation and punishment of hundreds of thousands of government officials, some at the very top of the Party. And this has been widely celebrated, with the state media even producing a crackdown themed computer game.      The People’s Daily, a Communist Party mouthpiece released a computer game where users can give electric shocks to corrupt officials.    Well that’s fun. What, what could possibly be sinister about being invited to electrocute prisoners in a government-issued game. That is the most entertaining way to package something disturbing since FDR smash-hit board game Candyland Just Kidding It’s a Japanese-American internment camp And this, this is where we reach the point of the story that your kind of new was coming because so far everything that I’ve shown you is what Xi Dada wants you to know about China. But there is a lot of troubling stuff under the surface, for instance conveniently for Xi some of those swept up in the corruption purge were his political rivals, and those accused were often funneled into a system that’s been described as a secretive extralegal process where interrogators seek to extract confessions, sometimes through torture. And it’s worth knowing that those term limits that he successfully eliminated were put in place for a pretty good reason specifically to avoid another Mao under whose regime some horrific things happened in China, from a collectivized farming attempt that was responsible for at least 45 million deaths, a Cultural Revolution that was estimated to have killed at least another million, to his belief that this swimsuit was flattering which I realize now that I say out loud really doesn’t belong with the other two in that list. The point, The point here is Xi is actively removing the post-Mao guardrails that were put in place and while China has never exactly been known as a haven for free expression, he has clamped down noticeably on any form of dissent whatsoever.      There is dissent online and China’s censors are working hard to quash it. They temporarily ban the use of phrases such as personality cult and my emperor, and also references to Winnie the Pooh, a character long used to mock Xi Jinping based on an apparent resemblance.    It’s true. It’s true. Apparently Xi Jinping is very sensitive about his perceived resemblance to Winnie the Pooh, and I’m not even sure it’s that strong a resemblance, to be honest. But the fact he’s annoyed about it means people will never stop bringing it up. Trust me, Xi. If your face even remotely resembles that of a beloved cartoon character, the smart move here is to lean in. And cramping down on Winnie the Pooh comparisons doesn’t exactly project strength. It suggests a weird insecurity in him and experts say that Xi is deeply concerned the public opinion will turn on him. China’s economy is already slowing and Xi’s reportedly haunted by the specters of the Arab Spring and the Soviet Union’s collapse. And that paranoia may be why he’s so anxious to micromanage Chinese daily life. The government has a list of untrustworthy people which can restrict citizens’ ability to travel, buy a house or take out loans. And over the next few years, there are plans to take things much farther.      Every Chinese citizen is being assigned a social credit score, a fluctuating rating based on a range of behaviors. It’s believed that community service in buying Chinese made products can raise your score. Fraud, tax evasion and smoking in non-smoking areas can drop it. If a score gets too low, a person can be banned from buying plane and train tickets, real estate, cars and even high-speed Internet.    Yeah, you could be cut off from a high-speed Internet, although that could actually be a huge opportunity for the finest purveyors of shitty low-speed Internet. I’m talking of course about AT&amp;T, one of America’s least popular corporations, and also, as of this week, our parent company. So goodbye everyone it’s been fun, I know it gets much much darker here. In fact Xi’s crackdown on human rights is apparently the most intense since Tiananmen Square and that is not good because Tiananmen Square is on the short list of places so infamous you don’t even need to describe what happened, like Chernobyl or Jonestown or that one Cheesecake Factory we can’t go to anymore. And Xi has intensified government suppression of certain religions in one province. Christians have been told to take down the image of Jesus and hang portraits of Xi instead, something I’ve also done by the way. So yeah, I think it really ties the room together, it’s a nice accent piece. And a Muslim population known as Uyghurs have been singled out for dystopian levels of surveillance and persecution. Here is one man talking about a form that the government had him fill out.      This piece of paper was sent to everyone. People had to fill it out. They asked things like if you are a Uyghur, if you have a job, if you have a passport, if you pray. All these answers were turned into a scoring system they would categorize people into safe, regular and unsafe people.    That’s pretty chilling ‘cuz generally speaking, whenever people are placed on lists it’s not really turned out well for anyone involved Many of history’s greatest monsters put people on lists. Nixon, the Nazis, Santa all of these animals did that. I looked sure enough, if you are deemed unsafe for whatever reason, you’re in big trouble, because China has incarcerated Muslims in reeducation camps with as many as 800,000 individuals in facilities which reportedly to rewire the political thinking of detainees, erase their Islamic beliefs and reshape their very identities, making Uncle Xi less like your fun uncle and more like your creepy uncle who imprisons 800,000 people in his basements. And if you want to see what it looks like when Xi Jinping Thought gets put into Xi Jingping Practice, just take the story of Nobel Peace Prize winner Liu Xiaobo. He was imprisoned in 2009 for writing a pro-democracy manifesto and last summer he died in state custody, and even China seemed concerned about how that might look.      Fearing domestic backlash, government censors went to work. Social media post mentioning Liu’s name were deleted, online searches with his name were blocked. Even simple candle emojis were deemed illegal on some sites. CNN signal in China has been cut by government censors every time we mention his name.    Exactly the Chinese media wouldn’t allow mentions of a Nobel Peace Prize winner’s name, which is a pretty intense level of censorship, but it’s also my personal policy towards Guatemalan activist, Rigoberta menchú. Do not bring her up around me. She knows what she did. You know what you did Rigoberta you know what you did. I don’t want to hear her name on your lips. That’s not what this meeting’s about, but the point is what happened to Liu Xiaobo and his wife who is still under house arrest is absolutely tragic, although to his credit, he didn’t go down without taking a final swing.      One of the last known photos of Liu was with his wife Lu Xia, at first glance unremarkable, but notice the mugs they’re holding. Yep, that’s Winnie the Pooh on there, perhaps a final subtle act of defiance.    Yeah, good for them. Good for them I think. I think deep down we all know when you need to really tell someone to go fuck themselves, why not do it with a mark, right? The whole point here is under Xi Jingping, China is becoming more authoritarian, just as it has major plans for expansion onto the world stage. So the era of Hide and Bide is over, and the era of Do As We Say may be dawning, because China has significant economic leverage and it has been using that to silence criticism even when criticism is very much warranted.      The European Union hardly squeaks about human rights anymore or certainly the British don’t. You don’t get much on Tibet either because whenever anyone raises any of these issues, China turns around and says, “Do you want to do business or not?”    Of course because China knows no matter how badly they behave, the world will still want to do business with them. They’re like Facebook, “Oh, I’m sorry, you don’t like us mining your data and undercutting your democracy.” What exactly are you fuckers gonna do about it? Mail people printed out photos of your meals you at, call your friends and tell them “happy birthday” and out loud words, I don’t think so go fuck yourself. And here is where having set America aside at the start, we should bring it back in because it is arguably more important than ever, that America be strategic and tactical about how to deal with China. Sadly those qualities are not hallmarks of this guy who couldn’t play chess for longer than 29 seconds without screaming “my horse eats your big lady” and pouring nacho cheese all over the board. Trump is blowing up the traditional alliances that have helped influence Chinese behavior on important issues, and that has been great news for Xi Jinping as has the fact that human rights don’t really seem to be a big Trump priority. In fact just hours after the death of Liu Xiaobo, even has it as his administration issued condolences, Trump himself said this:      President Xi is a terrific guy. I like being with him a lot and he’s a very special person.    Wow! That was not the best time to give Xi Jinping a pat on the back. It’s the equivalent of saying “How much you love Kevin Spacey in American Beauty” right now. First you shouldn’t, it was objectively terrible and second you’re picking the worst possible time to bring that up. The point is Trump is leaving a vacuum on the world stage and China is more than happy to fill it by telling the world its story and leaving out some very important details. So for everyone’s benefit if they’re going to send out cuddly propaganda videos about Xi Jinping’s achievements, someone might want to make a companion piece, the kind of rounds out the picture.   [Music] [Applause]  ","categories": [],
"tags": ["miscellaneous"],
"url": "https://ibugone.com/blog/2018/06/transcript-for-last-week-tonight-s05-e15/",
"teaser":null},{
"title": "How to crack IObit Advanced SystemCare 11.5",
"excerpt":" Advanced SystemCare offers Full Optimization &amp; Protection for Cleaner, Faster and More Secured PC.      It’s latest release, version 11.5.0.239, has just come out. Registering this version for free, however, is a bit different than registering its predecessors. Let’s see how we can Register Advanced SystemCare 11.5 for free!     Preparation   You need an older version of Advanced SystemCare 11 for this method to work. I recommend version 11.0.3.169 because it’s known to be working.    Download Advanced SystemCare 11.0.3.169    Download the old version and install it. After installation, copy out this file from your system and save it. Note the file is at different locations between 32-bit and 64-bit systems.   32-bit system: C:\\Program Files\\IObit\\Advanced SystemCare\\Register.exe 64-bit system: C:\\Program Files (x86)\\IObit\\Advanced SystemCare\\Register.exe   Next, install Advanced SystemCare 11.5. After installation, replace the file Register.exe with the one you copied out from the old version.   Open Advanced SystemCare 11.5, click the three lines on the top-left corner and click Settings. Select AutoUpdate and enter proxy settings as follows.      Now return to the main screen and click Enter Code on the bottom-right corner. Go find any license code online and enter it into the box. Click Register Now and you’ll see this popup:      Don’t worry, you’ve already succeeded! Close the registration window and see if you have Advanced SystemCare 11.5 Pro now. Voilà!     If you find this article useful, don’t forget to share it! The permalink to this article is https://ibugone.com/p/11.   ","categories": [],
"tags": ["software"],
"url": "https://ibugone.com/blog/2018/08/crack-advanced-systemcare-11-5/",
"teaser":null},{
"title": "Batch convert PowerPoint slideshow to PDF",
"excerpt":"The TL:DR line: If you want my script, you can get it here.   This semester my Physics teacher released all his PowerPoint slideshows at the start of the semester. To make reading easier, I decided to convert all of them into 6-slide handouts and print them. Fortunately, PowerPoint offers this functionality with the “Save as PDF” option, which could very well mean that I should open the 30+ files one-by-one and doing a “Save As” action on each one. How painful!   That’s apparently not an amateur programmer’s flavor, so I decided to automate this process. I can write a script that will do all the repeated job for me. Luckily, I wrote another script that converts .ppt to .pptx in batch. It’s a good news that I can take this script directly, make minimal modification and put it into use.   So it begins. First I need to know how to save slideshow as PDF with VBA. Going Googling, this is the first result that comes to me. Quickly scanning through the post, I decided that this is the line of code that I want:   ActivePresentation.ExportAsFixedFormat CurrentFolder &amp; FileName &amp; \".pdf\", _   ppFixedFormatTypePDF, ppFixedFormatIntentPrint, msoCTrue, ppPrintHandoutHorizontalFirst, _   ppPrintOutputSlides, msoFalse, , ppPrintAll, , False, False, False, False, False   Very good! I copied it, replaced the constants from what I found on Microsoft Office Documentation (VBScript doesn’t have them), and gave the script a try.   Well, no. It didn’t work and exited with an error dialog.   I spent 3 hours debugging and couldn’t find out what’s wrong. Good documentations, Microsoft! I went on for another hour searching Google for a solution, only to find out that ExportAsFixedFormat does not accept empty parameters.   I then fixed the issue and the script finally worked, converting all the given PowerPoint slideshows into PDF in the desired format and layout (6/page handout).   You can find the final script here.   ","categories": [],
"tags": ["development","microsoft-office"],
"url": "https://ibugone.com/blog/2018/09/batch-convert-with-vbs/",
"teaser":null},{
"title": "Programming the On-Board SPI Flash of Digilent Nexys4 DDR",
"excerpt":"This semester I have the course “Experiments of Digital Circuits”, the content of which is designing digital circuits using Vivado software, and writing Verilog code. Most of the lab papers require generating bitstream for the project and downloading it to Nexys4 DDR board to verify the functionality. Most of the times we just sit in front of the computer, with the board plugged in, and downloading the bitstream.   The downloaded bitstream is volatile, so whenever the board loses its power, or the “PROG” button is pressed, the program is lost and instead, the out-of-box demo program is loaded from the SPI flash.   Here is Digilent’s tutorial about how to program the SPI flash (i.e. replacing the OOB demo program).    ","categories": [],
"tags": ["development","study-notes"],
"url": "https://ibugone.com/blog/2018/11/program-nexys4-ddr-with-storage/",
"teaser":null},{
"title": "Access your Raspberry Pi remotely with SSH",
"excerpt":"Do you have a personal server at home but can’t access it from work or travel because your home doesn’t have a public IP? If so, then, this article is what you’re looking for.   In my case, I have a Raspberry Pi at my home, and I need some remote SSH from outside. And here’s how I made it work.   Prerequisites   The server hardware, and a VPS with a public IP (for forwarding)   Server setup   The software I use is frp (fast reverse proxy). It’s written in Go and is designed specifically for port forwarding.   To setup the server, grab a release. I use 0.17.0 but you can always prefer the latest release.   cd wget https://github.com/fatedier/frp/releases/download/v0.17.0/frp_0.17.0_linux_amd64.tar.gz tar zxvf frp_0.17.0_linux_amd64.tar.gz mv frp_0.17.0_linux_amd64 frp cd frp   Now open the configuration file frps.ini with your favorite editor, Vim or Emacs, and put the following content in:   [common] bind_port = 7000 privilege_token = your_token  dashboard_port = 8080 dashboard_user = admin dashboard_pwd = password   In fact, you only need the top two configuration items, bind_port and privilege_token. There’s a frps_full.ini in the package if you want to dig deeper, but I’ll keep things simple here.      bind_port: The port for frps (FRP Server) to listen for clients.   privilege_token: A token for clients to authenticate. Think it as the password of your Wi-Fi AP.   The following three items together provide a web dashboard for you to monitor status. They’re completely optional and you can leave them out if you don’t need the dashboard, or set it to whatever value you find convenient for you. Their names should be self-explanatory.   Now, start the server:   ./frps -c ./frps.ini   If you see logs in your terminal output, then you’re good to go!   In most cases, it’d be convenient for the server software to start as a daemon, and automatically start at boot. The way I chose is creating a systemd system service, so it’s possible to use commands like service frps start to manage it.   Create the file /etc/systemd/system/frps.service with the following content:   [Unit] Description=FRP Server After=network.target StartLimitIntervalSec=0  [Service] Type=simple Restart=always RestartSec=1 User=ubuntu ExecStart=/home/ubuntu/frp/frps -c /home/ubuntu/frp/frps.ini  [Install] WantedBy=multi-user.target   Take note of Line 10 and Line 11. You need to set the user to your username and change the paths as your setup goes.   After creating the service registry file, you can start the FRP server with service frps start and check its status with service frps status.   For insurance, I added service frps start to /etc/rc.local so it will start at boot.   Now the server side is fully set up and ready to use.   Client setup   Setting up the client machine is pretty much symmetric to setting up the server and the procedure isn’t much different.   My client machine is a $35 Raspberry Pi running Raspbian, so I picked the ARM version of prebuilt binary.   cd wget https://github.com/fatedier/frp/releases/download/v0.17.0/frp_0.17.0_linux_arm.tar.gz tar zxvf frp_0.17.0_linux_arm.tar.gz mv frp_0.17.0_linux_arm frp cd frp   This time, open frpc.ini with your favorite editor, and put the following content in:   [common] server_addr = &lt;your server ip&gt; server_port = 7000 privilege_token = your_token login_fail_exit = true  [ssh] type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = 8022   Put the IP address of your server in server_addr, and your privilege token in the configuration file, then it’s set. You may need to change remote_port to another value if 8022 is occupied by another program on your server.   Similar to the server software, I created another systemd service for the client software. Here’s what I have in my /etc/systemd/system/frpc.service:   [Unit] Description=FRP Client After=network.target StartLimitIntervalSec=0  [Service] Type=simple Restart=always RestartSec=1 User=pi ExecStart=/home/pi/frp/frpc -c /home/pi/frp/frpc.ini  [Install] WantedBy=multi-user.target   That’s pretty much identical to the server service, no?   The last thing is to put service frpc start in an appropriate place in /etc/rc.local so the FRP client starts at boot.   Now that both sides are set, let’s try it out.   Running SSH remotely   You can SSH into your Raspberry Pi as usual, just remember to change the host name to your VPS, and specify the port as set during client setup.   ssh pi@&lt;your server ip&gt; -p 8022   See the shell popping up from your RPi? Congratulations! You’re good to go.   For convenience, you can add the remote SSH configuration to your local SSH config file ~/.ssh/config, so you can access with ease in the future.   Host pi-remote   HostName &lt;your server ip&gt;   Port 8022   User pi   PubKeyAuthentication yes   PasswordAuthentication yes   IdentityFile ~/.ssh/id_rsa   And then, you can SSH into your Raspberry Pi remotely with ssh pi-remote, and let SSH handle the rest.   ","categories": [],
"tags": ["linux","networking"],
"url": "https://ibugone.com/blog/2019/02/ssh-into-lan-computer/",
"teaser":null},{
"title": "Setting up Ubuntu in VMware Workstation",
"excerpt":"A quick step-by-step guide for those wanting to get in touch with Ubuntu in a virtual machine with minimal effort. For example, at the start of a semester of Operating System Concepts course.   There’s a Chinese version of this article!      0. Preparation   Since we’re going to install a Linux distro with a desktop environment, 2 GB of guest memory is recommended, and as a consequence, you would want to ensure that your host machine has 6 GB or more RAM. If your machine doesn’t have that much RAM, you can try setting up a Ubuntu Server VM, which can require as little as 512 MB of guest memory to run.   Download VMware Workstation for Windows or Linux, or download VMware Fusion for macOS. You’ll need a key to license your VMware software (hint: try Google for it and you’ll find a lot).   Get the latest Ubuntu LTS image from ubuntu.com, or from a mirror site at your option. If you go to a mirror site, make sure you’re downloading the file ubuntu-{version}-desktop-amd64.iso, where {version} is the version number, e.g. 18.04.   1. Setting up VMware Workstation (Windows)   Open your downloaded VMware Workstation installer (in .exe format). You need Administrator privileges to continue      Continue with Next and select an option to continue. For most people, you can safely proceed with Typical. Follow the guide to finish installation of VMware Workstation.   Reboot your Windows machine after installing VMware Workstation – some components need a reboot before working properly.   You should now see a shortcut on your desktop like this:      Double-click on it, accept the End User License Agreement (EULA) and enter your license key when it’s asked for.   If you see this screen, it means you’ve successfully installed VMware Workstation on your machine.      2. Creating a Virtual Machine for Ubuntu   As shown in the image above, there are three big buttons on the home page. Isn’t the first one tempting to click? Yes, just go for it, and you’ll be presented with this «New Virtual Machine Wizard»:      Again for most people, Typical (recommended) is as labelled – the recommended option.   In the next screen, select Installer disc image file (iso) and locate the Ubuntu image (in .iso format) you downloaded earlier. VMware Workstation should detect that it’s Ubuntu and inform you that it will use Easy Install for the operating system.      After clicking Next, you can enter the name of the virtual machine in Full name field, and give your favorite username and an easy-to-memorize password. Here I use vmware for all fields, including passwords, as a weak password in an isolated virtual machine won’t impose a big security issue.      In the next screen, give your virtual machine a name, and specify a storage location. For most people, you may want to move the location out of C:\\ for performance concerns (or, locate it inside your home directory if you’re on Linux; for Mac users, the default location is fine). In the image shown below, I put it in drive D on my machine, and just named it Ubuntu 18.04.      Then, create a virtual disk for the virtual machine. Despite what VMware suggests, 16 GB should be enough for most people on their first contact with Ubuntu. I went for 8 GB – I’m confident that’s enough for me. Select Store virtual disk as a single file for better performance. Trust your disk drive and the filesystem’s ability in handling large files this time.      That’s all options you need to specify. Check the summary and click Finish. You can also customize the hardware specifications if you want, for example, delete the printer and the sound card if you don’t want them, or increase the RAM and # of CPU cores if your machine is beefy and has spare resources.         After closing the prompt, the virtual machine should power up automatically, provided you didn’t uncheck the last tick in the prompt. Here’s what it looks like when it first powers up.      Then, as told before, installation of the Ubuntu OS inside the virtual machine should begin automatically with VMware’s Easy Install feature. You can see the setup screen of Ubuntu like this:      Shortly afterwards, it should reboot automatically. The first boot may be a bit slower than you may expect, as there are additional things to be set up then. Soon you’ll be presented with the login screen of Ubuntu, and enter your password to see the desktop.         On the first start, you’ll see What’s new in Ubuntu. For the sake of curiosity, you can skim it through. Nothing quite important here.      If you need to open a terminal for shell commanding, just hit Ctrl + Alt + T.      ","categories": [],
"tags": ["software","linux"],
"url": "https://ibugone.com/blog/2019/02/setup-ubuntu-in-vmware/",
"teaser":null},{
"title": "在 VMware Workstation 中安装 Ubuntu",
"excerpt":"There’s an English version of this article!   零基础快速上手虚拟机安装 Ubuntu，特别是在《操作系统原理与设计》开课的时候 #(滑稽)。      0. 准备工作   由于本文教程安装的是带有桌面环境的 Linux 发行版，因此推荐为客户机（虚拟机）分配至少 2 GB 的内存，以保证流畅运行。由此，主机配置内存应有 6 GB 或更多。如果你的机器没有那么多内存，可以考虑安装 Ubuntu 服务器的虚拟机，实测这样的虚拟机可以在 512 MB 的内存下运行。   下载 VMware Workstation 的 Windows 或 Linux 版本，或者下载 VMware Fusion 的 macOS 版本。你需要一个产品密钥来激活 VMware Workstation Pro 或者 VMware Fusion （Google 一下一大把）。   从 ubuntu.com 获取最新的 Ubuntu 桌面版，或者从你喜欢的镜像站下载（例如科大镜像站）。 从镜像站下载的时候注意文件名应该是 ubuntu-{版本}-desktop-amd64.iso，其中 {版本} 是 Ubuntu 版本号，例如 18.04。   由于作者只有运行 Windows 的电脑，因此 macOS 下安装 VMware Fusion 及 VirtualBox 的教程委托朋友编写，你可以点击这里阅读。   1. 在 Windows 下安装 VMware Workstation   打开下载好的 VMware Workstation 安装包（需要管理员权限）      点击 [下一步] 继续，选择一种安装方式。对于大部分人来说，选择典型就可以了。按照提示完成 VMware Workstation 的安装。安装完成后需要重启电脑，以确保所有组件都能正常工作。   重启后你应该能在桌面和开始菜单看到这样一个图标：      双击打开 VMware Workstation，接受用户协议 (EULA) 并按提示输入密钥。如果你看到下面的窗口，说明你已经成功安装 VMware Workstation。      2. 安装 Ubuntu 桌面版的虚拟机   如上图所示，主页有三个大按钮。你可能已经发现了，第一个就是”创建新虚拟机“。点一下，然后就可以看到”创建新虚拟机向导“，如图：      同样，对于大部分人来说，典型（推荐）就像它写的那样——是推荐的选项。   在下一页，选择安装光盘镜像并选择刚刚下载的 Ubuntu 系统镜像（格式是 ISO）。VMware Workstation 应该检测到 Ubuntu 安装盘并提示你将使用“简易安装”来安装操作系统。      点击 [下一步] 之后，你可以指定虚拟机的主机名（系统内部的“本机名称”，用于网络连接等），以及用户名和密码。由于虚拟机是一个独立的环境，而且只为你所用，因此弱密码不会带来什么安全问题（例如，图中所有空填的都是 vmware，包括密码）。      在下一页中，你可以给这个虚拟机起个名字（这个名字将显示在菜单中），并指定一个存储位置。对大多数人来说，出于多种考虑，存储在 C 盘里不是一个期望的选择。在 Linux 或者 macOS 中，你可以将虚拟机放在你的 $HOME 中。如图所示，我给虚拟机起名就叫 Ubuntu 18.04，并将它放在 D 盘里。      接下来，为虚拟机创建一个虚拟磁盘。忽略 VMware 的建议值，16 GB 已经足够大多数初次接触 Ubuntu 的人使用了。本示例中我指定了 8 GB（这个容量对于示例来说足够了）。选择将虚拟磁盘作为单个文件存储以获得较高性能——相信你的磁盘应对大文件的能力。      好了，以上就是你需要指定的设置选项了。检查一下并确认虚拟机的硬件配置。你可以在这里自定义虚拟机的硬件配置，比如，删掉打印机和声卡，或者增加一些处理器核心和内存（如果你的主机有足够多的资源）。         关闭向导后，开启虚拟机。初次开机的界面如图：      就像之前所说，虚拟机中安装 Ubuntu 的过程是由 VMware 的简易安装功能全自动完成的。你可以看到 Ubuntu 的安装界面，如下所示：      取决于主机配置（尤其是硬盘速度），虚拟机将很快重启，新系统的第一次开机通常会比较慢。稍等片刻，你就能看到 Ubuntu 的登录界面。输入密码后，就可以看到 Ubuntu 的桌面。         进入桌面后，Ubuntu 的新特性会弹出来。你可以简单看一下，这里没有特别重要的信息。      按 Ctrl + Alt + T 可以打开 Ubuntu 自带的终端模拟器。      最后，为了快速配置 Ubuntu 的生产力，我写了一个快速配置脚本，你可以用以下命令使用它：   wget -qO setup.sh https://raw.githubusercontent.com/iBug/shGadgets/master/quick-setup.sh &amp;&amp; bash setup.sh   由于该脚本使用了 sudo，因此过程中会提示你输入密码。另外，如果你有 GitHub 用户名，脚本也会询问，并为你配置好 Git 的设置。   ","categories": [],
"tags": ["software","linux"],
"url": "https://ibugone.com/blog/2019/02/setup-ubuntu-in-vmware-cn/",
"teaser":null},{
"title": "Bootstrapping Make",
"excerpt":"Have C or C++ project to build? You may think, “Yeah this is very easy, I’ll just call the compiler to do so”, and yes, let’s take a look at an example.   1. Building a single C / C++ source file   If you have a bare minimum knowledge of calling a compiler from the command line, you would come up with such a command:   gcc -o hello hello.c   Yup, it’s that simple, for a single-file project. What if there are two sources to be compiled together?   gcc -c -o hello.o hello.c gcc -c -o main.o main.c gcc -o hello hello.o main.o   If you still think it’s easy, let’s look at a slightly larger project with tens of sources and multiple output binaries:   gcc -c -o events.o events.c gcc -c -o display.o display.c ... ... gcc -c -o man.o main.c gcc -c -o pager events.o display.o ... gcc -c -o pager-config config.o ...   And that’s when problems se lèvent. As you may have probably noticed, the last two commands have a wrong command argument -c, and the third-to-last command has a typo. These kinds of small mostakes are very likely to happen during busily scrolling over command histories and changing the arguments, which is essentially repetitive work that’s not for human.   As demonstrated above, manually typing the build commands might be feasible with projects with only one or two files, but you’ll soon get tired typing them over and over again and start making mistakes if there are more files to be compiled and linked.   2. Basic build automation - shell scripts   You may feel that a script would be a better option and may come up with this:   #!/bin/sh  set -ex  build_obj() {   gcc -c -o \"$1\".o \"$1\".c }  link_bin() {   OUT=\"$1\"   shift   gcc -o \"$OUT\" \"$@\" }  build_obj events build_obj display ... build_obj main link_bin pager events.o display.o ... main.o   The above script, despite being plain and simple, is at least better than manually typing all the commands. But there are still issues with it.   Now you want to add a manpage and installation functionalities, and write them to the script:   ...  build_manpage install_manpage   That’s a good move to add support for building manpage, but there’s a serious caveat: there’s probably no need to build the manpage and install it every time this build script is run, as well as everything else unchanged.   So, while it indeed is a better option than typing commands manually, it’s still a bit distant from optimal. Here’s when Make has its power.   3. Build automation with Make   Make is a software designed specifically for build automation. It follows a predefined build guideline, a Makefile, and builds your project. What’s more, Make offers more than simple build automation, like checking for changed files and only re-builds the changed files, eliminating redundant work spent on those unchanged files.   The first thing to using Make is knowing how to write a Makefile. Here’s a basic Makefile for a single-file project:   hello: \tgcc -o hello hello.c   And the command you’ll run is just make. It will read your Makefile and compile hello.c into hello for you.   If you run make again immediately, it won’t compile hello.c again, but tells you instead:   make: Nothing to be done for 'all'.   You can see that Make avoids redundant work by checking for up-to-date files and skipping them.   An instruction to build a file is called a target in Makefile. In the above example, hello is a target and is the default target in the Makefile. Of course, you can have multiple targets in one Makefile:   hello: \tgcc -o hello hello.c  hello_debug: \tgcc -g -o hello_debug hello.c   And when you run make, the first target in the Makefile is the default target. You can specify a target that you want Make to build by specifying it on the command line:   make hello_debug   Without Make or some other kind of build automation tool, resolving and carefully managing the dependency relationships among source files and intermediate files are a pain. With Make, it does this job for you.   A common type of dependency is linking object files into multiple output binaries. Here’s an example that shows how Make manages dependencies:   .PHONY: all  all: hello world  hello: library.o hello.o \tgcc -o $@ $^  world: library.o world.o \tgcc -o $@ $^  %.o: %.c \tgcc -O3 -Wall -c -o $@ $^   In the above example, both output programs hello and world depends on library.o. When you run make, you’ll see Make compiles library.o first, and only once, and uses it to link both binaries. The variables $@ and $^ are called Automatic Variables. Make is also capable of resolving complex dependencies, as long as they don’t form a loop. The .PHONY target is a Phony target, which will be built regardless of the existence of a file with the very name. That says, if you don’t write .PHONY: all and have an up-to-date file named all in your directory, Make won’t build the all target again.   Make also supports variables so you don’t have to write the same commands or arguments repeatedly. For example, the above makefile can be rewritten as follows:   CFLAGS = -O3 -Wall  .PHONY: all  all: hello world  hello: library.o hello.o \t${CC} -o $@ $^  world: library.o world.o \t${CC} -o $@ $^  %.o: %.c \t${CC} ${CFLAGS} -c -o $@ $^   ${CC} is an automatic variable provided by Make and defaults to cc. You can use another compiler by overriding this variable when invoking make:   make CC=clang   Here, CC is overridden with value clang, and all ${CC} in the Makefile is substituted with clang, effectively calling the Clang compiler to compile the project. There are various ways of assigning variables, such as =, :=, ?= and +=, all of which have different effects and usages.   You can find out more about Make by running man make on your system, or by referring to the GNU make Manual on GNU’s website.   ","categories": [],
"tags": ["software","development","study-notes"],
"url": "https://ibugone.com/blog/2019/02/bootstrapping-make/",
"teaser":null},{
"title": "Filter Manually Installed Packages from APT with AWK",
"excerpt":"It’s again when I want to find out what packages I have manually installed (or by a script) from the output of apt list, with all output on one line.   It’s a pretty easy task if you’re familiar with Unix command utilities for text manipulation, and you may probably have come up with this solution:   apt list | grep -F '[installed]' | cut -d/ -f1 | tr '\\n' ' ' echo   The last echo is there because the output from tr doesn’t contain a newline at end, which would make your terminal look ugly. It’s also not well-Unix-styled because all output should end with a newline.   I was in the middle of the desire to learn AWK when I faced this task, so I did some search and wrote this AWK script:   #!/usr/bin/awk -f BEGIN {   FS = \"/\"   ORS = \" \" } /[installed]/ {   print $1 } END {   ORS = \"\\n\"   print \"\" }   Save this file as whatever name you like, apply 755 permissions and run apt list | some.awk, and watch the magic go.   How’s it done?   For those absolutely new to AWK, this is a good example to start with.   The first thing is blocks. Each block begins with a “match condition” that means the block will be executed when the condition matches. A condition can be a statement (like $1 == \"abcd\" or NR % 2 == 0), a regular expression (like the example abov) or a special pattern (BEGIN and END).   If the condition is a statement, it is evaluated and tested for truthness. If it’s a regular expression, it’s matched against the whole record. Special patterns are intuitive: before processing the first record (BEGIN) or after processing every record (END).   The second thing is statements. In the example, there are only two kinds of statements: print and variable assignments. print is plain (so far) and it prints whatever’s after it. Here $1 means the first field of the record.   The two assigned variables are special. FS stands for Field Separator and it’s set to a slash, so the first field is everything before the first slash. ORS stands for Output Record Separator, and it’s what print adds at the end of each print statement, much like the keyword variable end in Python 3’s print() function.   More complex statements like conditions, loops and arithmetics are also possible, but I’m avoiding them here because they don’t appear in this script.   Finally, it comes to the execution of the script. By default, awk takes the first non-option command-line argument as the AWK program to execute. To specify that the program is written in a file, you need the -f option, whence the shebang line.   ","categories": [],
"tags": ["study-notes"],
"url": "https://ibugone.com/blog/2019/03/first-touch-with-awk/",
"teaser":null},{
"title": "Build a minimal Linux system and run it in QEMU",
"excerpt":"Linux is the #1 open-source operating system nowadays, and many people are running a Linux distro, such as Ubuntu or Arch. Linux is also the most popular choice for a server OS.   Building Linux from scratch is a good way to learn how it works, and is also a good practice for whoever wanting to learn about how operating systems work. And for me, the task of the first experiment of the course Operating System Concepts.   Environment setup   The lab task is to build Linux 2.6.26 and run it in QEMU. For the most convenient setup, I recommend the 32-bit versions of Ubuntu 14.04 “trusty” or Debian 7 “wheezy”. If you prefer another Linux distro, make sure it comes with glibc of a version no newer than 2.19. This is because glibc 2.20 requires Linux kernel 2.6.32, which supercedes our target version.   There’s no need to install the base system physically if you don’t have one yet, as a virtual machine will work perfectly well, and you can enjoy your Windows or Mac applications while the VM is running.   Before we start this experiment, we need to have proper tools installed. On Ubuntu 14.04 or Debian 7, the following command will install all we need for this lab:   sudo apt-get install build-essential libncurses5-dev qemu      The build-essential package, as suggested by its name, contains essential tools for building, such as binutils, C compiler and library, and automation tools like Make.   The libncurses5-dev package provides header files for the New Curses library, which is used to display beautiful user interface in a text terminal. Many good-looking terminal programs use it, such as Vim or Emacs.   QEMU is what we’ll be booting our Linux with - of course it’s needed   Building the Linux system   Now we’re ready to build our own Linux. The first thing is the kernel.   Compiling the kernel   Download and extract the source code:   wget https://mirrors.edge.kernel.org/pub/linux/kernel/v2.6/linux-2.6.26.tar.gz tar zxvf linux-2.6.26.tar.gz   Next, generate the default configuration and build against that:   cd linux-2.6.26 make i386_defconfig make   You’ll likely encounter a few errors during the building process. Here are the fixes to two most common errors people encounter:   The first one you’ll meet should look like this:   gcc: error: elf_x86_64: No such file or directory make[1]: *** [arch/x86/vdso/vdso.so.dbg] Error 1 make: *** [arch/x86/vdso] Error 2   To fix this, open arch/x86/vdso/Makefile in a text editor, such as Vim or gedit. Replace -m elf_x86_64 with -m64 and -m elf_i386 with -m32. Save the changes.   The second one would be like this:   undefined reference to `__mutex_lock_slowpath' undefined reference to `__mutex_unlock_slowpath'   To fix this, open kernel/mutex.c and look for the above two functions. You’ll see them written like these:   static void noinline __sched __mutex_lock_slowpath(atomic_t *lock_count);  static noinline void __sched __mutex_unlock_slowpath(atomic_t *lock_count);   Insert __used after the keyword static in both cases, so they should end up looking like these:`   static __used void noinline __sched __mutex_lock_slowpath(atomic_t *lock_count);  static __used noinline void __sched __mutex_unlock_slowpath(atomic_t *lock_count);   For most people, fixing the above two things should enable the build process to complete without interrupts.   That’s the kernel. Before we can boot it up, we need an initial filesystem, with some critical files for the system to be able to boot up.   Here two options are presented. Although only one is necessary, I still recommend trying out both - for a better understanding how Linux works.   Preparing the root filesystem - Option 1: Handcraft init   With the first option, we will be creating a minimal program to serve as the “startup program”.   Open your favorite text editor and write the following C program:   #include &lt;stdio.h&gt; #include &lt;unistd.h&gt;  int main() {     while (1) {         printf(\"Hello\\n\");         sleep(1);     } }   Save it as test.c, and run the following command to compile it:   gcc -static -o init test.c   Now you have the init program. You need to prepare the filesystem. The following commands will create an empty 4 MB image and mount it at rootfs.   dd if=/dev/zero of=myinitrd.img bs=4M count=1 mkfs.ext3 myinitrd.img mkdir rootfs sudo mount -o loop myinitrd.img rootfs   Next, copy your init program into it, and create some device files as required:   cp init rootfs/ cd rootfs mkdir dev sudo mknod dev/ram b 1 0 sudo mknod dev/console c 5 1 cd .. umount rootfs   After having the linux kernel and the root filesystem ready, you can try booting it in QEMU:   qemu-system-i386 -kernel linux-2.6.26/arch/x86/boot/bzImage -initrd myinitrd.img --append \"root=/dev/ram init=/init\"   You’ll see QEMU launching in a new window, with a lot of messages followed by the output of your init program, like this:      Preparing the root filesystem - Option 2: BusyBox   The first option is just a minimal example of what a root filesystem should contain. It is, however, not quite function-rich.   With BusyBox that packs many common Unix &amp; Linux utilities into one single binary, you’ll be able to create a mostly functional, yet still minimal Linux system.   Busybox is available as source code so whoever need it can compile it themselves. Download the source code and configure it:   wget https://busybox.net/downloads/busybox-1.30.1.tar.bz2 tar jxvf busybox-1.30.1.tar.bz2 cd busybox-1.30.1   You need to configure some build options so it best suits this lab. Run make defconfig then make menuconfig to start. You’ll need to change at least four options as shown below. The first option is switched on and off with the space bar, and the second and the third one requires you to enter the string manually. Finally, the last one is a multiple choice. You should put the X on the desired option.   Settings –&gt;     Build Options         [*] Build static binary（no share libs）  Settings –&gt;     (-m32 -march=i386) Additional CFLAGS     (-m32) Additional LDFLAGS  Settings –&gt;     What kind of applet links to install –&gt;         (X) as soft-links   With the build properly configured, now you can run make then make install to build BusyBox and deploy your build. Installed files will appear under _install directory inside busybox-1.30.1.   To be able to use the _install directory as a bootable root filesystem, you should create the special files identical to what’s there in Option 1.   mkdir -p dev sudo mknod dev/console c 5 1 sudo mknod dev/ram b 1 0   Next, you need a init program. This time we want to go the easy way with BusyBox, instead of writing a dummy one in C. Open your favorite text editor and type the following content:   #!/bin/sh echo \"### INIT SCRIPT ###\" mkdir /proc /sys /tmp mount -t proc none /proc mount -t sysfs none /sys mount -t tmpfs none /tmp echo -e \"\\nThis boot took $(cut -d' ' -f1 /proc/uptime) seconds\\n\" exec /bin/sh   Save it with the name init under the directory _install. Run chmod a+x init so it becomes executable.   Now pack everything up as a ramdisk image. Make sure you’re inside _install directory before running the following command:   find -print0 | cpio -0oH newc | gzip -9 &gt; ~/initramfs.cpio.gz   There should be a new file initramfs.cpio.gz in your home directory. You can now run QEMU with this new package:   qemu-system-i386 -kernel linux-2.6.26/arch/x86/boot/bzImage -initrd ~/initramfs.cpio.gz --append \"root=/dev/ram init=/init\"   Make sure the path to the Linux kernel is correct. Your path will likely vary depending on your procedure. You can always run find ~ -name bzImage to see where it’s located.   If everything’s going right, you’ll see the following screen in QEMU:      Congratulations! You’ve built your own Linux-from-Scratch and booted it in QEMU.   There’s a second part of the original Lab 1 of Operating System Concepts, which I will describe in a later article (or more likely, skipped :)).   ","categories": [],
"tags": ["study-notes","linux"],
"url": "https://ibugone.com/blog/2019/04/os-lab-1/",
"teaser":null},{
"title": "Wolfram Mathematica 12 Key Generator",
"excerpt":"Supports Wolfram Mathematica 12.0   Input your MathID (xxxx-xxxxx-xxxxx) and press Generate.      Generate   Press Generate!     ","categories": [],
"tags": ["keygen"],
"url": "https://ibugone.com/blog/2019/05/mathematica-keygen/",
"teaser":null},{
"title": "How I saved a lost commit from GitHub",
"excerpt":"Earlier today I force-pushed to my repository USTC-RV-Chisel for testing purposes, without noticing that my local ref origin/master is 1 commit behind the actual master on GitHub. My friend pushed his work (1 commit) to it, and now it’s lost.   Fortunately, I haven’t closed my terminal yet, so there’s at least some place to look at:      From the terminal log, I knew that the SHA of the lost commit begins with b3c3b36, so it appeared very intuitive for me to just try fetching the commit, but no luck:      I recalled that GitHub can show commits with only first 7 digits of its SHA, so I constructed the URL https://github.com/iBug/USTC-RV-Chisel/commit/b3c3b36 and followed it:      Now trying it again with the full SHA that’s easily retrieved from the web page:      Hello? Does GitHub allow this? Oh-no!   I Googled around for a few minutes, and concluded that GitHub doesn’t allow fetching this commit, because it’s unadvertised.   Thinking around for ideas, I decided to give it a try to rebuild the commit.   First, I prepare my working directory with   git add -A git stash git reset --hard ee216e3  # This is the parent commit of the lost commit   Then, I need the full content of the tree of the commit.   While GitHub offers ZIP archive download at the tree page https://github.com/iBug/USTC-RV-Chisel/tree/b3c3b36, ZIP isn’t good for this job - it doesn’t preserve POSIX file modes, so I looked around for the TAR archive (tarball). It wasn’t on the page.   Thinking around again, I recalled working with the GitHub API, and there’s an endpoint to get a tarball. It wasn’t hard to construct the desired GitHub API call URL:   curl -v https://api.github.com/repos/iBug/USTC-RV-Chisel/tarball/b3c3b3683a6f5961dcde2d6c5312c31d9f382865   Looking at the cURL output, the Location header is what I wanted, so I followed it and wget the target:   wget https://codeload.github.com/iBug/USTC-RV-Chisel/legacy.tar.gz/b3c3b3683a6f5961dcde2d6c5312c31d9f382865   The next thing was to examine the tarball to determine the top-level folder name:      To make it easier to merge my working directory with the tarball, I renamed my local folder to match the one in the tarball:      Now it’s time to rebuild the commit!   Now that the working directory is restored, all that’s left to do is to figure out the committer information and commit time.   I must say here that retrieving those information from the GitHub API is an easier way to do it programmatically, but since I had the browser page open as well as my local repository, fetching the exact time from the web page was the method easier to reach, and committer information can be seen from git log.      The exact time in ISO 8601 format is available through F12   With all the required information collected, I rebuilt the commit myself:      Look! The new commit has the same SHA as the lost commit! So they’re the same commit now.   Pushing the restored commit back happily:     ","categories": [],
"tags": ["git","github","study-notes"],
"url": "https://ibugone.com/blog/2019/06/save-commit-from-github/",
"teaser":null},{
"title": "Using SSH deploy keys on CircleCI",
"excerpt":"A year ago back I wrote an article on automating build &amp; deployment of GitHub Pages website with Travis CI. It’s a great CI service at first, but since Travis CI has completely moved away from containers, speed is a real issue to whoever is concerned. On the other side, CircleCI is continuing their builds with Docker-based containers, whose rapid response is a great advantage against VMs with slow boot time.   Migrating the build script from Travis CI was an intuitive and easy step, but I immediately got disappointed by CircleCI’s logging: Secret environment variables get exposed in the log as long as any command or program prints them.      That’s particularly annoying because I used Personal Access Tokens to push built content back to GitHub, and this kind of straightforward leaks is a huge security issue, so I looked around for alternatives, and came up with the idea of using a deploy key with write access.   Setting up the basics wasn’t any difficult on its own for anyone with a bit experience in Linux:      Generate an SSH key pair with ssh-keygen   Encode (or compress + encode) the private key and put it into the CI environment   Create a build script to grab key from environment and utilize it   Once you’ve figured out the build script, everything appears straightforward:   if [ -z \"$SSH_KEY_E\" ]; then   e_error \"No SSH key found in environment.\"   exit 1 fi  base64 -d &lt;&lt;&lt; \"$SSH_KEY_E\" | gunzip -c &gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa git clone --depth=3 --branch=$BRANCH \"git@github.com:$GH_REPO.git\" _site   At first glance, it should work without any problem. But that’s apparently only an assumption, no? And if you follow the build log, you’ll immediately know when it runs into the problem:   ERROR: The key you are authenticating with has been marked as read only.   It’s particularly confusing when you’ve written your SSH private key to the correct path, set the correct permission and expecting SSH to respect your key, only to find it’s actually offering another key to GitHub and fails.      Digging around with debug information (set GIT_SSH_COMMAND='ssh -vv'), I noticed this absurd thing:      Clearly, the aptly placed key wasn’t even found by SSH, rendering it completely unusable in status quo. I’ve even tried crafting ~/.ssh/config, but unfortunately it’s ignored as well.   Solution   Just like most other CLI utilities, SSH respects command-line arguments loyally. So you would just specify the identity file there:   export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa'      And I don’t even know what’s going on behind the scenes, but it just works.   Reference: Stack Overflow   ","categories": [],
"tags": ["development","github-pages"],
"url": "https://ibugone.com/blog/2019/07/circleci-ssh-delpoy-keys/",
"teaser":null},{
"title": "Jekyll Themes",
"excerpt":" ","categories": [],
"tags": [],
"url": "https://ibugone.com/share/jekyll-themes/",
"teaser":null}]