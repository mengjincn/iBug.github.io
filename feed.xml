<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://ibugone.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ibugone.com/" rel="alternate" type="text/html" /><updated>2019-07-14T08:37:00+00:00</updated><id>https://ibugone.com/feed.xml</id><title type="html">iBug ①</title><subtitle>The little personal site for iBug</subtitle><author><name>iBug</name></author><entry><title type="html">Using SSH deploy keys on CircleCI</title><link href="https://ibugone.com/blog/2019/07/circleci-ssh-delpoy-keys/" rel="alternate" type="text/html" title="Using SSH deploy keys on CircleCI" /><published>2019-07-08T00:00:00+00:00</published><updated>2019-07-08T00:00:00+00:00</updated><id>https://ibugone.com/blog/2019/07/circleci-ssh-delpoy-keys</id><content type="html" xml:base="https://ibugone.com/blog/2019/07/circleci-ssh-delpoy-keys/">&lt;p&gt;A year ago back I &lt;a href=&quot;/p/4&quot;&gt;wrote an article&lt;/a&gt; on automating build &amp;amp; deployment of GitHub Pages website with Travis CI. It’s a great CI service at first, but since &lt;a href=&quot;https://blog.travis-ci.com/2018-10-04-combining-linux-infrastructures&quot;&gt;Travis CI has completely moved away from containers&lt;/a&gt;, speed is a real issue to whoever is concerned. On the other side, CircleCI is continuing their builds with Docker-based containers, whose rapid response is a &lt;em&gt;great&lt;/em&gt; advantage against VMs with slow boot time.&lt;/p&gt;
        &lt;p&gt;Migrating the build script from Travis CI was an intuitive and easy step, but I immediately got disappointed by CircleCI’s logging: Secret environment variables get exposed in the log as long as any command or program prints them.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/circleci/token-leak.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;That’s particularly annoying because I used Personal Access Tokens to push built content back to GitHub, and this kind of straightforward leaks is a huge security issue, so I looked around for alternatives, and came up with the idea of using a deploy key with write access.&lt;/p&gt;
        &lt;p&gt;Setting up the basics wasn’t any difficult on its own for anyone with a bit experience in Linux:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;Generate an SSH key pair with &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;Encode (or compress + encode) the private key and put it into the CI environment&lt;/li&gt;
        &lt;li&gt;Create a build script to grab key from environment and utilize it&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;Once you’ve figured out the build script, everything appears straightforward:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SSH_KEY_E&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;e_error &lt;span class=&quot;s2&quot;&gt;&quot;No SSH key found in environment.&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
        &lt;span class=&quot;k&quot;&gt;fi
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SSH_KEY_E&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;gunzip&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/.ssh/id_rsa
        &lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;600 ~/.ssh/id_rsa
        git clone &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nt&quot;&gt;--branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BRANCH&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git@github.com:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GH_REPO&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.git&quot;&lt;/span&gt; _site
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;At first glance, it &lt;em&gt;should&lt;/em&gt; work without any problem. But that’s apparently only an &lt;em&gt;assumption&lt;/em&gt;, no? And if you follow the build log, you’ll immediately know when it runs into &lt;em&gt;the problem&lt;/em&gt;:&lt;/p&gt;
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR: The key you are authenticating with has been marked as read only.
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;It’s particularly confusing when you’ve written your SSH private key to the correct path, set the correct permission and expecting SSH to respect your key, only to find it’s actually offering another key to GitHub and fails.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/circleci/ssh-fail.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Digging around with debug information (set &lt;code class=&quot;highlighter-rouge&quot;&gt;GIT_SSH_COMMAND='ssh -vv'&lt;/code&gt;), I noticed this absurd thing:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/circleci/key-not-found.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Clearly, the aptly placed key wasn’t even found by SSH, rendering it completely unusable in status quo. I’ve even tried crafting &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt;, but unfortunately it’s ignored as well.&lt;/p&gt;
        &lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
        &lt;p&gt;Just like most other CLI utilities, SSH respects command-line arguments loyally. So you would just specify the identity file there:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GIT_SSH_COMMAND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ssh -i ~/.ssh/id_rsa'&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;&lt;img src=&quot;/image/circleci/solution.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;And I don’t even know what’s going on behind the scenes, but it just works.&lt;/p&gt;
        &lt;p&gt;Reference: &lt;a href=&quot;https://stackoverflow.com/q/55177042/5958455&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;</content><author><name>iBug</name></author><category term="development" /><category term="github-pages" /><summary type="html">A year ago back I wrote an article on automating build &amp;amp; deployment of GitHub Pages website with Travis CI. It’s a great CI service at first, but since Travis CI has completely moved away from containers, speed is a real issue to whoever is concerned. On the other side, CircleCI is continuing their builds with Docker-based containers, whose rapid response is a great advantage against VMs with slow boot time.</summary></entry><entry><title type="html">How I saved a lost commit from GitHub</title><link href="https://ibugone.com/blog/2019/06/save-commit-from-github/" rel="alternate" type="text/html" title="How I saved a lost commit from GitHub" /><published>2019-06-07T00:00:00+00:00</published><updated>2019-06-07T00:00:00+00:00</updated><id>https://ibugone.com/blog/2019/06/save-commit-from-github</id><content type="html" xml:base="https://ibugone.com/blog/2019/06/save-commit-from-github/">&lt;p&gt;Earlier today I force-pushed to my repository &lt;a href=&quot;https://github.com/iBug/USTC-RV-Chisel&quot;&gt;USTC-RV-Chisel&lt;/a&gt; for testing purposes,
        without noticing that my local ref &lt;code class=&quot;highlighter-rouge&quot;&gt;origin/master&lt;/code&gt; is 1 commit behind the actual &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; on GitHub.
        My friend pushed his work (1 commit) to it, and now it’s lost.&lt;/p&gt;
        &lt;p&gt;Fortunately, I haven’t closed my terminal yet, so there’s at least some place to look at:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/git-restore/1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;From the terminal log, I knew that the SHA of the lost commit begins with &lt;code class=&quot;highlighter-rouge&quot;&gt;b3c3b36&lt;/code&gt;, so it appeared very intuitive for me to just try fetching the commit, but no luck:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/git-restore/2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;I recalled that GitHub can show commits with only first 7 digits of its SHA, so I constructed the URL &lt;a href=&quot;https://github.com/iBug/USTC-RV-Chisel/commit/b3c3b36&quot;&gt;https://github.com/iBug/USTC-RV-Chisel/commit/b3c3b36&lt;/a&gt; and followed it:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/git-restore/3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Now trying it again with the full SHA that’s easily retrieved from the web page:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/git-restore/4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Hello? Does GitHub allow this? Oh-no!&lt;/p&gt;
        &lt;p&gt;I Googled around for a few minutes, and concluded that GitHub doesn’t allow fetching this commit, because it’s &lt;em&gt;unadvertised&lt;/em&gt;.&lt;/p&gt;
        &lt;p&gt;Thinking around for ideas, I decided to give it a try to rebuild the commit.&lt;/p&gt;
        &lt;p&gt;First, I prepare my working directory with&lt;/p&gt;
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add -A
        git stash
        git reset --hard ee216e3  # This is the parent commit of the lost commit
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Then, I need the full content of the tree of the commit.&lt;/p&gt;
        &lt;p&gt;While GitHub offers ZIP archive download at the tree page &lt;a href=&quot;https://github.com/iBug/USTC-RV-Chisel/tree/b3c3b36&quot;&gt;https://github.com/iBug/USTC-RV-Chisel/tree/b3c3b36&lt;/a&gt;, ZIP isn’t good for this job - it doesn’t preserve POSIX file modes, so I looked around for the TAR archive (tarball). It wasn’t on the page.&lt;/p&gt;
        &lt;p&gt;Thinking around again, I recalled working with the GitHub API, and there’s an endpoint to get a tarball.
        It wasn’t hard to construct the desired GitHub API call URL:&lt;/p&gt;
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v https://api.github.com/repos/iBug/USTC-RV-Chisel/tarball/b3c3b3683a6f5961dcde2d6c5312c31d9f382865
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Looking at the cURL output, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Location&lt;/code&gt; header is what I wanted, so I followed it and &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; the target:&lt;/p&gt;
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://codeload.github.com/iBug/USTC-RV-Chisel/legacy.tar.gz/b3c3b3683a6f5961dcde2d6c5312c31d9f382865
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;The next thing was to examine the tarball to determine the top-level folder name:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/git-restore/5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;To make it easier to merge my working directory with the tarball, I renamed my local folder to match the one in the tarball:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/git-restore/6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Now it’s time to rebuild the commit!&lt;/p&gt;
        &lt;p&gt;Now that the working directory is restored, all that’s left to do is to figure out the committer information and commit time.&lt;/p&gt;
        &lt;p&gt;I must say here that retrieving those information from the GitHub API is an easier way to do it programmatically, but since I had the browser page open as well as my local repository, fetching the exact time from the web page was the method easier to reach, and committer information can be seen from &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/git-restore/7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;&lt;sup&gt;The exact time in ISO 8601 format is available through F12&lt;sup&gt;&lt;/sup&gt;&lt;/sup&gt;&lt;/p&gt;
        &lt;p&gt;With all the required information collected, I rebuilt the commit myself:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/git-restore/8.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Look! The new commit has the same SHA as the lost commit! So they’re the same commit now.&lt;/p&gt;
        &lt;p&gt;Pushing the restored commit back happily:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/git-restore/9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;</content><author><name>iBug</name></author><category term="git" /><category term="github" /><category term="study-notes" /><summary type="html">Earlier today I force-pushed to my repository USTC-RV-Chisel for testing purposes, without noticing that my local ref origin/master is 1 commit behind the actual master on GitHub. My friend pushed his work (1 commit) to it, and now it’s lost.</summary></entry><entry><title type="html">Wolfram Mathematica 12 Key Generator</title><link href="https://ibugone.com/blog/2019/05/mathematica-keygen/" rel="alternate" type="text/html" title="Wolfram Mathematica 12 Key Generator" /><published>2019-05-11T00:00:00+00:00</published><updated>2019-05-11T00:00:00+00:00</updated><id>https://ibugone.com/blog/2019/05/mathematica-keygen</id><content type="html" xml:base="https://ibugone.com/blog/2019/05/mathematica-keygen/">&lt;p&gt;&lt;strong&gt;Supports Wolfram Mathematica 12.0&lt;/strong&gt;&lt;/p&gt;
        &lt;p&gt;Input your MathID (xxxx-xxxxx-xxxxx) and press &lt;strong&gt;Generate&lt;/strong&gt;.&lt;/p&gt;
        &lt;p&gt;&lt;input type=&quot;text&quot; id=&quot;mathId&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;&lt;button id=&quot;generate&quot; class=&quot;btn btn--primary&quot;&gt;Generate&lt;/button&gt;&lt;/p&gt;
        &lt;p id=&quot;result&quot;&gt;Press &lt;b&gt;Generate&lt;/b&gt;!&lt;/p&gt;
        &lt;script type=&quot;text/javascript&quot;&gt;
        function f1(n, byte, c) {
        for (var bitIndex = 0; bitIndex &lt;= 7; bitIndex++) {
        var bit = (byte &gt;&gt; bitIndex) &amp; 1;
        if (bit + ((n - bit) &amp; ~1) === n) {
        n = (n - bit) &gt;&gt; 1;
        } else {
        n = ((c - bit) ^ n) &gt;&gt; 1;
        }
        }
        return n;
        }
        function genPassword(str, hash) {
        for (var byteIndex = str.length - 1; byteIndex &gt;= 0; byteIndex--) {
        hash = f1(hash, str.charCodeAt(byteIndex), 0x105C3);
        }
        var n1 = 0;
        while (f1(f1(hash, n1 &amp; 0xFF, 0x105C3), n1 &gt;&gt; 8, 0x105C3) !== 0xA5B6) {
        if (++n1 &gt;= 0xFFFF) {
        return &quot;Error&quot;;
        }
        }
        n1 = Math.floor(((n1 + 0x72FA) &amp; 0xFFFF) * 99999.0 / 0xFFFF);
        var n1str = (&quot;0000&quot; + n1.toString(10)).slice(-5);
        var temp = parseInt(n1str.slice(0, -3) + n1str.slice(-2) + n1str.slice(-3, -2), 10);
        temp = Math.ceil((temp / 99999.0) * 0xFFFF);
        temp = f1(f1(0, temp &amp; 0xFF, 0x1064B), temp &gt;&gt; 8, 0x1064B);
        for (byteIndex = str.length - 1; byteIndex &gt;= 0; byteIndex--) {
        temp = f1(temp, str.charCodeAt(byteIndex), 0x1064B);
        }
        var n2 = 0;
        while (f1(f1(temp, n2 &amp; 0xFF, 0x1064B), n2 &gt;&gt; 8, 0x1064B) !== 0xA5B6) {
        if (++n2 &gt;= 0xFFFF) {
        return &quot;Error&quot;;
        }
        }
        n2 = Math.floor((n2 &amp; 0xFFFF) * 99999.0 / 0xFFFF);
        var n2str = (&quot;0000&quot; + n2.toString(10)).slice(-5);
        return n2str.charAt(3) + n1str.charAt(3) + n1str.charAt(1) + n1str.charAt(0) + &quot;-&quot;
        + n2str.charAt(4) + n1str.charAt(2) + n2str.charAt(0) + &quot;-&quot;
        + n2str.charAt(2) + n1str.charAt(4) + n2str.charAt(1) + &quot;::1&quot;;
        }
        function checkMathId(s) {
        if (s.length != 16)
        return false;
        for (let i = 0; i &lt; s.length; i++) {
        if (i === 4 || i === 10) {
        if (s[i] !== &quot;-&quot;)
        return false;
        } else {
        if (&quot;0123456789&quot;.search(s[i]) &lt; 0)
        return false;
        }
        }
        return true;
        }
        Array.prototype.getRandom = function () {
        return this[Math.floor(Math.random() * this.length)]
        }
        document.getElementById(&quot;generate&quot;).addEventListener(&quot;click&quot;, function () {
        document.getElementById(&quot;result&quot;).innerText = &quot;&quot;;
        var mathId = document.getElementById(&quot;mathId&quot;).value.trim();
        if (!checkMathId(mathId)) {
        document.getElementById(&quot;result&quot;).innerText = &quot;Bad MathID!&quot;;
        } else {
        activationKey = &quot;&quot;;
        for (let i = 0; i &lt; 14; i++) {
        activationKey += Math.floor(Math.random() * 10);
        if (i === 3 || i === 7)
        activationKey += &quot;-&quot;;
        }
        var magicNumbers = [10690, 12251, 17649, 24816, 33360, 35944, 36412, 42041, 42635, 44011, 53799, 56181, 58536, 59222, 61041];
        var password = genPassword(mathId + &quot;$1&amp;&quot; + activationKey, magicNumbers.getRandom());
        document.getElementById(&quot;result&quot;).innerText += &quot;Activation Key: &quot; + activationKey + &quot;\nPassword: &quot; + password;
        }
        });
        &lt;/script&gt;</content><author><name>iBug</name></author><category term="keygen" /><summary type="html">Supports Wolfram Mathematica 12.0</summary></entry><entry><title type="html">Build a minimal Linux system and run it in QEMU</title><link href="https://ibugone.com/blog/2019/04/os-lab-1/" rel="alternate" type="text/html" title="Build a minimal Linux system and run it in QEMU" /><published>2019-04-07T00:00:00+00:00</published><updated>2019-04-07T00:00:00+00:00</updated><id>https://ibugone.com/blog/2019/04/os-lab-1</id><content type="html" xml:base="https://ibugone.com/blog/2019/04/os-lab-1/">&lt;p&gt;Linux is the #1 open-source operating system nowadays, and many people are running a Linux distro, such as Ubuntu or Arch. Linux is also the most popular choice for a server OS.&lt;/p&gt;
        &lt;p&gt;Building Linux from scratch is a good way to learn how it works, and is also a good practice for whoever wanting to learn about how operating systems work. And for me, the task of the first experiment of the course &lt;em&gt;Operating System Concepts&lt;/em&gt;.&lt;/p&gt;
        &lt;h1 id=&quot;environment-setup&quot;&gt;Environment setup&lt;/h1&gt;
        &lt;p&gt;The lab task is to build Linux &lt;strong&gt;2.6.26&lt;/strong&gt; and run it in &lt;a href=&quot;https://www.qemu.org/&quot;&gt;QEMU&lt;/a&gt;. For the most convenient setup, I recommend the 32-bit versions of &lt;strong&gt;Ubuntu 14.04&lt;/strong&gt; “&lt;em&gt;trusty&lt;/em&gt;” or &lt;strong&gt;Debian 7&lt;/strong&gt; “&lt;em&gt;wheezy&lt;/em&gt;”. If you prefer another Linux distro, make sure it comes with glibc of a version &lt;strong&gt;no newer than 2.19&lt;/strong&gt;. This is because glibc 2.20 requires Linux kernel 2.6.32, which supercedes our target version.&lt;/p&gt;
        &lt;p&gt;There’s no need to install the base system physically if you don’t have one yet, as a &lt;a href=&quot;/p/15&quot;&gt;virtual machine&lt;/a&gt; will work perfectly well, and you can enjoy your Windows or Mac applications while the VM is running.&lt;/p&gt;
        &lt;p&gt;Before we start this experiment, we need to have proper tools installed. On Ubuntu 14.04 or Debian 7, the following command will install all we need for this lab:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;build-essential libncurses5-dev qemu
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;ul&gt;
        &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;build-essential&lt;/code&gt; package, as suggested by its name, contains essential tools for building, such as binutils, C compiler and library, and automation tools like Make.&lt;/li&gt;
        &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;libncurses5-dev&lt;/code&gt; package provides header files for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Ncurses&quot;&gt;New Curses&lt;/a&gt; library, which is used to display beautiful user interface in a text terminal. Many good-looking terminal programs use it, such as Vim or Emacs.&lt;/li&gt;
        &lt;li&gt;QEMU is what we’ll be booting our Linux with - of course it’s needed&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h1 id=&quot;building-the-linux-system&quot;&gt;Building the Linux system&lt;/h1&gt;
        &lt;p&gt;Now we’re ready to build our own Linux. The first thing is the kernel.&lt;/p&gt;
        &lt;h2 id=&quot;compiling-the-kernel&quot;&gt;Compiling the kernel&lt;/h2&gt;
        &lt;p&gt;Download and extract the source code:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://mirrors.edge.kernel.org/pub/linux/kernel/v2.6/linux-2.6.26.tar.gz
        &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;zxvf linux-2.6.26.tar.gz
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Next, generate the default configuration and build against that:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;linux-2.6.26
        make i386_defconfig
        make
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;You’ll likely encounter a few errors during the building process. Here are the fixes to two most common errors people encounter:&lt;/p&gt;
        &lt;p&gt;The first one you’ll meet should look like this:&lt;/p&gt;
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc: error: elf_x86_64: No such file or directory
        make[1]: *** [arch/x86/vdso/vdso.so.dbg] Error 1
        make: *** [arch/x86/vdso] Error 2
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;To fix this, open &lt;code class=&quot;highlighter-rouge&quot;&gt;arch/x86/vdso/Makefile&lt;/code&gt; in a text editor, such as Vim or gedit. Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;-m elf_x86_64&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;-m64&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-m elf_i386&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;-m32&lt;/code&gt;. Save the changes.&lt;/p&gt;
        &lt;p&gt;The second one would be like this:&lt;/p&gt;
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;undefined reference to `__mutex_lock_slowpath'
        undefined reference to `__mutex_unlock_slowpath'
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;To fix this, open &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/mutex.c&lt;/code&gt; and look for the above two functions. You’ll see them written like these:&lt;/p&gt;
        &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noinline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sched&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;__mutex_lock_slowpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noinline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sched&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__mutex_unlock_slowpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Insert &lt;code class=&quot;highlighter-rouge&quot;&gt;__used&lt;/code&gt; after the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; in both cases, so they should end up looking like these:`&lt;/p&gt;
        &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__used&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noinline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sched&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;__mutex_lock_slowpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__used&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noinline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sched&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__mutex_unlock_slowpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;For most people, fixing the above two things should enable the build process to complete without interrupts.&lt;/p&gt;
        &lt;p&gt;That’s the kernel. Before we can boot it up, we need an initial filesystem, with some critical files for the system to be able to boot up.&lt;/p&gt;
        &lt;p&gt;Here two options are presented. Although only one is necessary, I still recommend trying out both - for a better understanding how Linux works.&lt;/p&gt;
        &lt;h2 id=&quot;preparing-the-root-filesystem---option-1-handcraft-init&quot;&gt;Preparing the root filesystem - Option 1: Handcraft init&lt;/h2&gt;
        &lt;p&gt;With the first option, we will be creating a minimal program to serve as the “startup program”.&lt;/p&gt;
        &lt;p&gt;Open your favorite text editor and write the following C program:&lt;/p&gt;
        &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
        #include &amp;lt;unistd.h&amp;gt;
        &lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Save it as &lt;code class=&quot;highlighter-rouge&quot;&gt;test.c&lt;/code&gt;, and run the following command to compile it:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc &lt;span class=&quot;nt&quot;&gt;-static&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; init test.c
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Now you have the init program. You need to prepare the filesystem. The following commands will create an empty 4 MB image and mount it at &lt;code class=&quot;highlighter-rouge&quot;&gt;rootfs&lt;/code&gt;.&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;dd &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;myinitrd.img &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4M &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
        mkfs.ext3 myinitrd.img
        &lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;rootfs
        &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mount &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; loop myinitrd.img rootfs
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Next, copy your init program into it, and create some device files as required:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;init rootfs/
        &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;rootfs
        &lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;dev
        &lt;span class=&quot;nb&quot;&gt;sudo mknod &lt;/span&gt;dev/ram b 1 0
        &lt;span class=&quot;nb&quot;&gt;sudo mknod &lt;/span&gt;dev/console c 5 1
        &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
        umount rootfs
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;After having the linux kernel and the root filesystem ready, you can try booting it in QEMU:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;qemu-system-i386 &lt;span class=&quot;nt&quot;&gt;-kernel&lt;/span&gt; linux-2.6.26/arch/x86/boot/bzImage &lt;span class=&quot;nt&quot;&gt;-initrd&lt;/span&gt; myinitrd.img &lt;span class=&quot;nt&quot;&gt;--append&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;root=/dev/ram init=/init&quot;&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;You’ll see QEMU launching in a new window, with a lot of messages followed by the output of your init program, like this:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7273074/55729166-341d6e80-5a48-11e9-8307-575b2c8c7cd0.png&quot; alt=&quot;QEMU Looks&quot; /&gt;&lt;/p&gt;
        &lt;h2 id=&quot;preparing-the-root-filesystem---option-2-busybox&quot;&gt;Preparing the root filesystem - Option 2: BusyBox&lt;/h2&gt;
        &lt;p&gt;The first option is just a minimal example of what a root filesystem should contain. It is, however, not quite function-rich.&lt;/p&gt;
        &lt;p&gt;With &lt;a href=&quot;https://busybox.net/&quot;&gt;BusyBox&lt;/a&gt; that packs many common Unix &amp;amp; Linux utilities into one single binary, you’ll be able to create a mostly functional, yet still minimal Linux system.&lt;/p&gt;
        &lt;p&gt;Busybox is available as source code so whoever need it can compile it themselves. Download the source code and configure it:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://busybox.net/downloads/busybox-1.30.1.tar.bz2
        &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;jxvf busybox-1.30.1.tar.bz2
        &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;busybox-1.30.1
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;You need to configure some build options so it best suits this lab. Run &lt;code class=&quot;highlighter-rouge&quot;&gt;make defconfig&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;make menuconfig&lt;/code&gt; to start. You’ll need to change at least four options as shown below. The first option is switched on and off with the space bar, and the second and the third one requires you to enter the string manually. Finally, the last one is a multiple choice. You should put the X on the desired option.&lt;/p&gt;
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Settings –&amp;gt;
        Build Options
        [*] Build static binary（no share libs）
        Settings –&amp;gt;
        (-m32 -march=i386) Additional CFLAGS
        (-m32) Additional LDFLAGS
        Settings –&amp;gt;
        What kind of applet links to install –&amp;gt;
        (X) as soft-links
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;With the build properly configured, now you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;make install&lt;/code&gt; to build BusyBox and deploy your build. Installed files will appear under &lt;code class=&quot;highlighter-rouge&quot;&gt;_install&lt;/code&gt; directory inside &lt;code class=&quot;highlighter-rouge&quot;&gt;busybox-1.30.1&lt;/code&gt;.&lt;/p&gt;
        &lt;p&gt;To be able to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;_install&lt;/code&gt; directory as a bootable root filesystem, you should create the special files identical to what’s there in Option 1.&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; dev
        &lt;span class=&quot;nb&quot;&gt;sudo mknod &lt;/span&gt;dev/console c 5 1
        &lt;span class=&quot;nb&quot;&gt;sudo mknod &lt;/span&gt;dev/ram b 1 0
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Next, you need a init program. This time we want to go the easy way with BusyBox, instead of writing a dummy one in C. Open your favorite text editor and type the following content:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;### INIT SCRIPT ###&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /proc /sys /tmp
        mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; proc none /proc
        mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; sysfs none /sys
        mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; tmpfs none /tmp
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;This boot took &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f1&lt;/span&gt; /proc/uptime&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; seconds&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /bin/sh
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Save it with the name &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; under the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;_install&lt;/code&gt;. Run &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod a+x init&lt;/code&gt; so it becomes executable.&lt;/p&gt;
        &lt;p&gt;Now pack everything up as a ramdisk image. Make sure you’re inside &lt;code class=&quot;highlighter-rouge&quot;&gt;_install&lt;/code&gt; directory before running the following command:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &lt;span class=&quot;nt&quot;&gt;-print0&lt;/span&gt; | cpio &lt;span class=&quot;nt&quot;&gt;-0oH&lt;/span&gt; newc | &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/initramfs.cpio.gz
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;There should be a new file &lt;code class=&quot;highlighter-rouge&quot;&gt;initramfs.cpio.gz&lt;/code&gt; in your home directory. You can now run QEMU with this new package:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;qemu-system-i386 &lt;span class=&quot;nt&quot;&gt;-kernel&lt;/span&gt; linux-2.6.26/arch/x86/boot/bzImage &lt;span class=&quot;nt&quot;&gt;-initrd&lt;/span&gt; ~/initramfs.cpio.gz &lt;span class=&quot;nt&quot;&gt;--append&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;root=/dev/ram init=/init&quot;&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Make sure the path to the Linux kernel is correct. Your path will likely vary depending on your procedure. You can always run &lt;code class=&quot;highlighter-rouge&quot;&gt;find ~ -name bzImage&lt;/code&gt; to see where it’s located.&lt;/p&gt;
        &lt;p&gt;If everything’s going right, you’ll see the following screen in QEMU:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7273074/55732852-464edb00-5a4f-11e9-8e2e-7208cceadf24.png&quot; alt=&quot;QEMU Looks&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Congratulations! You’ve built your own Linux-from-Scratch and booted it in QEMU.&lt;/p&gt;
        &lt;p&gt;There’s a second part of the original Lab 1 of &lt;em&gt;Operating System Concepts&lt;/em&gt;, which I will describe in a later article (or more likely, skipped &lt;code class=&quot;highlighter-rouge&quot;&gt;:)&lt;/code&gt;).&lt;/p&gt;</content><author><name>iBug</name></author><category term="study-notes" /><category term="linux" /><summary type="html">Linux is the #1 open-source operating system nowadays, and many people are running a Linux distro, such as Ubuntu or Arch. Linux is also the most popular choice for a server OS.</summary></entry><entry><title type="html">Filter Manually Installed Packages from APT with AWK</title><link href="https://ibugone.com/blog/2019/03/first-touch-with-awk/" rel="alternate" type="text/html" title="Filter Manually Installed Packages from APT with AWK" /><published>2019-03-04T00:00:00+00:00</published><updated>2019-03-04T00:00:00+00:00</updated><id>https://ibugone.com/blog/2019/03/first-touch-with-awk</id><content type="html" xml:base="https://ibugone.com/blog/2019/03/first-touch-with-awk/">&lt;p&gt;It’s again when I want to find out what packages I have manually installed (or by a script) from the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;apt list&lt;/code&gt;, with all output on one line.&lt;/p&gt;
        &lt;p&gt;It’s a pretty easy task if you’re familiar with Unix command utilities for text manipulation, and you may probably have come up with this solution:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt list |
        &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[installed]'&lt;/span&gt; |
        &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;/ &lt;span class=&quot;nt&quot;&gt;-f1&lt;/span&gt; |
        &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;The last &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; is there because the output from &lt;code class=&quot;highlighter-rouge&quot;&gt;tr&lt;/code&gt; doesn’t contain a newline at end, which would make your terminal look ugly. It’s also not well-Unix-styled because all output should end with a newline.&lt;/p&gt;
        &lt;p&gt;I was in the middle of the desire to learn AWK when I faced this task, so I did some search and wrote this AWK script:&lt;/p&gt;
        &lt;div class=&quot;language-awk highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/awk -f&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kc&quot;&gt;FS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;
        &lt;span class=&quot;kc&quot;&gt;ORS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;installed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kc&quot;&gt;ORS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;\n&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Save this file as whatever name you like, apply &lt;code class=&quot;highlighter-rouge&quot;&gt;755&lt;/code&gt; permissions and run &lt;code class=&quot;highlighter-rouge&quot;&gt;apt list | some.awk&lt;/code&gt;, and watch the magic go.&lt;/p&gt;
        &lt;h1 id=&quot;hows-it-done&quot;&gt;How’s it done?&lt;/h1&gt;
        &lt;p&gt;For those absolutely new to AWK, this is a good example to start with.&lt;/p&gt;
        &lt;p&gt;The first thing is blocks. Each block begins with a “match condition” that means the block will be executed when the condition matches. A condition can be a statement (like &lt;code class=&quot;highlighter-rouge&quot;&gt;$1 == &quot;abcd&quot;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;NR % 2 == 0&lt;/code&gt;), a regular expression (like the example abov) or a special pattern (&lt;code class=&quot;highlighter-rouge&quot;&gt;BEGIN&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;END&lt;/code&gt;).&lt;/p&gt;
        &lt;p&gt;If the condition is a statement, it is evaluated and tested for truthness. If it’s a regular expression, it’s matched against the whole record. Special patterns are intuitive: before processing the first record (&lt;code class=&quot;highlighter-rouge&quot;&gt;BEGIN&lt;/code&gt;) or after processing every record (&lt;code class=&quot;highlighter-rouge&quot;&gt;END&lt;/code&gt;).&lt;/p&gt;
        &lt;p&gt;The second thing is statements. In the example, there are only two kinds of statements: &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; and variable assignments. &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; is plain (so far) and it prints whatever’s after it. Here &lt;code class=&quot;highlighter-rouge&quot;&gt;$1&lt;/code&gt; means the first field of the record.&lt;/p&gt;
        &lt;p&gt;The two assigned variables are &lt;a href=&quot;https://www.gnu.org/software/gawk/manual/gawk.html#Built_002din-Variables&quot;&gt;special&lt;/a&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;FS&lt;/code&gt; stands for &lt;strong&gt;F&lt;/strong&gt;ield &lt;strong&gt;S&lt;/strong&gt;eparator and it’s set to a slash, so the first field is everything before the first slash. &lt;code class=&quot;highlighter-rouge&quot;&gt;ORS&lt;/code&gt; stands for &lt;strong&gt;O&lt;/strong&gt;utput &lt;strong&gt;R&lt;/strong&gt;ecord &lt;strong&gt;S&lt;/strong&gt;eparator, and it’s what &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; adds at the end of each &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; statement, much like the keyword variable &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt; in Python 3’s &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt; function.&lt;/p&gt;
        &lt;p&gt;More complex statements like conditions, loops and arithmetics are also possible, but I’m avoiding them here because they don’t appear in this script.&lt;/p&gt;
        &lt;p&gt;Finally, it comes to the execution of the script. By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; takes the first non-option command-line argument as the AWK program to execute. To specify that the program is written in a file, you need the &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; option, whence the &lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_(Unix)&quot;&gt;shebang line&lt;/a&gt;.&lt;/p&gt;</content><author><name>iBug</name></author><category term="study-notes" /><summary type="html">It’s again when I want to find out what packages I have manually installed (or by a script) from the output of apt list, with all output on one line.</summary></entry><entry><title type="html">Bootstrapping Make</title><link href="https://ibugone.com/blog/2019/02/bootstrapping-make/" rel="alternate" type="text/html" title="Bootstrapping Make" /><published>2019-02-25T00:00:00+00:00</published><updated>2019-02-25T00:00:00+00:00</updated><id>https://ibugone.com/blog/2019/02/bootstrapping-make</id><content type="html" xml:base="https://ibugone.com/blog/2019/02/bootstrapping-make/">&lt;p&gt;Have C or C++ project to build? You may think, “Yeah this is very easy, I’ll just call the compiler to do so”, and yes, let’s take a look at an example.&lt;/p&gt;
        &lt;h1 id=&quot;1-building-a-single-c--c-source-file&quot;&gt;1. Building a single C / C++ source file&lt;/h1&gt;
        &lt;p&gt;If you have a bare minimum knowledge of calling a compiler from the command line, you would come up with such a command:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; hello hello.c
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Yup, it’s that simple, &lt;em&gt;for a single-file project&lt;/em&gt;. What if there are two sources to be compiled together?&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; hello.o hello.c
        gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; main.o main.c
        gcc &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; hello hello.o main.o
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;If you still think it’s easy, let’s look at a slightly larger project with tens of sources and multiple output binaries:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; events.o events.c
        gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; display.o display.c
        ...
        ...
        gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; man.o main.c
        gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; pager events.o display.o ...
        gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; pager-config config.o ...
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;And that’s when problems &lt;em&gt;se lèvent&lt;/em&gt;. As you may have probably noticed, the last two commands have a wrong command argument &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt;, and the third-to-last command has a typo.
        These kinds of small mostakes are very likely to happen during busily scrolling over command histories and changing the arguments, which is essentially repetitive work that’s not for human.&lt;/p&gt;
        &lt;p&gt;As demonstrated above, manually typing the build commands might be feasible with projects with only one or two files, but you’ll soon get tired typing them over and over again and start making mistakes if there are more files to be compiled and linked.&lt;/p&gt;
        &lt;h1 id=&quot;2-basic-build-automation---shell-scripts&quot;&gt;2. Basic build automation - shell scripts&lt;/h1&gt;
        &lt;p&gt;You may feel that a script would be a better option and may come up with this:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ex&lt;/span&gt;
        build_obj&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;.o &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;.c
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        link_bin&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;shift
        &lt;/span&gt;gcc &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$OUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        build_obj events
        build_obj display
        ...
        build_obj main
        link_bin pager events.o display.o ... main.o
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;The above script, despite being plain and simple, is &lt;em&gt;at least&lt;/em&gt; better than manually typing all the commands. But there are still issues with it.&lt;/p&gt;
        &lt;p&gt;Now you want to add a manpage and installation functionalities, and write them to the script:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
        build_manpage
        install_manpage
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;That’s a good move to add support for building manpage, but there’s a serious caveat: there’s probably no need to build the manpage and install it every time this build script is run, as well as everything else unchanged.&lt;/p&gt;
        &lt;p&gt;So, while it indeed is a better option than typing commands manually, it’s still a bit distant from optimal. Here’s when &lt;em&gt;Make&lt;/em&gt; has its power.&lt;/p&gt;
        &lt;h1 id=&quot;3-build-automation-with-make&quot;&gt;3. Build automation with &lt;em&gt;Make&lt;/em&gt;&lt;/h1&gt;
        &lt;p&gt;&lt;em&gt;Make&lt;/em&gt; is a software designed specifically for build automation. It follows a predefined build guideline, a &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;, and builds your project.
        What’s more, Make offers more than simple build automation, like checking for changed files and only re-builds the changed files, eliminating redundant work spent on those unchanged files.&lt;/p&gt;
        &lt;p&gt;The first thing to using Make is knowing how to write a &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;. Here’s a basic &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; for a single-file project:&lt;/p&gt;
        &lt;div class=&quot;language-makefile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        gcc &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; hello hello.c
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;And the command you’ll run is just &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;. It will read your &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; and compile &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.c&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; for you.&lt;/p&gt;
        &lt;p&gt;If you run &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; again immediately, it won’t compile &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.c&lt;/code&gt; again, but tells you instead:&lt;/p&gt;
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make: Nothing to be done for 'all'.
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;You can see that Make avoids redundant work by checking for up-to-date files and skipping them.&lt;/p&gt;
        &lt;p&gt;An instruction to build a file is called a &lt;em&gt;target&lt;/em&gt; in Makefile. In the above example, &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; is a target and is the default target in the Makefile. Of course, you can have multiple targets in one Makefile:&lt;/p&gt;
        &lt;div class=&quot;language-makefile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        gcc &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; hello hello.c
        &lt;span class=&quot;nl&quot;&gt;hello_debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        gcc &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; hello_debug hello.c
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;And when you run &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;, the first target in the Makefile is the default target. You can specify a target that you want Make to build by specifying it on the command line:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make hello_debug
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Without Make or some other kind of build automation tool, resolving and carefully managing the dependency relationships among source files and intermediate files are a pain. With Make, it does this job for you.&lt;/p&gt;
        &lt;p&gt;A common type of dependency is linking object files into multiple output binaries. Here’s an example that shows how Make manages dependencies:&lt;/p&gt;
        &lt;div class=&quot;language-makefile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello world&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;library.o hello.o&lt;/span&gt;
        gcc &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$^&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;library.o world.o&lt;/span&gt;
        gcc &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$^&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;%.o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;%.c&lt;/span&gt;
        gcc &lt;span class=&quot;nt&quot;&gt;-O3&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wall&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$^&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;In the above example, both output programs &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;world&lt;/code&gt; depends on &lt;code class=&quot;highlighter-rouge&quot;&gt;library.o&lt;/code&gt;. When you run &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;, you’ll see Make compiles &lt;code class=&quot;highlighter-rouge&quot;&gt;library.o&lt;/code&gt; first, and only once, and uses it to link both binaries. The variables &lt;code class=&quot;highlighter-rouge&quot;&gt;$@&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$^&lt;/code&gt; are called &lt;a href=&quot;https://www.gnu.org/s/make/manual/html_node/Automatic-Variables.html&quot;&gt;Automatic Variables&lt;/a&gt;. Make is also capable of resolving complex dependencies, as long as they don’t form a loop. The &lt;code class=&quot;highlighter-rouge&quot;&gt;.PHONY&lt;/code&gt; target is a &lt;a href=&quot;https://www.gnu.org/s/make/manual/html_node/Phony-Targets.html&quot;&gt;Phony target&lt;/a&gt;, which will be built regardless of the existence of a file with the very name. That says, if you don’t write &lt;code class=&quot;highlighter-rouge&quot;&gt;.PHONY: all&lt;/code&gt; and have an up-to-date file named &lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; in your directory, Make won’t build the &lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; target again.&lt;/p&gt;
        &lt;p&gt;Make also supports variables so you don’t have to write the same commands or arguments repeatedly. For example, the above &lt;code class=&quot;highlighter-rouge&quot;&gt;makefile&lt;/code&gt; can be rewritten as follows:&lt;/p&gt;
        &lt;div class=&quot;language-makefile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O3&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wall&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello world&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;library.o hello.o&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$^&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;library.o world.o&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$^&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;%.o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;%.c&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$^&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${CC}&lt;/code&gt; is an automatic variable provided by Make and defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;cc&lt;/code&gt;. You can use another compiler by overriding this variable when invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make &lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;clang
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;CC&lt;/code&gt; is overridden with value &lt;code class=&quot;highlighter-rouge&quot;&gt;clang&lt;/code&gt;, and all &lt;code class=&quot;highlighter-rouge&quot;&gt;${CC}&lt;/code&gt; in the Makefile is substituted with &lt;code class=&quot;highlighter-rouge&quot;&gt;clang&lt;/code&gt;, effectively calling the Clang compiler to compile the project. There are various ways of assigning variables, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;?=&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;+=&lt;/code&gt;, all of which have different effects and usages.&lt;/p&gt;
        &lt;p&gt;You can find out more about Make by running &lt;code class=&quot;highlighter-rouge&quot;&gt;man make&lt;/code&gt; on your system, or by referring to the &lt;a href=&quot;https://www.gnu.org/software/make/manual/make.html&quot;&gt;GNU &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; Manual&lt;/a&gt; on GNU’s website.&lt;/p&gt;</content><author><name>iBug</name></author><category term="software" /><category term="development" /><category term="study-notes" /><summary type="html">Have C or C++ project to build? You may think, “Yeah this is very easy, I’ll just call the compiler to do so”, and yes, let’s take a look at an example.</summary></entry><entry><title type="html">在 VMware Workstation 中安装 Ubuntu</title><link href="https://ibugone.com/blog/2019/02/setup-ubuntu-in-vmware-cn/" rel="alternate" type="text/html" title="在 VMware Workstation 中安装 Ubuntu" /><published>2019-02-23T00:00:00+00:00</published><updated>2019-02-23T00:00:00+00:00</updated><id>https://ibugone.com/blog/2019/02/setup-ubuntu-in-vmware-cn</id><content type="html" xml:base="https://ibugone.com/blog/2019/02/setup-ubuntu-in-vmware-cn/">&lt;p&gt;&lt;sup&gt;There’s an &lt;a href=&quot;/p/15&quot;&gt;English&lt;/a&gt; version of this article!&lt;/sup&gt;&lt;/p&gt;
        &lt;p&gt;零基础快速上手虚拟机安装 Ubuntu，特别是在《操作系统原理与设计》开课的时候 &lt;em&gt;#(滑稽)&lt;/em&gt;。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/vmware-splash.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;h1 id=&quot;0-准备工作&quot;&gt;0. 准备工作&lt;/h1&gt;
        &lt;p&gt;由于本文教程安装的是带有桌面环境的 Linux 发行版，因此推荐为客户机（虚拟机）分配至少 2 GB 的内存，以保证流畅运行。由此，主机配置内存应有 6 GB 或更多。如果你的机器没有那么多内存，可以考虑安装 Ubuntu 服务器的虚拟机，实测这样的虚拟机可以在 512 MB 的内存下运行。&lt;/p&gt;
        &lt;p&gt;下载 VMware Workstation 的 &lt;a href=&quot;https://www.vmware.com/go/getworkstation-win&quot;&gt;Windows&lt;/a&gt; 或 &lt;a href=&quot;https://www.vmware.com/go/getworkstation-linux&quot;&gt;Linux&lt;/a&gt; 版本，或者下载 VMware Fusion 的 &lt;a href=&quot;https://www.vmware.com/go/getfusion&quot;&gt;macOS&lt;/a&gt; 版本。你需要一个产品密钥来激活 VMware Workstation Pro 或者 VMware Fusion （Google 一下一大把）。&lt;/p&gt;
        &lt;p&gt;从 &lt;a href=&quot;https://www.ubuntu.com/download/desktop&quot;&gt;ubuntu.com&lt;/a&gt; 获取最新的 Ubuntu 桌面版，或者从你喜欢的&lt;a href=&quot;https://launchpad.net/ubuntu/+cdmirrors&quot;&gt;镜像站&lt;/a&gt;下载（例如&lt;a href=&quot;https://mirrors.ustc.edu.cn/ubuntu-releases/bionic/&quot;&gt;科大镜像站&lt;/a&gt;）。 从镜像站下载的时候注意文件名应该是 &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu-{版本}-desktop-amd64.iso&lt;/code&gt;，其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;{版本}&lt;/code&gt; 是 Ubuntu 版本号，例如 &lt;code class=&quot;highlighter-rouge&quot;&gt;18.04&lt;/code&gt;。&lt;/p&gt;
        &lt;p&gt;由于作者只有运行 Windows 的电脑，因此 macOS 下安装 VMware Fusion 及 VirtualBox 的教程委托朋友编写，你可以点击&lt;a href=&quot;https://taoky.github.io/2019-02-23/installing-os-on-vm.html&quot;&gt;这里&lt;/a&gt;阅读。&lt;/p&gt;
        &lt;h1 id=&quot;1-在-windows-下安装-vmware-workstation&quot;&gt;1. 在 Windows 下安装 VMware Workstation&lt;/h1&gt;
        &lt;p&gt;打开下载好的 VMware Workstation 安装包（需要管理员权限）&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/vm-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;点击 [下一步] 继续，选择一种安装方式。对于大部分人来说，选择&lt;strong&gt;典型&lt;/strong&gt;就可以了。按照提示完成 VMware Workstation 的安装。安装完成后需要重启电脑，以确保所有组件都能正常工作。&lt;/p&gt;
        &lt;p&gt;重启后你应该能在桌面和开始菜单看到这样一个图标：&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/Win10-tile.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;双击打开 VMware Workstation，接受用户协议 (EULA) 并按提示输入密钥。如果你看到下面的窗口，说明你已经成功安装 VMware Workstation。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/home-page.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;h1 id=&quot;2-安装-ubuntu-桌面版的虚拟机&quot;&gt;2. 安装 Ubuntu 桌面版的虚拟机&lt;/h1&gt;
        &lt;p&gt;如上图所示，主页有三个大按钮。你可能已经发现了，第一个就是”创建新虚拟机“。点一下，然后就可以看到”创建新虚拟机向导“，如图：&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/nvmw-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;同样，对于大部分人来说，&lt;strong&gt;典型（推荐）&lt;/strong&gt;就像它写的那样——是推荐的选项。&lt;/p&gt;
        &lt;p&gt;在下一页，选择&lt;strong&gt;安装光盘镜像&lt;/strong&gt;并选择刚刚下载的 Ubuntu 系统镜像（格式是 ISO）。VMware Workstation 应该检测到 Ubuntu 安装盘并提示你将使用“简易安装”来安装操作系统。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/nvmw-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;点击 [下一步] 之后，你可以指定虚拟机的主机名（系统内部的“本机名称”，用于网络连接等），以及用户名和密码。由于虚拟机是一个独立的环境，而且只为你所用，因此弱密码不会带来什么安全问题（例如，图中所有空填的都是 &lt;code class=&quot;highlighter-rouge&quot;&gt;vmware&lt;/code&gt;，包括密码）。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/nvmw-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;在下一页中，你可以给这个虚拟机起个名字（这个名字将显示在菜单中），并指定一个存储位置。对大多数人来说，出于多种考虑，存储在 C 盘里不是一个期望的选择。在 Linux 或者 macOS 中，你可以将虚拟机放在你的 &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME&lt;/code&gt; 中。如图所示，我给虚拟机起名就叫 &lt;strong&gt;Ubuntu 18.04&lt;/strong&gt;，并将它放在 D 盘里。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/nvmw-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;接下来，为虚拟机创建一个虚拟磁盘。忽略 VMware 的建议值，16 GB 已经足够大多数初次接触 Ubuntu 的人使用了。本示例中我指定了 8 GB（这个容量对于示例来说足够了）。选择&lt;strong&gt;将虚拟磁盘作为单个文件存储&lt;/strong&gt;以获得较高性能——相信你的磁盘应对大文件的能力。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/nvmw-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;好了，以上就是你需要指定的设置选项了。检查一下并确认虚拟机的硬件配置。你可以在这里自定义虚拟机的硬件配置，比如，删掉打印机和声卡，或者增加一些处理器核心和内存（如果你的主机有足够多的资源）。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/nvmw-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/nvmw-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;关闭向导后，开启虚拟机。初次开机的界面如图：&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/u-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;就像之前所说，虚拟机中安装 Ubuntu 的过程是由 VMware 的简易安装功能全自动完成的。你可以看到 Ubuntu 的安装界面，如下所示：&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/u-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;取决于主机配置（尤其是硬盘速度），虚拟机将很快重启，新系统的第一次开机通常会比较慢。稍等片刻，你就能看到 Ubuntu 的登录界面。输入密码后，就可以看到 Ubuntu 的桌面。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/u-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/u-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;进入桌面后，&lt;em&gt;Ubuntu 的新特性&lt;/em&gt;会弹出来。你可以简单看一下，这里没有特别重要的信息。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/u-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;按 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;Alt&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; 可以打开 Ubuntu 自带的终端模拟器。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/u-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;最后，为了快速配置 Ubuntu 的生产力，我写了一个&lt;a href=&quot;https://github.com/iBug/shGadgets/blob/master/quick-setup.sh&quot;&gt;快速配置脚本&lt;/a&gt;，你可以用以下命令使用它：&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget &lt;span class=&quot;nt&quot;&gt;-qO&lt;/span&gt; setup.sh https://raw.githubusercontent.com/iBug/shGadgets/master/quick-setup.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bash setup.sh
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;由于该脚本使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;，因此过程中会提示你输入密码。另外，如果你有 GitHub 用户名，脚本也会询问，并为你配置好 Git 的设置。&lt;/p&gt;</content><author><name>iBug</name></author><category term="software" /><category term="linux" /><summary type="html">There’s an English version of this article!</summary></entry><entry><title type="html">Setting up Ubuntu in VMware Workstation</title><link href="https://ibugone.com/blog/2019/02/setup-ubuntu-in-vmware/" rel="alternate" type="text/html" title="Setting up Ubuntu in VMware Workstation" /><published>2019-02-21T00:00:00+00:00</published><updated>2019-02-21T00:00:00+00:00</updated><id>https://ibugone.com/blog/2019/02/setup-ubuntu-in-vmware</id><content type="html" xml:base="https://ibugone.com/blog/2019/02/setup-ubuntu-in-vmware/">&lt;p&gt;A quick step-by-step guide for those wanting to get in touch with Ubuntu in a virtual machine with minimal effort. For example, at the start of a semester of &lt;em&gt;Operating System Concepts&lt;/em&gt; course.&lt;/p&gt;
        &lt;p&gt;There’s a &lt;a href=&quot;/p/15-cn&quot;&gt;Chinese&lt;/a&gt; version of this article!&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/vmware-splash.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;h1 id=&quot;0-preparation&quot;&gt;0. Preparation&lt;/h1&gt;
        &lt;p&gt;Since we’re going to install a Linux distro with a desktop environment, 2 GB of guest memory is recommended, and as a consequence, you would want to ensure that your host machine has 6 GB or more RAM. If your machine doesn’t have that much RAM, you can try setting up a Ubuntu Server VM, which can require as little as 512 MB of guest memory to run.&lt;/p&gt;
        &lt;p&gt;Download VMware Workstation for &lt;a href=&quot;https://www.vmware.com/go/getworkstation-win&quot;&gt;Windows&lt;/a&gt; or &lt;a href=&quot;https://www.vmware.com/go/getworkstation-linux&quot;&gt;Linux&lt;/a&gt;, or download VMware Fusion for &lt;a href=&quot;https://www.vmware.com/go/getfusion&quot;&gt;macOS&lt;/a&gt;. You’ll need a key to license your VMware software (hint: try Google for it and you’ll find a lot).&lt;/p&gt;
        &lt;p&gt;Get the latest Ubuntu LTS image from &lt;a href=&quot;https://www.ubuntu.com/download/desktop&quot;&gt;ubuntu.com&lt;/a&gt;, or from a &lt;a href=&quot;https://launchpad.net/ubuntu/+cdmirrors&quot;&gt;mirror site&lt;/a&gt; at your option. If you go to a mirror site, make sure you’re downloading the file &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu-{version}-desktop-amd64.iso&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;{version}&lt;/code&gt; is the version number, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;18.04&lt;/code&gt;.&lt;/p&gt;
        &lt;h1 id=&quot;1-setting-up-vmware-workstation-windows&quot;&gt;1. Setting up VMware Workstation (Windows)&lt;/h1&gt;
        &lt;p&gt;Open your downloaded VMware Workstation installer (in &lt;code class=&quot;highlighter-rouge&quot;&gt;.exe&lt;/code&gt; format). You need Administrator privileges to continue&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/vm-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Continue with &lt;strong&gt;Next&lt;/strong&gt; and select an option to continue. For most people, you can safely proceed with &lt;strong&gt;Typical&lt;/strong&gt;. Follow the guide to finish installation of VMware Workstation.&lt;/p&gt;
        &lt;p&gt;Reboot your Windows machine after installing VMware Workstation – some components need a reboot before working properly.&lt;/p&gt;
        &lt;p&gt;You should now see a shortcut on your desktop like this:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/Win10-tile.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Double-click on it, accept the End User License Agreement (EULA) and enter your license key when it’s asked for.&lt;/p&gt;
        &lt;p&gt;If you see this screen, it means you’ve successfully installed VMware Workstation on your machine.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/home-page.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;h1 id=&quot;2-creating-a-virtual-machine-for-ubuntu&quot;&gt;2. Creating a Virtual Machine for Ubuntu&lt;/h1&gt;
        &lt;p&gt;As shown in the image above, there are three big buttons on the home page. Isn’t the first one tempting to click? Yes, just go for it, and you’ll be presented with this «New Virtual Machine Wizard»:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/nvmw-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Again for most people, &lt;strong&gt;Typical (recommended)&lt;/strong&gt; is as labelled – the recommended option.&lt;/p&gt;
        &lt;p&gt;In the next screen, select &lt;strong&gt;Installer disc image file (iso)&lt;/strong&gt; and locate the Ubuntu image (in &lt;code class=&quot;highlighter-rouge&quot;&gt;.iso&lt;/code&gt; format) you downloaded earlier. VMware Workstation should detect that it’s Ubuntu and inform you that it will use Easy Install for the operating system.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/nvmw-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;After clicking &lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;, you can enter the name of the virtual machine in &lt;em&gt;Full name&lt;/em&gt; field, and give your favorite username and an easy-to-memorize password. Here I use &lt;code class=&quot;highlighter-rouge&quot;&gt;vmware&lt;/code&gt; for all fields, including passwords, as a weak password in an isolated virtual machine won’t impose a big security issue.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/nvmw-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;In the next screen, give your virtual machine a name, and specify a storage location. For most people, you may want to move the location out of &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\&lt;/code&gt; for performance concerns (or, locate it inside your home directory if you’re on Linux; for Mac users, the default location is fine). In the image shown below, I put it in drive D on my machine, and just named it &lt;strong&gt;Ubuntu 18.04&lt;/strong&gt;.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/nvmw-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Then, create a virtual disk for the virtual machine. Despite what VMware suggests, 16 GB should be enough for most people on their first contact with Ubuntu. I went for 8 GB – I’m confident that’s enough for me. Select &lt;strong&gt;Store virtual disk as a single file&lt;/strong&gt; for better performance. Trust your disk drive and the filesystem’s ability in handling large files this time.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/nvmw-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;That’s all options you need to specify. Check the summary and click &lt;strong&gt;Finish&lt;/strong&gt;. You can also customize the hardware specifications if you want, for example, delete the printer and the sound card if you don’t want them, or increase the RAM and # of CPU cores if your machine is beefy and has spare resources.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/nvmw-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/nvmw-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;After closing the prompt, the virtual machine should power up automatically, provided you didn’t uncheck the last tick in the prompt. Here’s what it looks like when it first powers up.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/u-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Then, as told before, installation of the Ubuntu OS inside the virtual machine should begin automatically with VMware’s Easy Install feature. You can see the setup screen of Ubuntu like this:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/u-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Shortly afterwards, it should reboot automatically. The first boot may be a bit slower than you may expect, as there are additional things to be set up then. Soon you’ll be presented with the login screen of Ubuntu, and enter your password to see the desktop.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/u-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/u-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;On the first start, you’ll see &lt;em&gt;What’s new in Ubuntu&lt;/em&gt;. For the sake of curiosity, you can skim it through. Nothing quite important here.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/u-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;If you need to open a terminal for shell commanding, just hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;Alt&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/image/setup-vmware/u-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>iBug</name></author><category term="software" /><category term="linux" /><summary type="html">A quick step-by-step guide for those wanting to get in touch with Ubuntu in a virtual machine with minimal effort. For example, at the start of a semester of Operating System Concepts course.</summary></entry><entry><title type="html">Access your Raspberry Pi remotely with SSH</title><link href="https://ibugone.com/blog/2019/02/ssh-into-lan-computer/" rel="alternate" type="text/html" title="Access your Raspberry Pi remotely with SSH" /><published>2019-02-13T00:00:00+00:00</published><updated>2019-02-13T00:00:00+00:00</updated><id>https://ibugone.com/blog/2019/02/ssh-into-lan-computer</id><content type="html" xml:base="https://ibugone.com/blog/2019/02/ssh-into-lan-computer/">&lt;p&gt;Do you have a personal server at home but can’t access it from work or travel because your home doesn’t have a public IP? If so, then, this article is what you’re looking for.&lt;/p&gt;
        &lt;p&gt;In my case, I have a Raspberry Pi at my home, and I need some remote SSH from outside. And here’s how I made it work.&lt;/p&gt;
        &lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;
        &lt;p&gt;The server hardware, and a VPS with a public IP (for forwarding)&lt;/p&gt;
        &lt;h1 id=&quot;server-setup&quot;&gt;Server setup&lt;/h1&gt;
        &lt;p&gt;The software I use is &lt;a href=&quot;https://github.com/fatedier/frp&quot;&gt;frp&lt;/a&gt; (&lt;strong&gt;f&lt;/strong&gt;ast &lt;strong&gt;r&lt;/strong&gt;everse &lt;strong&gt;p&lt;/strong&gt;roxy). It’s written in Go and is designed specifically for port forwarding.&lt;/p&gt;
        &lt;p&gt;To setup the server, grab a release. I use 0.17.0 but you can always prefer the latest release.&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd
        &lt;/span&gt;wget https://github.com/fatedier/frp/releases/download/v0.17.0/frp_0.17.0_linux_amd64.tar.gz
        &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;zxvf frp_0.17.0_linux_amd64.tar.gz
        &lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;frp_0.17.0_linux_amd64 frp
        &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;frp
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Now open the configuration file &lt;code class=&quot;highlighter-rouge&quot;&gt;frps.ini&lt;/code&gt; with your favorite editor, Vim or Emacs, and put the following content in:&lt;/p&gt;
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[common]
        bind_port = 7000
        privilege_token = your_token
        dashboard_port = 8080
        dashboard_user = admin
        dashboard_pwd = password
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;In fact, you only need the top two configuration items, &lt;code class=&quot;highlighter-rouge&quot;&gt;bind_port&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;privilege_token&lt;/code&gt;. There’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;frps_full.ini&lt;/code&gt; in the package if you want to dig deeper, but I’ll keep things simple here.&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bind_port&lt;/code&gt;: The port for &lt;code class=&quot;highlighter-rouge&quot;&gt;frps&lt;/code&gt; (FRP Server) to listen for clients.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;privilege_token&lt;/code&gt;: A token for clients to authenticate. Think it as the password of your Wi-Fi AP.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;The following three items together provide a web dashboard for you to monitor status. They’re completely optional and you can leave them out if you don’t need the dashboard, or set it to whatever value you find convenient for you. Their names should be self-explanatory.&lt;/p&gt;
        &lt;p&gt;Now, start the server:&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./frps &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; ./frps.ini
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;If you see logs in your terminal output, then you’re good to go!&lt;/p&gt;
        &lt;p&gt;In most cases, it’d be convenient for the server software to start as a daemon, and automatically start at boot. The way I chose is creating a systemd system service, so it’s possible to use commands like &lt;code class=&quot;highlighter-rouge&quot;&gt;service frps start&lt;/code&gt; to manage it.&lt;/p&gt;
        &lt;p&gt;Create the file &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/systemd/system/frps.service&lt;/code&gt; with the following content:&lt;/p&gt;
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
        Description=FRP Server
        After=network.target
        StartLimitIntervalSec=0
        [Service]
        Type=simple
        Restart=always
        RestartSec=1
        User=ubuntu
        ExecStart=/home/ubuntu/frp/frps -c /home/ubuntu/frp/frps.ini
        [Install]
        WantedBy=multi-user.target
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Take note of Line 10 and Line 11. You need to set the user to your username and change the paths as your setup goes.&lt;/p&gt;
        &lt;p&gt;After creating the service registry file, you can start the FRP server with &lt;code class=&quot;highlighter-rouge&quot;&gt;service frps start&lt;/code&gt; and check its status with &lt;code class=&quot;highlighter-rouge&quot;&gt;service frps status&lt;/code&gt;.&lt;/p&gt;
        &lt;p&gt;For insurance, I added &lt;code class=&quot;highlighter-rouge&quot;&gt;service frps start&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/rc.local&lt;/code&gt; so it will start at boot.&lt;/p&gt;
        &lt;p&gt;Now the server side is fully set up and ready to use.&lt;/p&gt;
        &lt;h1 id=&quot;client-setup&quot;&gt;Client setup&lt;/h1&gt;
        &lt;p&gt;Setting up the client machine is pretty much symmetric to setting up the server and the procedure isn’t much different.&lt;/p&gt;
        &lt;p&gt;My client machine is a $35 Raspberry Pi running Raspbian, so I picked the ARM version of prebuilt binary.&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd
        &lt;/span&gt;wget https://github.com/fatedier/frp/releases/download/v0.17.0/frp_0.17.0_linux_arm.tar.gz
        &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;zxvf frp_0.17.0_linux_arm.tar.gz
        &lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;frp_0.17.0_linux_arm frp
        &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;frp
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;This time, open &lt;code class=&quot;highlighter-rouge&quot;&gt;frpc.ini&lt;/code&gt; with your favorite editor, and put the following content in:&lt;/p&gt;
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[common]
        server_addr = &amp;lt;your server ip&amp;gt;
        server_port = 7000
        privilege_token = your_token
        login_fail_exit = true
        [ssh]
        type = tcp
        local_ip = 127.0.0.1
        local_port = 22
        remote_port = 8022
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Put the IP address of your server in &lt;code class=&quot;highlighter-rouge&quot;&gt;server_addr&lt;/code&gt;, and your privilege token in the configuration file, then it’s set. You may need to change &lt;code class=&quot;highlighter-rouge&quot;&gt;remote_port&lt;/code&gt; to another value if 8022 is occupied by another program on your server.&lt;/p&gt;
        &lt;p&gt;Similar to the server software, I created another systemd service for the client software. Here’s what I have in my &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/systemd/system/frpc.service&lt;/code&gt;:&lt;/p&gt;
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
        Description=FRP Client
        After=network.target
        StartLimitIntervalSec=0
        [Service]
        Type=simple
        Restart=always
        RestartSec=1
        User=pi
        ExecStart=/home/pi/frp/frpc -c /home/pi/frp/frpc.ini
        [Install]
        WantedBy=multi-user.target
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;That’s pretty much identical to the server service, no?&lt;/p&gt;
        &lt;p&gt;The last thing is to put &lt;code class=&quot;highlighter-rouge&quot;&gt;service frpc start&lt;/code&gt; in an appropriate place in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/rc.local&lt;/code&gt; so the FRP client starts at boot.&lt;/p&gt;
        &lt;p&gt;Now that both sides are set, let’s try it out.&lt;/p&gt;
        &lt;h1 id=&quot;running-ssh-remotely&quot;&gt;Running SSH remotely&lt;/h1&gt;
        &lt;p&gt;You can SSH into your Raspberry Pi as usual, just remember to change the host name to your VPS, and specify the port as set during client setup.&lt;/p&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh pi@&amp;lt;your server ip&amp;gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8022
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;See the shell popping up from your RPi? Congratulations! You’re good to go.&lt;/p&gt;
        &lt;p&gt;For convenience, you can add the remote SSH configuration to your local SSH config file &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt;, so you can access with ease in the future.&lt;/p&gt;
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host pi-remote
        HostName &amp;lt;your server ip&amp;gt;
        Port 8022
        User pi
        PubKeyAuthentication yes
        PasswordAuthentication yes
        IdentityFile ~/.ssh/id_rsa
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;And then, you can SSH into your Raspberry Pi remotely with &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh pi-remote&lt;/code&gt;, and let SSH handle the rest.&lt;/p&gt;</content><author><name>iBug</name></author><category term="linux" /><category term="networking" /><summary type="html">Do you have a personal server at home but can’t access it from work or travel because your home doesn’t have a public IP? If so, then, this article is what you’re looking for.</summary></entry><entry><title type="html">Programming the On-Board SPI Flash of Digilent Nexys4 DDR</title><link href="https://ibugone.com/blog/2018/11/program-nexys4-ddr-with-storage/" rel="alternate" type="text/html" title="Programming the On-Board SPI Flash of Digilent Nexys4 DDR" /><published>2018-11-16T00:00:00+00:00</published><updated>2018-11-16T00:00:00+00:00</updated><id>https://ibugone.com/blog/2018/11/program-nexys4-ddr-with-storage</id><content type="html" xml:base="https://ibugone.com/blog/2018/11/program-nexys4-ddr-with-storage/">&lt;p&gt;This semester I have the course “Experiments of Digital Circuits”, the content of which is designing digital circuits using Vivado software, and writing Verilog code. Most of the lab papers require generating bitstream for the project and downloading it to Nexys4 DDR board to verify the functionality. Most of the times we just sit in front of the computer, with the board plugged in, and downloading the bitstream.&lt;/p&gt;
        &lt;p&gt;The downloaded bitstream is volatile, so whenever the board loses its power, or the “PROG” button is pressed, the program is lost and instead, the out-of-box demo program is loaded from the SPI flash.&lt;/p&gt;
        &lt;p&gt;&lt;a href=&quot;https://reference.digilentinc.com/learn/programmable-logic/tutorials/nexys-4-ddr-programming-guide/start#programming_the_nexys4-ddr_using_quad_spi&quot;&gt;Here&lt;/a&gt; is Digilent’s tutorial about how to program the SPI flash (i.e. replacing the OOB demo program).&lt;/p&gt;
        &lt;!--
        For an easier guide, here's how I did it:
        TBA
        --&gt;</content><author><name>iBug</name></author><category term="development" /><category term="study-notes" /><summary type="html">This semester I have the course “Experiments of Digital Circuits”, the content of which is designing digital circuits using Vivado software, and writing Verilog code. Most of the lab papers require generating bitstream for the project and downloading it to Nexys4 DDR board to verify the functionality. Most of the times we just sit in front of the computer, with the board plugged in, and downloading the bitstream.</summary></entry></feed>