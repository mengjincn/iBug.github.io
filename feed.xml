<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://ibugone.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ibugone.com/" rel="alternate" type="text/html" /><updated>2019-12-06T19:03:35+00:00</updated><id>https://ibugone.com/feed.xml</id><title type="html">iBug One</title><subtitle>The little personal site for iBug</subtitle><author><name>iBug</name></author><entry><title type="html">How to change email of your Nvidia account</title><link href="https://ibugone.com/blog/2019/11/change-nvidia-account-email/" rel="alternate" type="text/html" title="How to change email of your Nvidia account" /><published>2019-11-22T00:00:00+00:00</published><updated>2019-11-22T14:14:07+00:00</updated><id>https://ibugone.com/blog/2019/11/change-nvidia-account-email</id><content type="html" xml:base="https://ibugone.com/blog/2019/11/change-nvidia-account-email/">&lt;p&gt;I recently retired a few old email addresses, and am currently going in a row to change email for accounts associated with those emails. Everything else went smoothly, with my Nvidia account being an exception - There wasn’t an option to change it!&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/nv-account/main-page.png&quot; alt=&quot;no change option?!?&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;My first idea was to Google for solutions, and the first few results were on the GeForce forum saying you need to contact supprt. I did so, and ended up being told that emails can only be changed once per account, and there’s no more option to change it once more. What a terrible UX design!&lt;/p&gt;
				&lt;p&gt;I decided to give it a try to work around this. I first created another account and checked where the [Change Email] was located. Not any hard.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/nv-account/change-button.png&quot; alt=&quot;the change button&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;From a web developer’s perspective, it’s a must to open F12 Developer Tools and examine the button:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/nv-account/change-button-f12.png&quot; alt=&quot;the change button - examined&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Then I switched back to my old account and examined the same part of HTML:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/nv-account/change-button-disabled-f12.png&quot; alt=&quot;no change button - examined&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Now it seems clear to me: The last thing to do before succeeding is to purge that &lt;code class=&quot;highlighter-rouge&quot;&gt;display: none;&lt;/code&gt; from the button. Double-click on the text and you can delete it with ease:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/nv-account/removing-style.png&quot; alt=&quot;remove display none&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Voilà! You can now click it to change email for your Nvidia account. Why on earth did they decide that email can only be changed once per account? It sucks!&lt;/p&gt;</content><author><name>iBug</name></author><category term="lifehack" /><summary type="html">I recently retired a few old email addresses, and am currently going in a row to change email for accounts associated with those emails. Everything else went smoothly, with my Nvidia account being an exception - There wasn’t an option to change it!</summary></entry><entry><title type="html">Make your GitHub Pages website faster with Cloudflare</title><link href="https://ibugone.com/blog/2019/11/optimize-github-pages-with-cloudflare/" rel="alternate" type="text/html" title="Make your GitHub Pages website faster with Cloudflare" /><published>2019-11-11T00:00:00+00:00</published><updated>2019-11-29T23:23:21+00:00</updated><id>https://ibugone.com/blog/2019/11/optimize-github-pages-with-cloudflare</id><content type="html" xml:base="https://ibugone.com/blog/2019/11/optimize-github-pages-with-cloudflare/">&lt;p&gt;This September I employed Cloudflare to optimize my website (&lt;a href=&quot;https://ibugone.com&quot;&gt;https://ibugone.com&lt;/a&gt;) in various aspects. It turned out to be a brilliant move and Cloudflare has proved to be a great service to have.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/homepage.jpg&quot; alt=&quot;Landing page of my website&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;/h2&gt;
				&lt;h3 id=&quot;faster-site-loading&quot;&gt;Faster site loading&lt;/h3&gt;
				&lt;p&gt;While I haven’t made strict benchmarks, people all over the world have reported that my website loads faster and smoother than before.&lt;/p&gt;
				&lt;p&gt;My website is a Jekyll-generated static site, hosted with &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. Currently (August 2019) GitHub provides 4 IPs that are actually behind Fastly CDN, making all GitHub Pages website rather fast already given Fastly’s global point of presence (PoP).&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 id=&quot;did-you-know&quot;&gt;Did you know&lt;/h4&gt;
				&lt;p&gt;You can examine the &lt;code class=&quot;highlighter-rouge&quot;&gt;X-Served-By&lt;/code&gt; header of the response from GitHub Pages servers to see which edge location your website is served from. For example:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; https://ibug.github.io/ &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Host: ibugone.com'&lt;/span&gt;
				...
				X-Served-By: cache-tyo19946-TYO
				...
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
				&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;TYO&lt;/code&gt; key indicates that my request went through Fastly’s Tokyo endpoint.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;Interestingly, the version of Fastly CDN uses the same technology as Cloudflare that I’m introducing below, which is &lt;a href=&quot;https://en.wikipedia.org/wiki/Anycast&quot;&gt;Anycast&lt;/a&gt;. What makes Cloudflare stand out is &lt;a href=&quot;https://www.codeinwp.com/blog/maxcdn-vs-cloudflare-vs-cloudfront-vs-akamai-edge-vs-fastly/#locations&quot;&gt;its global points of presence&lt;/a&gt; - virtually everywhere and goes behind only Akamai.&lt;/p&gt;
				&lt;h3 id=&quot;http-settings&quot;&gt;Custom behavior of HTTP response&lt;/h3&gt;
				&lt;p&gt;If you host your site on vanilla GitHub Pages, there’s not much you can do with HTTP response, like cache control and redirects. By default, GitHub Pages sets all expiration times for static assets to 10 minutes, but for sure you may want certain files to be cached for longer. Like me, I would like all images on my site to be cached for as long as possible, which is not possible with GitHub Pages on its own.&lt;/p&gt;
				&lt;p&gt;Cloudflare offers a variety of tweaks via Page Rules, so I could achieve my goal with a Page Rule setting:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/cloudflare/image-caching.png&quot; alt=&quot;My Cloudflare setting for image caching&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Instead of fetching an identical copy from GitHub Pages’ origin server, browsers will now cache all image on my website for a year, and Cloudflare’s CDN servers will cache my images for up to 30 days. Other available options include redirection and performance optimizations, and it’s up to you to explore them all.&lt;/p&gt;
				&lt;h3 id=&quot;more-secure-https-settings&quot;&gt;More secure HTTPS settings&lt;/h3&gt;
				&lt;p&gt;Some time ago, GitHub Pages didn’t support HTTPS with custom domains, which was quite a downside for such a popular service. At that time, Cloudflare was almost the only option to add HTTPS support to your website. While now this is no longer the case, there’re still some weaknesses and limitations, for example the lack of support for HSTS and the occasional failure of renewing an SSL certificate. With Cloudflare you can add HSTS headers to all responses coming from your website, further improving security.&lt;/p&gt;
				&lt;h2 id=&quot;the-setup&quot;&gt;The setup&lt;/h2&gt;
				&lt;h3 id=&quot;get-your-custom-domain-onto-cloudflare&quot;&gt;Get your custom domain onto Cloudflare&lt;/h3&gt;
				&lt;p&gt;Besides CDN, Cloudflare is also a fantastic DNS provider. To get started with Cloudflare, you’ll first move your domain’s DNS to Cloudflare. &lt;a href=&quot;https://dash.cloudflare.com/sign-up&quot;&gt;Sign up&lt;/a&gt; if you don’t already have an account.&lt;/p&gt;
				&lt;p&gt;Next, you’ll be prompted for the domain you want to add to Cloudflare. Enter the domain and Cloudflare will perform a quick scan of all records, and you can manually review them and add missing records, if any.&lt;/p&gt;
				&lt;p&gt;To enable Cloudflare CDN for domains under which you run a website, click the grey cloud icon so it becomes orange. This means that website will be proxied and delivered via Cloudflare, and its DNS record will instead resolve to some of Cloudflare’s IPs.&lt;/p&gt;
				&lt;p&gt;That’s all, isn’t it simple? But wait, there’s more that Cloudflare provides, and you can now explore all of them and see which fits your needs.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/cloudflare/apps.png&quot; alt=&quot;Apps that Cloudflare provides&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;h3 id=&quot;using-page-rules&quot;&gt;Using Page Rules&lt;/h3&gt;
				&lt;p&gt;Let’s turn our focus onto the Page Rules app. With Page Rules you can configure Cloudflare behavior on specific “routes”, or URL patterns. One common use case is to create a permanent redirect from your &lt;code class=&quot;highlighter-rouge&quot;&gt;www&lt;/code&gt; domain to your apex domain, or in the reverse direction.&lt;/p&gt;
				&lt;p&gt;For example, if I want to create a permanent redirect from &lt;code class=&quot;highlighter-rouge&quot;&gt;www.ibugone.com&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;ibugone.com&lt;/code&gt;, I would create a Page Rule like this:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/cloudflare/page-rule-301.png&quot; alt=&quot;Page Rule for 301 redirection from www.ibugone.com to ibugone.com&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;And there’s an aggressive image caching setting &lt;a href=&quot;#http-settings&quot;&gt;described before&lt;/a&gt;. There are many Page Rule options for you to explore, and there are always one or more that fits your needs.&lt;/p&gt;
				&lt;h3 id=&quot;more-features&quot;&gt;Get the best out of Cloudflare&lt;/h3&gt;
				&lt;p&gt;For newer webmasters, you might want to ensure &lt;strong&gt;SSL / TLS&lt;/strong&gt; works as expected. The &lt;strong&gt;Full&lt;/strong&gt; mode makes Cloudflare fetch original content from your website via HTTPS without validating the certificate on your server. For GitHub Pages this is the option you generally want, as GitHub Pages presents its default certificate for &lt;code class=&quot;highlighter-rouge&quot;&gt;*.github.io&lt;/code&gt; if it doesn’t have a certificate for your domain. This is good enough for your website behind Cloudflare.&lt;/p&gt;
				&lt;p&gt;You can also enable better security by enabling latest security features in &lt;strong&gt;Edge Certificates&lt;/strong&gt; tab of the &lt;strong&gt;SSL / TLS&lt;/strong&gt; app, where you can set the minimum SSL version (TLS 1.2 recommended) and enable automatic HTTPS redirection. This will not only make your website more secure to visitors, but also give you a boost in SEO, as modern search engines favor HTTPS websites over HTTP ones. Though, you might not want to jump straight to HSTS before you’re absolutely ready (see &lt;a href=&quot;https://support.cloudflare.com/hc/en-us/articles/204183088-Understanding-HSTS-HTTP-Strict-Transport-Security-&quot;&gt;Cloudflare article&lt;/a&gt;).&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;p&gt;I have moved the entire domain &lt;code class=&quot;highlighter-rouge&quot;&gt;ibugone.com&lt;/code&gt; onto HSTS and get it preloaded because I’m confident I can handle it.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;You may also want to tune your website for better performance by changing the settings under the &lt;strong&gt;Speed&lt;/strong&gt; app, for example enabling HTTP/2 and auto minifying.&lt;/p&gt;
				&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;
				&lt;ul&gt;
				&lt;li&gt;Cloudflare has &lt;a href=&quot;https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/&quot;&gt;an official blog&lt;/a&gt; on introducing Cloudflare to GitHub Pages, and it’s actually a start-from-scratch tutorial for creating a static website and then deploying Cloudflare CDN over it.&lt;/li&gt;
				&lt;/ul&gt;</content><author><name>iBug</name></author><category term="github-pages" /><category term="cloudflare" /><summary type="html">This September I employed Cloudflare to optimize my website (https://ibugone.com) in various aspects. It turned out to be a brilliant move and Cloudflare has proved to be a great service to have.</summary></entry><entry><title type="html">Converting DFA to Regular Expression</title><link href="https://ibugone.com/blog/2019/09/convert-dfa-to-regex/" rel="alternate" type="text/html" title="Converting DFA to Regular Expression" /><published>2019-09-25T00:00:00+00:00</published><updated>2019-10-21T02:03:55+00:00</updated><id>https://ibugone.com/blog/2019/09/convert-dfa-to-regex</id><content type="html" xml:base="https://ibugone.com/blog/2019/09/convert-dfa-to-regex/">&lt;p&gt;This post originated from Lab 1 of course &lt;em&gt;Compilers: Principles&lt;/em&gt; that I’m currently taking, in which we were required to write a &lt;code class=&quot;highlighter-rouge&quot;&gt;flex&lt;/code&gt; program to parse a subset of the C language. The multiline comment &lt;code class=&quot;highlighter-rouge&quot;&gt;/* */&lt;/code&gt; was the most troublesome to handle for most of us (excluding me, for sure).&lt;/p&gt;
				&lt;h2 id=&quot;the-process&quot;&gt;The process&lt;/h2&gt;
				&lt;p&gt;I’ll assume you’ve already drawn a DFA for the multiline-comment structure, so here it is:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/dfa-comment.png&quot; alt=&quot;DFA for the multiline comment&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;We’re first going to turn it into “state transformation equations”, so it looks like this:&lt;/p&gt;
				&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = \texttt{/*} \mid A\texttt{[^*]} \mid B\texttt{[^*/]}
				\\
				B = A\texttt{*} \mid B\texttt{*}
				\\
				C = B\texttt{/}&lt;/script&gt;
				&lt;p&gt;The first step we’re taking is to realize that $A=S \mid Aa$ is easily found to be equivalent to $A = Sa^*$, where the superscript asterisk means “repeat 0 or more times”. So $B$ can be turned into&lt;/p&gt;
				&lt;script type=&quot;math/tex; mode=display&quot;&gt;B = A\texttt{**}^* = A\texttt{*}^+&lt;/script&gt;
				&lt;p&gt;Again, the superscript plus means “repeat 1 or more times” as the same in PCRE.&lt;/p&gt;
				&lt;p&gt;Now it’s time to substitute $B$ with its simplified expression:&lt;/p&gt;
				&lt;script type=&quot;math/tex; mode=display&quot;&gt;A =  \texttt{/*} \mid A\texttt{[^*]} \mid A\texttt{*}^+\texttt{[^*/]}
				\\
				C = A\texttt{*}^+\texttt{/}&lt;/script&gt;
				&lt;p&gt;Note that there’s a &lt;em&gt;distributive property&lt;/em&gt; here, which described using symbols, is that $Aa \mid Ab = A(a\mid b)$, so now we have&lt;/p&gt;
				&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = \texttt{/*} \mid A\ (\texttt{[^*]} \mid \texttt{*}^+\texttt{[^*/]})&lt;/script&gt;
				&lt;p&gt;Applying the first transformation $A = S \mid Aa = Sa^*$, we have&lt;/p&gt;
				&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = \texttt{/*}\ (\texttt{[^*]} \mid \texttt{*}^+\texttt{[^*/]})^*&lt;/script&gt;
				&lt;p&gt;Now there’s no recursion in the new “state transformation equation”, so we can substitute $A$ with this final expression and get the regular expression for $C$, the result we want:&lt;/p&gt;
				&lt;script type=&quot;math/tex; mode=display&quot;&gt;C = A\texttt{*}^+\texttt{/} =
				\texttt{/*}\ (\texttt{[^*]} \mid \texttt{*}^+\texttt{[^*/]})^*\ \texttt{*}^+\texttt{/}&lt;/script&gt;
				&lt;p&gt;Converting the above regular expression to code, we now have&lt;/p&gt;
				&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C = \/\*([^*]|\*+[^*/])*\*+\/
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;try-it-online-with-regex101&quot;&gt;&lt;a href=&quot;https://regex101.com/r/qAog6Z/1&quot;&gt;Try it online with RegEx101!&lt;/a&gt;&lt;/h3&gt;
				&lt;hr /&gt;
				&lt;p&gt;Now can you imagine how to use regular expressions to match multiples of 3 (base 10)? Yes, it’s entirely possible. See &lt;a href=&quot;https://www.quaxio.com/triple/&quot;&gt;this fantastic article &lt;i class=&quot;fa fas fa-xs fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt; for details, which uses essentially the same techniques to convert a DFA (or a finite-state machine) to a regular expression that does the job.&lt;/p&gt;</content><author><name>iBug</name></author><category term="study-notes" /><category term="regular-expression" /><summary type="html">This post originated from Lab 1 of course Compilers: Principles that I’m currently taking, in which we were required to write a flex program to parse a subset of the C language. The multiline comment /* */ was the most troublesome to handle for most of us (excluding me, for sure).</summary></entry><entry><title type="html">Raspberry Pi 4 B Review and Benchmark - What’s improved over Pi 3 B+</title><link href="https://ibugone.com/blog/2019/09/raspberry-pi-4-review-benchmark/" rel="alternate" type="text/html" title="Raspberry Pi 4 B Review and Benchmark - What's improved over Pi 3 B+" /><published>2019-09-10T00:00:00+00:00</published><updated>2019-09-22T17:37:11+00:00</updated><id>https://ibugone.com/blog/2019/09/raspberry-pi-4-review-benchmark</id><content type="html" xml:base="https://ibugone.com/blog/2019/09/raspberry-pi-4-review-benchmark/">&lt;p&gt;Lately I’ve finally received my Raspberry Pi 4 (4 GB model), and I couldn’t resist the temptation to give it a try and see all the improvements that’s been reported for months.&lt;/p&gt;
				&lt;p&gt;As I’ve got one with my Pi 3 B+, I also ordered an aluminum “case” that can ease the ache of heating. One major difference is that the new cooling case is armed with two little fans, which is a rather huge boost in speed of heat dissipation.&lt;/p&gt;
				&lt;p&gt;So let’s take a look at the new Pi 4.&lt;/p&gt;
				&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
				&lt;figure class=&quot;third &quot;&gt;
				&lt;a href=&quot;/image/rpi4/box.jpg&quot; title=&quot;Package of Raspberry Pi 4&quot;&gt;
				&lt;img src=&quot;/image/rpi4/box.jpg&quot; alt=&quot;Package of Raspberry Pi 4&quot; /&gt;
				&lt;/a&gt;
				&lt;a href=&quot;/image/rpi4/box-bottom.jpg&quot; title=&quot;Bottom of the package&quot;&gt;
				&lt;img src=&quot;/image/rpi4/box-bottom.jpg&quot; alt=&quot;Bottom of the package&quot; /&gt;
				&lt;/a&gt;
				&lt;a href=&quot;/image/rpi4/box-open.jpg&quot; title=&quot;Opening the package&quot;&gt;
				&lt;img src=&quot;/image/rpi4/box-open.jpg&quot; alt=&quot;The package is open&quot; /&gt;
				&lt;/a&gt;
				&lt;/figure&gt;
				&lt;p&gt;The new Pi 4 is wrapped in a box similar to that of Pi 3 B+, with a white outline of the Pi 4 in 1:1 scale on a red background. Unlike Pi 3 B, neither 3 B+ and 4 has a electrostatic-proof bag around them in the box. This isn’t anything of a problem, though.&lt;/p&gt;
				&lt;p&gt;The new Pi 4 has a similar form factor as its predecessors, with a few noticeable differences, among which the USB 3.0 ports is the first to spot, as they’re marked blue. As you inspect the USB 3.0 ports, you probably have noticed that the Ethernet port changed its position as well, which is likely due to the upgrade to a true gigabit port.&lt;/p&gt;
				&lt;figure class=&quot;third &quot;&gt;
				&lt;a href=&quot;/image/rpi4/overview.jpg&quot; title=&quot;Overview of Raspberry Pi 4&quot;&gt;
				&lt;img src=&quot;/image/rpi4/overview.jpg&quot; alt=&quot;Overview of Raspberry Pi 4&quot; /&gt;
				&lt;/a&gt;
				&lt;a href=&quot;/image/rpi4/overview-usb.jpg&quot; title=&quot;The USB ports and the Ethernet port&quot;&gt;
				&lt;img src=&quot;/image/rpi4/overview-usb.jpg&quot; alt=&quot;Raspberry Pi 4 on top of the box, showing the USB ports and the Ethernet port&quot; /&gt;
				&lt;/a&gt;
				&lt;a href=&quot;/image/rpi4/overview-side-ports.jpg&quot; title=&quot;The USB Type-C port and the HDMI ports&quot;&gt;
				&lt;img src=&quot;/image/rpi4/overview-side-ports.jpg&quot; alt=&quot;Focusing on the USB Type-C port and the HDMI ports&quot; /&gt;
				&lt;/a&gt;
				&lt;/figure&gt;
				&lt;p&gt;Some smaller ports, namely the power supply and the video output, have changed as well. The Pi 4 now requires a Type-C cable for power, and the requirement has raised to 5V / 3A. It’s unknown whether the Pi 4 accepts advanced charging protocols like Qualcomm Quick Charge or USB PD, but user reports goes against such assumptions. The standard-size HDMI on older models has also been replaced by micro-HDMI port, pardon, &lt;em&gt;ports&lt;/em&gt;. Yes, there are two, and both of them supports 4K @ 60 fps output, at the same time. While I’m planning to use this Pi as a headless server, people who use it as a desktop may find it favorable.&lt;/p&gt;
				&lt;p&gt;The RAM chip has also been moved from the back of the board to the front, alongside the SoC, which has an identical look as that on Pi 3 B+, but with a completely different heart under the skins. The Wi-Fi case and antenna remain unchanged, and there’s an extra chip in front of the gigabit ethernet port.&lt;/p&gt;
				&lt;h2 id=&quot;specs&quot;&gt;Specs&lt;/h2&gt;
				&lt;p&gt;It’s an exciting news that the new Pi 4 brings a wire range of solid and concrete upgrades, namely&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Broadcom BCM2711 SoC, quad-core Cortex-A72 CPU @ 1.5 GHz&lt;/li&gt;
				&lt;li&gt;Comes in variations of 1 GB, 2 GB and &lt;strong&gt;4 GB RAM&lt;/strong&gt; (reviewed)&lt;/li&gt;
				&lt;li&gt;Broadcom VideoCore VI GPU&lt;/li&gt;
				&lt;li&gt;True Gigabit ethernet port&lt;/li&gt;
				&lt;li&gt;Bluetooth 5.0&lt;/li&gt;
				&lt;li&gt;Native USB 3.0 interface, with two Type-A ports&lt;/li&gt;
				&lt;li&gt;Dual HDMI port, supporting 4K @ 60 fps simultaneously&lt;/li&gt;
				&lt;li&gt;Faster microSD card slot&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;In later benchmarks, you’ll see what these upgrades really mean. Here’s a table for comparison:&lt;/p&gt;
				&lt;table&gt;
				&lt;thead&gt;
				&lt;tr&gt;
				&lt;th&gt;Item&lt;/th&gt;
				&lt;th style=&quot;text-align: center&quot;&gt;Pi 3 B&lt;/th&gt;
				&lt;th style=&quot;text-align: center&quot;&gt;Pi 3 B+&lt;/th&gt;
				&lt;th style=&quot;text-align: center&quot;&gt;Pi 4&lt;/th&gt;
				&lt;/tr&gt;
				&lt;/thead&gt;
				&lt;tbody&gt;
				&lt;tr&gt;
				&lt;td&gt;CPU&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;Quad-core&lt;br /&gt;Cortex-A53 @ 1.20 GHz&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;Quad-core&lt;br /&gt;Cortex-A53 @ 1.40 GHz&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;Quad-core&lt;br /&gt;Cortex-A72 @ 1.50 GHz&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
				&lt;td&gt;RAM&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;1 GB DDR2&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;1 GB DDR2&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;1 / 2 / &lt;strong&gt;4&lt;/strong&gt; GB DDR4&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
				&lt;td&gt;GPU&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;VideoCore IV&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;VideoCore IV&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;VideoCore VI&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
				&lt;td&gt;Ethernet&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;100 Mbps&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;300 Mbps effective&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;1 Gbps&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
				&lt;td&gt;Wi-Fi&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;2.4 GHz&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;2.4 GHz / 5 GHz&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;2.4 GHz / 5 GHz&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
				&lt;td&gt;Bluetooth&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;4.0&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;4.2&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;5.0&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
				&lt;td&gt;USB&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;4 * USB 2.0&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;4 * USB 2.0&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;2 * USB 2.0 + 2 * USB 3.0&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
				&lt;td&gt;Price&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;$35&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;$35&lt;/td&gt;
				&lt;td style=&quot;text-align: center&quot;&gt;$35 / $45 / &lt;strong&gt;$55&lt;/strong&gt;&lt;br /&gt;Depending on RAM&lt;/td&gt;
				&lt;/tr&gt;
				&lt;/tbody&gt;
				&lt;/table&gt;
				&lt;p&gt;My Pi 3 B was sold soon after I got a 3 B+, so unfortunately there isn’t one participating this review.&lt;/p&gt;
				&lt;h2 id=&quot;setup&quot;&gt;My setup&lt;/h2&gt;
				&lt;figure class=&quot; &quot;&gt;
				&lt;a href=&quot;/image/rpi4/rpis-powered.jpg&quot; title=&quot;Both Raspberry Pis, powered through their GPIO pins&quot;&gt;
				&lt;img src=&quot;/image/rpi4/rpis-powered.jpg&quot; alt=&quot;Both Raspberry Pis, powered through their GPIO pins&quot; /&gt;
				&lt;/a&gt;
				&lt;/figure&gt;
				&lt;p&gt;As seen above, both Pis are set up as headless servers, with only power and ethernet connected. You’re probably wondering why they look so strange, which is because my laboratory provides a lot of these power supplies rated 5V / 6A, so I just took one and use it to power both Pis through GPIO. The two Pis are rated 5V / 2.5A and 5V / 3A each (peak), which this single power supply should be able to handle without difficulty.&lt;/p&gt;
				&lt;blockquote&gt;
				&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Do NOT power your Raspberry Pi through GPIO unless you have stable power supply. Phone chargers aren’t &lt;em&gt;power supplies&lt;/em&gt; and should not be used to provide power in this way.&lt;/p&gt;
				&lt;/blockquote&gt;
				&lt;h2 id=&quot;benchmarking&quot;&gt;Benchmarking&lt;/h2&gt;
				&lt;p&gt;The Pis have static IP assigned and all operation is done over SSH. Operating system is latest Raspbian Buster Lite.&lt;/p&gt;
				&lt;h3 id=&quot;cpu&quot;&gt;1. SysBench CPU test&lt;/h3&gt;
				&lt;p&gt;SysBench is a benchmark suite that allows you to quickly get an impression of system performance. Here I use SysBench for CPU and Memory tests.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sysbench &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cpu run
				sysbench &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cpu &lt;span class=&quot;nt&quot;&gt;--num-threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4 run
				sysbench &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cpu &lt;span class=&quot;nt&quot;&gt;--num-threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8 run
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;&lt;img src=&quot;/image/rpi4/chart/sysbench-cpu.png&quot; alt=&quot;SysBench CPU test result chart&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;As shown in the chart, the Pi 4 has a decent improvement over Pi 3 B+ in terms of CPU performance, taking 19.3% less time to complete the SysBench test in all scenarios.&lt;/p&gt;
				&lt;h3 id=&quot;2-sysbench-memory-test&quot;&gt;2. SysBench memory test&lt;/h3&gt;
				&lt;p&gt;The memory test is a little bit complicated, and some unexpected results uncovers.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sysbench &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;memory &lt;span class=&quot;nt&quot;&gt;--memory-block-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1K &lt;span class=&quot;nt&quot;&gt;--memory-total-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2G &lt;span class=&quot;nt&quot;&gt;--memory-oper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;run
				sysbench &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;memory &lt;span class=&quot;nt&quot;&gt;--memory-block-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1K &lt;span class=&quot;nt&quot;&gt;--memory-total-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2G &lt;span class=&quot;nt&quot;&gt;--memory-oper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;write run
				sysbench &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;memory &lt;span class=&quot;nt&quot;&gt;--memory-block-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1K &lt;span class=&quot;nt&quot;&gt;--memory-total-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2G &lt;span class=&quot;nt&quot;&gt;--memory-oper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--num-threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4 run
				sysbench &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;memory &lt;span class=&quot;nt&quot;&gt;--memory-block-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1K &lt;span class=&quot;nt&quot;&gt;--memory-total-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2G &lt;span class=&quot;nt&quot;&gt;--memory-oper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;write &lt;span class=&quot;nt&quot;&gt;--num-threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4 run
				sysbench &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;memory &lt;span class=&quot;nt&quot;&gt;--memory-block-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1M &lt;span class=&quot;nt&quot;&gt;--memory-total-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2G &lt;span class=&quot;nt&quot;&gt;--memory-oper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;write &lt;span class=&quot;nt&quot;&gt;--num-threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4 run
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;&lt;img src=&quot;/image/rpi4/chart/sysbench-memory.png&quot; alt=&quot;SysBench memory test result chart&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;It’s very surprising to see the new DDR4 performs worse than the decades-old DDR2 memory, and even astonishing to see that multithreading makes the gap bigger. The only thing reasonable to me is that when a single block goes to 1 MiB, the Pi 4 outperforms the Pi 3 B+ slightly.&lt;/p&gt;
				&lt;p&gt;There’s one interesting thing, though, that why I didn’t include a “1 MiB Read MT” column. SysBench reported a read speed of over 200 GB/s on both boards, and the results can sometimes go up to 500 GB/s, which is ridiculous to be taken seriously, so I just dropped that result.&lt;/p&gt;
				&lt;h3 id=&quot;3-fio-microsd-card-speed-test&quot;&gt;3. FIO microSD card speed test&lt;/h3&gt;
				&lt;p&gt;This test may depend on the microSD card, so I took out my (known) fastest cards for the Pis, the Lexar 667x 128 GB microSD card, which looks like below:&lt;/p&gt;
				&lt;center&gt;
				&lt;img src=&quot;/image/rpi4/microsd-card.jpg&quot; alt=&quot;The microSD card&quot; width=&quot;30%&quot; /&gt;
				&lt;/center&gt;
				&lt;p&gt;I use &lt;code class=&quot;highlighter-rouge&quot;&gt;fio&lt;/code&gt; for the disk (microSD card) I/O performance testing tool. Because I’m familiar with Crystal DiskMark, I tuned the command-line options of &lt;code class=&quot;highlighter-rouge&quot;&gt;fio&lt;/code&gt; to match the specs of CDM.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fio &lt;span class=&quot;nt&quot;&gt;--loops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5 &lt;span class=&quot;nt&quot;&gt;--size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;500m &lt;span class=&quot;nt&quot;&gt;--filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fiotest.tmp &lt;span class=&quot;nt&quot;&gt;--stonewall&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--ioengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;libaio &lt;span class=&quot;nt&quot;&gt;--direct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;SeqRead &lt;span class=&quot;nt&quot;&gt;--bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1m &lt;span class=&quot;nt&quot;&gt;--rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;SeqWrite &lt;span class=&quot;nt&quot;&gt;--bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1m &lt;span class=&quot;nt&quot;&gt;--rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;write &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;512Kread &lt;span class=&quot;nt&quot;&gt;--bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;512k &lt;span class=&quot;nt&quot;&gt;--rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;randread &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;512Kwrite &lt;span class=&quot;nt&quot;&gt;--bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;512k &lt;span class=&quot;nt&quot;&gt;--rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;randwrite &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4KQD32read &lt;span class=&quot;nt&quot;&gt;--bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4k &lt;span class=&quot;nt&quot;&gt;--iodepth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32 &lt;span class=&quot;nt&quot;&gt;--rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;randread &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4KQD32write &lt;span class=&quot;nt&quot;&gt;--bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4k &lt;span class=&quot;nt&quot;&gt;--iodepth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32 &lt;span class=&quot;nt&quot;&gt;--rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;randwrite &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4Kread &lt;span class=&quot;nt&quot;&gt;--bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4k &lt;span class=&quot;nt&quot;&gt;--rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;randread &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4Kwrite &lt;span class=&quot;nt&quot;&gt;--bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4k &lt;span class=&quot;nt&quot;&gt;--rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;randwrite
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;&lt;img src=&quot;/image/rpi4/chart/fio-microsd.png&quot; alt=&quot;FIO microSD test result chart&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;From the results we can see a huge boost on Pi 4, running 50% faster than its predecessor in many tests. This is probably the most useful upgrades on Pi 4, as the performance has always been constrained by the slow disk I/O.&lt;/p&gt;
				&lt;h3 id=&quot;4-p7zip-benchmark&quot;&gt;4. p7zip benchmark&lt;/h3&gt;
				&lt;p&gt;7-Zip has a built-in benchmarking tool, and so does its POSIX port &lt;code class=&quot;highlighter-rouge&quot;&gt;p7zip&lt;/code&gt;. I use this tool to test the compression and decompression performance on the Pis.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7zr b &lt;span class=&quot;nt&quot;&gt;-mmt1&lt;/span&gt;
				7zr b
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;&lt;img src=&quot;/image/rpi4/chart/p7zip.png&quot; alt=&quot;p7zip benchmark result chart&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;As &lt;a href=&quot;https://sevenzip.osdn.jp/chm/cmdline/commands/bench.htm&quot;&gt;the help article&lt;/a&gt; says, compression depends more on the throughput and latency of memory, which is likely the reason that the gap between the two Pis is bigger in compression test. After all, there’s a boost of 1/3 in the p7zip test.&lt;/p&gt;
				&lt;h3 id=&quot;5-openssl-speed-test&quot;&gt;5. OpenSSL speed test&lt;/h3&gt;
				&lt;p&gt;OpenSSL is the most prevalent crypto library, and it also has built-in speed test as well. The result is the fastest speed among all block sizes, which is always 16,384 bytes in all 4 tests.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl speed &lt;span class=&quot;nt&quot;&gt;-evp&lt;/span&gt; aes-256-cbc
				openssl speed &lt;span class=&quot;nt&quot;&gt;-evp&lt;/span&gt; aes-256-gcm
				openssl speed &lt;span class=&quot;nt&quot;&gt;-evp&lt;/span&gt; sha1
				openssl speed &lt;span class=&quot;nt&quot;&gt;-evp&lt;/span&gt; sha256
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;&lt;img src=&quot;/image/rpi4/chart/openssl.png&quot; alt=&quot;OpenSSL speed result chart&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;h3 id=&quot;6-network-speed-test&quot;&gt;6. Network speed test&lt;/h3&gt;
				&lt;p&gt;The Pi 4 upgraded the 300 Mbps Ethernet port to a true 1 Gbps port, which is a great benefit if you want to use it as an offline downloader or an NAS. Here I ran two tests about the network connectivity.&lt;/p&gt;
				&lt;h4 id=&quot;61-curl-file-download-test&quot;&gt;6.1 cURL file download test&lt;/h4&gt;
				&lt;p&gt;This one is simple: Use cURL to download a file from a LAN machine and see the speed.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/rpi4/chart/cURL.png&quot; alt=&quot;cURL download speed chart&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;The result isn’t as expected: The Pi 4 failed to run at its true Gbps speed, while my x86 Linux box right beside it made it.&lt;/p&gt;
				&lt;h4 id=&quot;62-nginx-performance-test&quot;&gt;6.2 NGINX performance test&lt;/h4&gt;
				&lt;p&gt;Another common use case is to serve web content with NGINX (sorry, no Apache). I installed NGINX on both Pis, set &lt;code class=&quot;highlighter-rouge&quot;&gt;access_log off&lt;/code&gt; and use Siege 4.0.4 on my x86 box to benchmark the servers.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;siege &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 10 &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; 1000 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;host]
				siege &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 25 &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; 400 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;host]
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;&lt;img src=&quot;/image/rpi4/chart/nginx.png&quot; alt=&quot;Siege NGINX result chart&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;With the increase in both CPU performance and network speed, the new Pi 4 runs almost twice as efficient as the Pi 3 B+. Surely a good news for the websiters.&lt;/p&gt;
				&lt;h3 id=&quot;7-application-performance&quot;&gt;7. Application performance&lt;/h3&gt;
				&lt;p&gt;I picked two of my favorite platforms, Python and Ruby (I’m not familiar with Node) for this test.&lt;/p&gt;
				&lt;p&gt;The Python test involves a stupid script taken from &lt;a href=&quot;&quot;&gt;this Stack Overflow answer&lt;/a&gt;, and the time is taken as the result.&lt;/p&gt;
				&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Stupid test function&quot;&quot;&quot;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;timeit&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test()&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;from __main__ import test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The Ruby test is simpler: Using Jekyll to build this site and see the time taken.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/rpi4/chart/python-ruby.png&quot; alt=&quot;Application test result chart&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;The Ruby test is more balanced than the Python test, which is pure computational performance. As a result, the performance gap is smaller in the Ruby test.&lt;/p&gt;
				&lt;p&gt;Wait, that doesn’t mean the Pi 4 would be a good platform for your bigger Python or Ruby project. The same tests run &lt;strong&gt;10x faster&lt;/strong&gt; on my x86 Linux box (i7-8850H, 32 GB DDR4, NVMe SSD), running the Python script in 5 seconds and building my Jekyll site in 4 seconds. Well, you can’t expect a beefy computer from only a board costing $55, n’est-ce pas?&lt;/p&gt;
				&lt;h3 id=&quot;8-usb-io-performance&quot;&gt;8. USB I/O performance&lt;/h3&gt;
				&lt;p&gt;I took out my USB 3.1 SSD (assembled with a LiteOn L9M 512 GB and an enclosure case with VL716 SATA-to-USB adapter chip). However, as soon as I plug the SSD into either Pi, it powers down immediately. This later turns out to be the issue with power supply (GPIO pins can’t pass enough power), so I came back the day after and started the Pis with power supply from the Micro USB / Type-C port. This time the Pi 3 B+ works correctly and ran through the &lt;code class=&quot;highlighter-rouge&quot;&gt;fio&lt;/code&gt; test. The Pi 4, however, drops the SSD during the test due to power supply, &lt;em&gt;again&lt;/em&gt;. I ended up powering the Pi through &lt;strong&gt;both&lt;/strong&gt; Type-C and GPIO only to allow it to run the test on the SSD without power failure.&lt;/p&gt;
				&lt;p&gt;The power is a real issue this time, but putting it aside, let’s look at the results:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fio &lt;span class=&quot;nt&quot;&gt;--loops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5 &lt;span class=&quot;nt&quot;&gt;--size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1g &lt;span class=&quot;nt&quot;&gt;--filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fiotest.tmp &lt;span class=&quot;nt&quot;&gt;--stonewall&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--ioengine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;libaio &lt;span class=&quot;nt&quot;&gt;--direct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;SeqRead &lt;span class=&quot;nt&quot;&gt;--bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1m &lt;span class=&quot;nt&quot;&gt;--rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;SeqWrite &lt;span class=&quot;nt&quot;&gt;--bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1m &lt;span class=&quot;nt&quot;&gt;--rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;write
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;&lt;img src=&quot;/image/rpi4/chart/fio-usb.png&quot; alt=&quot;FIO USB test result chart&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;That’s impressive! The ever-upgraded USB 3.0 ports, even if not running at its top speed, is an exceptional lead over previous generations of Raspberry Pi. But before enjoying the turbo speed of the new USB ports, let’s emphasize again that you need to take special care for your USB peripherals, especially those requiring just a little bit more power than others, like hard drives and SSDs. Rest assured, if the power issue is properly taken care of, utilizing these two ultra-speed USB ports would be a great benefit to your Pi-based NAS setup or whatever storage extension.&lt;/p&gt;
				&lt;h2 id=&quot;bottom-line&quot;&gt;Bottom line&lt;/h2&gt;
				&lt;p&gt;Seen the marginal improvement from Raspberry Pi 3 B to 3 B+, the new Pi 4 is probably a banquet to most Pi enthusiasts. With the price remaining the same, the Pi 4 is a must-buy for everyone, even if you already have a Pi 3 B+. While there are downsides in power supply and cooling, they aren’t much of a deal if you don’t attach too many peripherals or put the Pi at constant high load.&lt;/p&gt;</content><author><name>iBug</name></author><category term="raspberry-pi" /><category term="review" /><category term="benchmark" /><summary type="html">Lately I’ve finally received my Raspberry Pi 4 (4 GB model), and I couldn’t resist the temptation to give it a try and see all the improvements that’s been reported for months.</summary></entry><entry><title type="html">My speech at Microsoft Summer Camp 2019</title><link href="https://ibugone.com/blog/2019/08/speech-at-msc-2019/" rel="alternate" type="text/html" title="My speech at Microsoft Summer Camp 2019" /><published>2019-08-14T00:00:00+00:00</published><updated>2019-11-18T20:08:54+00:00</updated><id>https://ibugone.com/blog/2019/08/speech-at-msc-2019</id><content type="html" xml:base="https://ibugone.com/blog/2019/08/speech-at-msc-2019/">&lt;p&gt;&lt;em&gt;This is a translated version from &lt;a href=&quot;/p/24-cn&quot;&gt;the Chinese (original) script&lt;/a&gt;. The slideshow can be acquired &lt;a href=&quot;https://github.com/iBug/Archive/releases/download/Release/iBug-Handout.pdf&quot;&gt;here&lt;/a&gt;. For comments, please head to &lt;a href=&quot;/p/24&quot;&gt;the Chinese version&lt;/a&gt; of this post.&lt;/em&gt;&lt;/p&gt;
				&lt;p&gt;Hello everyone, I’m iBug from the University of Science and Technology of China. Today I’ll show you my experiences and tips in participating in open-source projects.&lt;/p&gt;
				&lt;h2 id=&quot;1-what-is-open-source-software&quot;&gt;1. What is Open-Source Software?&lt;/h2&gt;
				&lt;p&gt;Open-Source Software (OSS) is a classification of computer software whose source code is freely available. Open-source software always has a license attached to it, which defines the usage of its source code. A few common OSS licenses are GNU General Public License, MIT License, Apache 2.0 License and the BSD License. Different licenses pose different requirements to users of the source code. For example, GNU GPL requires that any derived work be licensed under the same terms, while MIT License is more permissive on that. Meanwhile, the public availability of the source code enables everyone to participate and commit their contribution.&lt;/p&gt;
				&lt;p&gt;The original incentive of open-source software was to share knowledge. Software design and programming skills are both knowledge, so the ancestors share them by sharing source code. In an open-source model, every user is part of the community. Everyone can join the development and maintenance work, or help test and audit the code, or chime in to the discussions. That’s how open-source software forms its distinctive collaboration model, and its adequate documentations, tutorials as well as discussions provides abundant information to whoever wants to take a part.&lt;/p&gt;
				&lt;p&gt;Then, why do people choose open-source software?&lt;/p&gt;
				&lt;p&gt;On one hand, open-source software is well-audited. Contrary to proprietary software, open-source ones are not audited by a closed group, but rather anyone interested. Anyone can audit the code of any single open-source software, which grants open-source software with its unique transparency. Meanwhile, help from people with experiences in security also adds to the overall security of the software.&lt;/p&gt;
				&lt;p&gt;On the other hand, every open-source software has a surrounding community. The persistence of the community around open-source software makes it perpetual and less likely abandoned. In addition, the variety of people in the community makes every part of the software well-maintained. Besides, the open availability of the source code enables the obtaining of a running software by compiling from source, which brings down the total cost of using it. (It isn’t unconditionally true, though, for example NGINX sells a “premium version” of the software, NGINX Plus, for a fee.)&lt;/p&gt;
				&lt;p&gt;Here’s a collection of open-source software that many people recognizes, including TensorFlow ML framework, Windows Calculator, LibreOffice office suite, as well as Debian GNU/Linux operating system. It’s apparent that open-source software exists throughout our daily life and work.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/msc2019/s7.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;h2 id=&quot;2-my-experiences-in-participating-in-open-source-projects&quot;&gt;2. My experiences in participating in open-source projects&lt;/h2&gt;
				&lt;p&gt;&lt;a href=&quot;https://github.com/iBug&quot;&gt;This is my GitHub profile page&lt;/a&gt;. The 6 pinned repositories are:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;TetrisAI: A console tetris game written in C, with a built-in AI playing mode&lt;/li&gt;
				&lt;li&gt;SmokeDetector: This one will be discussed later&lt;/li&gt;
				&lt;li&gt;PyReversi: A GUI reversi game developed with Python and PyQt5. Also has built-in AI to provide a “human vs computer” mode&lt;/li&gt;
				&lt;li&gt;CGadgets and vbsGadgets: As suggested by their names, they’re “gadgets” written in C and VBScript&lt;/li&gt;
				&lt;li&gt;OJSangbox: My work from the course &lt;em&gt;Research for newbies&lt;/em&gt;, a sandbox implementation for online judgers using Linux technologies like chroot and rlimits.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/users/5958455/ibug&quot;&gt;This is my Stack Overflow profile&lt;/a&gt;. I occasionally participate in the regular Q &amp;amp; A activities on Stack Overflow. So far I have asked 100+ questions and answered 800+, and accrued an aggregate reputation of more then 22.6k. My top few tags include &lt;code class=&quot;highlighter-rouge&quot;&gt;c++&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;.&lt;/p&gt;
				&lt;h3 id=&quot;my-first-participation-in-an-open-source-project&quot;&gt;My first participation in an open-source project&lt;/h3&gt;
				&lt;p&gt;My first experience took place at &lt;a href=&quot;https://github.com/markondej/fm_transmitter&quot;&gt;markondej/fm_transmitter&lt;/a&gt;. I was trying to set up my own FM radio station and loop music, when I noticed that the “repeat” command-line option wasn’t working. I confirmed that there was nothing wrong with my Pi and the Raspbian OS on it, so I took a look at the code. It wasn’t hard for me to spot a missing negation in a condition check, so I patched it myself, compiled the code again and verified that my patch was working correctly.&lt;/p&gt;
				&lt;p&gt;My roommate was right beside me then, and came to help me when he saw me. Under his guidance, I forked the upstream repository, pushed my local changes up, and opened &lt;a href=&quot;https://github.com/markondej/fm_transmitter/pull/61&quot;&gt;my first pull request&lt;/a&gt;. Two days later, the author replied “Thanks for your help” and merged my PR.&lt;/p&gt;
				&lt;h3 id=&quot;my-primary-participation-in-another-open-source-project&quot;&gt;My primary participation in another open-source project&lt;/h3&gt;
				&lt;p&gt;&lt;img src=&quot;/image/msc2019/s7.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Look at the above image again, I anticipate that the icon at bottom-right is the least known one. It’s the logo of the organization &lt;a href=&quot;https://charcoal-se.org&quot;&gt;Charcoal-SE&lt;/a&gt;, whose primary project is &lt;a href=&quot;https://github.com/Charcoal-SE/SmokeDetector&quot;&gt;SmokeDetector&lt;/a&gt;, a headless chat bot that helps the Stack Exchange Network fight off spam.&lt;/p&gt;
				&lt;p&gt;The bot came into my attention in December 2017, and I was directed to Charcoal HQ after asking about it.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/msc2019/s14.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;And I dropped into that chat room. Every day I chat with them and watched the output from SmokeDetector, flagging spam that was reported. The routine continued to early January 2018, when someone noticed a bug with Smokey. I volunteered to take a look at it and fixed it, and fired up my first PR that changed some code (&lt;a href=&quot;https://github.com/Charcoal-SE/SmokeDetector/pull/1441&quot;&gt;#1441&lt;/a&gt;). Since then, I worked hard to study the code of SmokeDetector and continued to submit a steady stream of fixes and improvements. In March 2018, they added me to their &lt;a href=&quot;https://charcoal-se.org/people#devs&quot;&gt;list of developers&lt;/a&gt;, and in June, I was granted direct push access to the repository, indicating that I had been trusted for my proficiency in handling the project.&lt;/p&gt;
				&lt;p&gt;From SmokeDetector, I started the expansion of my contribution, and sought out for other interesting projects that I could give a hand to. One of them was &lt;a href=&quot;https://github.com/Charcoal-SE/metasmoke&quot;&gt;metasmoke&lt;/a&gt;, a web dashboard for SmokeDetector, which is a Rails-based web application itself. Another one was &lt;a href=&quot;https://charcoal-se.org&quot;&gt;Charcoal website&lt;/a&gt;, hosted on GitHub Pages and built with Jekyll. With what I learned from working on Charcoal website, I built my own website with Jekyll too, and submitted a PR to &lt;a href=&quot;https://github.com/pages-themes/cayman-theme&quot;&gt;the theme&lt;/a&gt; that I started off with.&lt;/p&gt;
				&lt;h3 id=&quot;other-contributions-ive-made&quot;&gt;Other contributions I’ve made&lt;/h3&gt;
				&lt;p&gt;In addition to code patches, I also opened a series of decent issues, name a few:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Magisk, a popular root framework for Android. I submitted &lt;a href=&quot;https://github.com/topjohnwu/Magisk/issue/512&quot;&gt;a suggestion&lt;/a&gt; to improve its install script, which was accepted later. (#512)&lt;/li&gt;
				&lt;li&gt;wtfpython, a collection of interesting Python constructs. I pointed out a mistake in the document (#81)&lt;/li&gt;
				&lt;li&gt;BaiduPCS-Go, a command-line client for Baidu Net Disk. I reported a bug. (#402)&lt;/li&gt;
				&lt;li&gt;I also opened a few trivial issues in repositories I’m familiar with, so that more people could learn them by participating in &lt;a href=&quot;https://hacktoberfest.digitalocean.com&quot;&gt;Hacktoberfest&lt;/a&gt;.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;In addition, I’m also an active participant in various discussions, as well as Stack Overflow. I enjoy helping others with my knowledge.&lt;/p&gt;
				&lt;p&gt;My personal top ★ repo is &lt;a href=&quot;https://github.com/iBug/pac&quot;&gt;pac&lt;/a&gt;, which originated from &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-windows/issues/1873#issuecomment-416293495&quot;&gt;a discussion&lt;/a&gt; on another repository. People had a strong need for a functionality, which was implementable just with a PAC script, so I wrote one and shared it with the &lt;em&gt;pac&lt;/em&gt; repo, which has accumulated a total of 24 stars by the time of writing this article. There’s one thing we can know for sure, that its star amount wasn’t for its complexity or use of high-tech, but rather its usefulness to passers-by. The issues section has also received a few questions, all of which has been answered by me.&lt;/p&gt;
				&lt;h3 id=&quot;what-ive-learned&quot;&gt;What I’ve learned&lt;/h3&gt;
				&lt;p&gt;I’d say pretty much the primary thing I’ve learned from those experiences is teamwork. Teamwork is very inclusive and involves the use of Git Version Control System (VCS), a consistent coding style and documentation style, as well as the meaning and usage of a Continuous Integration system, and most importantly, the skills of communication.&lt;/p&gt;
				&lt;h2 id=&quot;3-getting-involved-by-yourself&quot;&gt;3. Getting involved by yourself&lt;/h2&gt;
				&lt;p&gt;Before chiming in, you should understand one point that an open-source project is a &lt;em&gt;project&lt;/em&gt; and thus, you have flexible ways of contribution.&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;
				&lt;p&gt;For software, the most intuitive contribution is to submit code patches, for example bug fixes, enhancements and test suites.&lt;/p&gt;
				&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;Besides, it’s also a valuable kind of contribution to help improve documentations and tutorials&lt;/p&gt;
				&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;Meanwhile, translating documents into other languages enables more people to participate.&lt;/p&gt;
				&lt;p&gt;For example, &lt;a href=&quot;https://www.transifex.com/&quot;&gt;Transifex&lt;/a&gt; is a commonly used translation collaboration platform, and it powers many well-known projects like Disqus and SoundCloud.&lt;/p&gt;
				&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;Finally, if you’re not interested in all of above, you still have the option of contributing supplementary information, like Q &amp;amp; A and bug reports.&lt;/p&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;So then, what are we going to reap for ourselves?&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;
				&lt;p&gt;The most direct consequence is that you gained hand-on experiences working on a real-life project.&lt;/p&gt;
				&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;You also practiced your existing skills and learned new ones.&lt;/p&gt;
				&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;You acquired important knowledge and wisdom.&lt;/p&gt;
				&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;You can easily show off your hard work on open-source projects.&lt;/p&gt;
				&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;You can stand out from the crowd when applying for opportunities. Apparently, your HR / curator / mentor will more likely give you the offer when they can actually see your work.&lt;/p&gt;
				&lt;p&gt;An immediate example is my chance of speaking here, which owes a lot to the fact that my open-source achievements can be easily seen and verified by the event host.&lt;/p&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;Looks rather attractive, right? Then it’s time to set yourself up.&lt;/p&gt;
				&lt;h3 id=&quot;discover-your-abilities&quot;&gt;Discover your abilities&lt;/h3&gt;
				&lt;p&gt;The first thing to decide is what you excel at. Say for example, if you’re good at turning ideas into code, or if you’re competent in discovering leak holes, or if you’re innovative at designing, and so on. Specific abilities help you excel at specific tasks.&lt;/p&gt;
				&lt;h3 id=&quot;find-your-interest&quot;&gt;Find your interest&lt;/h3&gt;
				&lt;p&gt;Then you should find a project of your interest. There are a few ways to search for them, listing a few for example:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;A piece of software that you use on a daily basis&lt;/li&gt;
				&lt;li&gt;An interesting project that you come across, like the trio on the right side of GitHub dashboard&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;Random events that advocate open-source projects like &lt;a href=&quot;https://hacktoberfest.digitalocean.com&quot;&gt;Hacktoberfest&lt;/a&gt;, or another long-running one &lt;a href=&quot;https://up-for-grabs.net/&quot;&gt;Up For Grabs&lt;/a&gt;&lt;/p&gt;
				&lt;/li&gt;
				&lt;li&gt;Finally, an innovative idea that could start a new project on its own&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;If you decide to join an existing project, there are some preliminary checks that I advise you to perform.&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;First and foremost, it’s mandatory that an open-source project contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;LICENSE&lt;/code&gt;. And it adds up if it has a Code of Conduct as well.&lt;/li&gt;
				&lt;li&gt;You should also judge the activity of the project, like the time of the last commit, as well as how often project maintainers commit.&lt;/li&gt;
				&lt;li&gt;It’s a big bonus if the project has an active community, who can generate a lot of Issues and Pull Requests, both of which are good indicators of project activity.&lt;/li&gt;
				&lt;li&gt;Finally, a friendly atmosphere makes discussion more comfortable and constructive.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;h3 id=&quot;effective-communication&quot;&gt;Effective communication&lt;/h3&gt;
				&lt;p&gt;The most common thing that happens throughout your activity in a project is communicating with others. It’s often worth noting for the sake of the effectiveness of your communication that:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;You’re expected to do researches beforehand by yourself. You should probably avoid asking “how to write code for this”, and at the very least, “I wrote this code and it’s wrong” is a better question.&lt;/li&gt;
				&lt;li&gt;Should you really need to ask a question like “I wrote this code and it’s wrong”, you must provide enough context and (probably) code for others to identify the problem. Similarly, whatever discussion you’re starting, ensure you’ve enabled others to replicate what you’re describing.&lt;/li&gt;
				&lt;li&gt;Keep the discussion straight and on-topic. It’s very likely that no one is interested in that you wrote the code in Starbucks after an afternoon’s work at the port carrying bricks.&lt;/li&gt;
				&lt;li&gt;For public projects, keep the discussion public as well, unless there are other reasons not to, for example reporting security issues or misbehavior of other community members.&lt;/li&gt;
				&lt;li&gt;Respect others should their opinions differ.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;h3 id=&quot;after-submitting-your-contribution&quot;&gt;After submitting your contribution&lt;/h3&gt;
				&lt;p&gt;It’s time for you to wait for project maintainers to review your contribution and take further actions. There are a few outcomes here.&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;No one pays any attention to it and your Issue or PR just hangs. Maybe you should simply wait for longer, or perhaps you should have checked the project for recent activity.&lt;/li&gt;
				&lt;li&gt;If anyone suggests improvement, it means that others have taken time to review your contribution. You should respect them and respond in time.&lt;/li&gt;
				&lt;li&gt;Sometimes the maintainers or the community doesn’t accept your contribution. Don’t panic, see what others think and say, collect them as your own experiences.&lt;/li&gt;
				&lt;li&gt;If your contribution gets accepted, then &lt;strong&gt;Congratulations&lt;/strong&gt;!&lt;/li&gt;
				&lt;/ul&gt;
				&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;
				&lt;p&gt;Whether you’re new to open-source projects, or experienced in the field, I hope you can go ahead and carry forward the idea of open-source.&lt;/p&gt;
				&lt;h2 id=&quot;more-reading&quot;&gt;More reading&lt;/h2&gt;
				&lt;ul&gt;
				&lt;li&gt;&lt;a href=&quot;https://dev.to/kerryja/getting-started-with-open-source-3o23&quot;&gt;https://dev.to/kerryja/getting-started-with-open-source-3o23&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href=&quot;https://opensource.guide/&quot;&gt;https://opensource.guide/&lt;/a&gt;&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;For comments, please head to &lt;a href=&quot;/p/24&quot;&gt;the Chinese version&lt;/a&gt; of this post.&lt;/p&gt;</content><author><name>iBug</name></author><category term="speech" /><summary type="html">This is a translated version from the Chinese (original) script. The slideshow can be acquired here. For comments, please head to the Chinese version of this post.</summary></entry><entry><title type="html">Creating templated Systemd services</title><link href="https://ibugone.com/blog/2019/07/systemd-service-template/" rel="alternate" type="text/html" title="Creating templated Systemd services" /><published>2019-07-16T00:00:00+00:00</published><updated>2019-07-19T01:14:16+00:00</updated><id>https://ibugone.com/blog/2019/07/systemd-service-template</id><content type="html" xml:base="https://ibugone.com/blog/2019/07/systemd-service-template/">&lt;p&gt;Last time I wrote an article about &lt;a href=&quot;/p/14&quot;&gt;NAT traversal using FRP&lt;/a&gt;, which has been my personal solution for exposing SSH access of machines behind NAT to the internet for a long time.&lt;/p&gt;
				&lt;p&gt;As time goes by, I get more devices behind NAT and more VPS hosts providing FRP access, and the need for connecting one device with multiple FRP hosts arises. Surely, one solution would be writing multiple config files and Systemd service files for each instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;frpc&lt;/code&gt;, which would just run perfectly.&lt;/p&gt;
				&lt;h2 id=&quot;writing-multiple-systemd-service-files&quot;&gt;Writing multiple Systemd service files&lt;/h2&gt;
				&lt;p&gt;Let’s start this with one &lt;code class=&quot;highlighter-rouge&quot;&gt;frpc.service&lt;/code&gt; file that I wrote and am using:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
				Description=FRP Client Service
				After=network.target
				StartLimitIntervalSec=0
				[Service]
				Type=simple
				Restart=always
				RestartSec=1
				User=root
				ExecStart=/usr/local/bin/frpc -c /etc/frpc.ini
				[Install]
				WantedBy=multi-user.target
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now I want to add another &lt;code class=&quot;highlighter-rouge&quot;&gt;frpc&lt;/code&gt; instance with an alternate configuration, I could just copy the above file, modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;ExecStart&lt;/code&gt; line, and save it as another file.&lt;/p&gt;
				&lt;p&gt;However, that’s undoubtably a suboptimal solution, especially given that Systemd service files can use “template variables”&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Having too many &lt;em&gt;otherwise&lt;/em&gt; identical service configuration files is particularly prone to making a mess. With “template variables”, you can simplify all this job into one single file&lt;/p&gt;
				&lt;h2 id=&quot;using-systemd-service-instance-variables&quot;&gt;Using Systemd service instance variables&lt;/h2&gt;
				&lt;p&gt;Among all “instance variables”, the most commonly used one is “instance name” &lt;code class=&quot;highlighter-rouge&quot;&gt;%i&lt;/code&gt;. You’ll just replace the variable part with &lt;code class=&quot;highlighter-rouge&quot;&gt;%i&lt;/code&gt;, and in my case, it’s the config file name for &lt;code class=&quot;highlighter-rouge&quot;&gt;frpc&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;Instead of putting &lt;code class=&quot;highlighter-rouge&quot;&gt;frpc&lt;/code&gt; config files directly under &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc&lt;/code&gt;, the first thing I did is making a directory &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/frpc&lt;/code&gt; for all of them. Then I put the “default” one into the directory as &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/frpc/default.ini&lt;/code&gt;, and re-written the service file, utilizing instance variables, as this:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
				Description=FRP Client Service (%i)
				After=network.target
				StartLimitIntervalSec=0
				[Service]
				Type=simple
				Restart=always
				RestartSec=1
				User=root
				ExecStart=/usr/local/bin/frpc -c /etc/%i.ini
				[Install]
				WantedBy=multi-user.target
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Notice the two appearances of &lt;code class=&quot;highlighter-rouge&quot;&gt;%i&lt;/code&gt; here: The first one in unit description, and the second one on the line &lt;code class=&quot;highlighter-rouge&quot;&gt;ExecStart&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;There’s also another thing to note: It’s no longer applicable to name the file as &lt;code class=&quot;highlighter-rouge&quot;&gt;frpc.service&lt;/code&gt;, but instead, &lt;code class=&quot;highlighter-rouge&quot;&gt;frpc@.service&lt;/code&gt;. The AT sign in the file name indicates it’s a “template service”.&lt;/p&gt;
				&lt;p&gt;Now, to instantiate the &lt;code class=&quot;highlighter-rouge&quot;&gt;frpc@&lt;/code&gt; service into instance “default” (which is also the config file name in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/frpc&lt;/code&gt;), the following commands were used to manage it:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start frpc@default.service
				systemctl stop frpc@default.service
				systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;frpc@default.service
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;And an extra note on the &lt;code class=&quot;highlighter-rouge&quot;&gt;enable&lt;/code&gt; command: If you notice the output from &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl&lt;/code&gt;, it should read like this:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ibug@ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;frpc@example.service
				Created symlink /etc/systemd/system/multi-user.target.wants/frpc@example.service → /etc/systemd/system/frpc@.service
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Yep, the file isn’t modified in any way, only a symlink is created.&lt;/p&gt;
				&lt;p&gt;As you can guess, the instance name &lt;code class=&quot;highlighter-rouge&quot;&gt;%i&lt;/code&gt; is substituted at the time the file is parsed. This means you can modify the service file on the go and any changes will take effect the next time you run a &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl&lt;/code&gt; command that reads the file.&lt;/p&gt;
				&lt;p&gt;And here’s the topic: For each additional &lt;code class=&quot;highlighter-rouge&quot;&gt;frpc&lt;/code&gt; instance, the only thing to do is to place its config file under &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/frpc/something.ini&lt;/code&gt;, and the new instance can be launched at &lt;code class=&quot;highlighter-rouge&quot;&gt;frpc@something&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;For a complete list of instance specifiers, &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.unit.html#Specifiers&quot;&gt;here&lt;/a&gt;’s a good reference. Time to get yourself some work to cleanup your messy Systemd services :)&lt;/p&gt;
				&lt;div class=&quot;footnotes&quot;&gt;
				&lt;ol&gt;
				&lt;li id=&quot;fn:1&quot;&gt;
				&lt;p&gt;It’s official name is “instance specifier”, which IMO is less intuitive. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
				&lt;/li&gt;
				&lt;/ol&gt;
				&lt;/div&gt;</content><author><name>iBug</name></author><category term="linux" /><summary type="html">Last time I wrote an article about NAT traversal using FRP, which has been my personal solution for exposing SSH access of machines behind NAT to the internet for a long time.</summary></entry><entry><title type="html">Using SSH deploy keys on CircleCI</title><link href="https://ibugone.com/blog/2019/07/circleci-ssh-delpoy-keys/" rel="alternate" type="text/html" title="Using SSH deploy keys on CircleCI" /><published>2019-07-08T00:00:00+00:00</published><updated>2019-07-10T23:46:18+00:00</updated><id>https://ibugone.com/blog/2019/07/circleci-ssh-delpoy-keys</id><content type="html" xml:base="https://ibugone.com/blog/2019/07/circleci-ssh-delpoy-keys/">&lt;p&gt;A year ago back I &lt;a href=&quot;/p/4&quot;&gt;wrote an article&lt;/a&gt; on automating build &amp;amp; deployment of GitHub Pages website with Travis CI. It’s a great CI service at first, but since &lt;a href=&quot;https://blog.travis-ci.com/2018-10-04-combining-linux-infrastructures&quot;&gt;Travis CI has completely moved away from containers&lt;/a&gt;, speed is a real issue to whoever is concerned. On the other side, CircleCI is continuing their builds with Docker-based containers, whose rapid response is a &lt;em&gt;great&lt;/em&gt; advantage against VMs with slow boot time.&lt;/p&gt;
				&lt;p&gt;Migrating the build script from Travis CI was an intuitive and easy step, but I immediately got disappointed by CircleCI’s logging: Secret environment variables get exposed in the log as long as any command or program prints them.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/circleci/token-leak.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;That’s particularly annoying because I used Personal Access Tokens to push built content back to GitHub, and this kind of straightforward leaks is a huge security issue, so I looked around for alternatives, and came up with the idea of using a deploy key with write access.&lt;/p&gt;
				&lt;p&gt;Setting up the basics wasn’t any difficult on its own for anyone with a bit experience in Linux:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Generate an SSH key pair with &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen&lt;/code&gt;&lt;/li&gt;
				&lt;li&gt;Encode (or compress + encode) the private key and put it into the CI environment&lt;/li&gt;
				&lt;li&gt;Create a build script to grab key from environment and utilize it&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;Once you’ve figured out the build script, everything appears straightforward:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SSH_KEY_E&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
				&lt;/span&gt;e_error &lt;span class=&quot;s2&quot;&gt;&quot;No SSH key found in environment.&quot;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
				&lt;span class=&quot;k&quot;&gt;fi
				&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SSH_KEY_E&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;gunzip&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/.ssh/id_rsa
				&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;600 ~/.ssh/id_rsa
				git clone &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nt&quot;&gt;--branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BRANCH&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git@github.com:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GH_REPO&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.git&quot;&lt;/span&gt; _site
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;At first glance, it &lt;em&gt;should&lt;/em&gt; work without any problem. But that’s apparently only an &lt;em&gt;assumption&lt;/em&gt;, no? And if you follow the build log, you’ll immediately know when it runs into &lt;em&gt;the problem&lt;/em&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR: The key you are authenticating with has been marked as read only.
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;It’s particularly confusing when you’ve written your SSH private key to the correct path, set the correct permission and expecting SSH to respect your key, only to find it’s actually offering another key to GitHub and fails.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/circleci/ssh-fail.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Digging around with debug information (set &lt;code class=&quot;highlighter-rouge&quot;&gt;GIT_SSH_COMMAND='ssh -vv'&lt;/code&gt;), I noticed this absurd thing:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/circleci/key-not-found.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Clearly, the aptly placed key wasn’t even found by SSH, rendering it completely unusable in status quo. I’ve even tried crafting &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt;, but unfortunately it’s ignored as well.&lt;/p&gt;
				&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
				&lt;p&gt;Just like most other CLI utilities, SSH respects command-line arguments loyally. So you would just specify the identity file there:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GIT_SSH_COMMAND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ssh -i ~/.ssh/id_rsa'&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;&lt;img src=&quot;/image/circleci/solution.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;And I don’t even know what’s going on behind the scenes, but it just works.&lt;/p&gt;
				&lt;p&gt;Reference: &lt;a href=&quot;https://stackoverflow.com/q/55177042/5958455&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;</content><author><name>iBug</name></author><category term="development" /><category term="github-pages" /><summary type="html">A year ago back I wrote an article on automating build &amp;amp; deployment of GitHub Pages website with Travis CI. It’s a great CI service at first, but since Travis CI has completely moved away from containers, speed is a real issue to whoever is concerned. On the other side, CircleCI is continuing their builds with Docker-based containers, whose rapid response is a great advantage against VMs with slow boot time.</summary></entry><entry><title type="html">How I saved a lost commit from GitHub</title><link href="https://ibugone.com/blog/2019/06/save-commit-from-github/" rel="alternate" type="text/html" title="How I saved a lost commit from GitHub" /><published>2019-06-07T00:00:00+00:00</published><updated>2019-11-03T03:05:50+00:00</updated><id>https://ibugone.com/blog/2019/06/save-commit-from-github</id><content type="html" xml:base="https://ibugone.com/blog/2019/06/save-commit-from-github/">&lt;p&gt;Earlier today I force-pushed to my repository &lt;a href=&quot;https://github.com/iBug/USTC-RV-Chisel&quot;&gt;USTC-RV-Chisel&lt;/a&gt; for testing purposes,
				without noticing that my local ref &lt;code class=&quot;highlighter-rouge&quot;&gt;origin/master&lt;/code&gt; is 1 commit behind the actual &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; on GitHub.
				My friend pushed his work (1 commit) to it, and now it’s lost.&lt;/p&gt;
				&lt;p&gt;Fortunately, I haven’t closed my terminal yet, so there’s at least some place to look at:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/git-restore/1.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;From the terminal log, I knew that the SHA of the lost commit begins with &lt;code class=&quot;highlighter-rouge&quot;&gt;b3c3b36&lt;/code&gt;, so it appeared very intuitive for me to just try fetching the commit, but no luck:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/git-restore/2.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;I recalled that GitHub can show commits with only first 7 digits of its SHA, so I constructed the URL &lt;a href=&quot;https://github.com/iBug/USTC-RV-Chisel/commit/b3c3b36&quot;&gt;https://github.com/iBug/USTC-RV-Chisel/commit/b3c3b36&lt;/a&gt; and followed it:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/git-restore/3.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Now trying it again with the full SHA that’s easily retrieved from the web page:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/git-restore/4.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Hello? Does GitHub allow this? Oh-no!&lt;/p&gt;
				&lt;p&gt;I Googled around for a few minutes, and concluded that GitHub doesn’t allow fetching this commit, because it’s &lt;em&gt;unadvertised&lt;/em&gt;.&lt;/p&gt;
				&lt;p&gt;Thinking around for ideas, I decided to give it a try to rebuild the commit.&lt;/p&gt;
				&lt;p&gt;First, I prepare my working directory with&lt;/p&gt;
				&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add -A
				git stash
				git reset --hard ee216e3  # This is the parent commit of the lost commit
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Then, I need the full content of the tree of the commit.&lt;/p&gt;
				&lt;p&gt;While GitHub offers ZIP archive download at the tree page &lt;a href=&quot;https://github.com/iBug/USTC-RV-Chisel/tree/b3c3b36&quot;&gt;https://github.com/iBug/USTC-RV-Chisel/tree/b3c3b36&lt;/a&gt;, ZIP isn’t good for this job - it doesn’t preserve POSIX file modes, so I looked around for the TAR archive (tarball). It wasn’t on the page.&lt;/p&gt;
				&lt;p&gt;Thinking around again, I recalled working with the GitHub API, and there’s an endpoint to get a tarball.
				It wasn’t hard to construct the desired GitHub API call URL:&lt;/p&gt;
				&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v https://api.github.com/repos/iBug/USTC-RV-Chisel/tarball/b3c3b3683a6f5961dcde2d6c5312c31d9f382865
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Looking at the cURL output, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Location&lt;/code&gt; header is what I wanted, so I followed it and &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; the target:&lt;/p&gt;
				&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://codeload.github.com/iBug/USTC-RV-Chisel/legacy.tar.gz/b3c3b3683a6f5961dcde2d6c5312c31d9f382865
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The next thing was to examine the tarball to determine the top-level folder name:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/git-restore/5.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;To make it easier to merge my working directory with the tarball, I renamed my local folder to match the one in the tarball:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/git-restore/6.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Now it’s time to rebuild the commit!&lt;/p&gt;
				&lt;p&gt;Now that the working directory is restored, all that’s left to do is to figure out the committer information and commit time.&lt;/p&gt;
				&lt;p&gt;I must say here that retrieving those information from the GitHub API is an easier way to do it programmatically, but since I had the browser page open as well as my local repository, fetching the exact time from the web page was the method easier to reach, and committer information can be seen from &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/git-restore/7.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;&lt;sup&gt;The exact time in ISO 8601 format is available through F12&lt;sup&gt;&lt;/sup&gt;&lt;/sup&gt;&lt;/p&gt;
				&lt;p&gt;With all the required information collected, I rebuilt the commit myself:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/git-restore/8.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Look! The new commit has the same SHA as the lost commit! So they’re the same commit now.&lt;/p&gt;
				&lt;p&gt;Pushing the restored commit back happily:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/git-restore/9.png&quot; alt=&quot;image&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;</content><author><name>iBug</name></author><category term="git" /><category term="github" /><category term="study-notes" /><summary type="html">Earlier today I force-pushed to my repository USTC-RV-Chisel for testing purposes, without noticing that my local ref origin/master is 1 commit behind the actual master on GitHub. My friend pushed his work (1 commit) to it, and now it’s lost.</summary></entry><entry><title type="html">Wolfram Mathematica 12 Key Generator</title><link href="https://ibugone.com/blog/2019/05/mathematica-keygen/" rel="alternate" type="text/html" title="Wolfram Mathematica 12 Key Generator" /><published>2019-05-11T00:00:00+00:00</published><updated>2019-10-27T14:50:15+00:00</updated><id>https://ibugone.com/blog/2019/05/mathematica-keygen</id><content type="html" xml:base="https://ibugone.com/blog/2019/05/mathematica-keygen/">&lt;p&gt;&lt;strong&gt;Supports Wolfram Mathematica 12.0&lt;/strong&gt;&lt;/p&gt;
				&lt;p&gt;Input your MathID (xxxx-xxxxx-xxxxx) and press &lt;strong&gt;Generate&lt;/strong&gt;.&lt;/p&gt;
				&lt;p&gt;&lt;input type=&quot;text&quot; id=&quot;mathId&quot; placeholder=&quot;xxxx-xxxxx-xxxxx&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;&lt;button id=&quot;generate&quot; class=&quot;btn btn--primary&quot;&gt;Generate&lt;/button&gt;&lt;/p&gt;
				&lt;p id=&quot;result&quot;&gt;Press &lt;b&gt;Generate&lt;/b&gt;!&lt;/p&gt;
				&lt;script type=&quot;text/javascript&quot;&gt;
				function f1(n, byte, c) {
				for (var bitIndex = 0; bitIndex &lt;= 7; bitIndex++) {
				var bit = (byte &gt;&gt; bitIndex) &amp; 1;
				if (bit + ((n - bit) &amp; ~1) === n) {
				n = (n - bit) &gt;&gt; 1;
				} else {
				n = ((c - bit) ^ n) &gt;&gt; 1;
				}
				}
				return n;
				}
				function genPassword(str, hash) {
				for (var byteIndex = str.length - 1; byteIndex &gt;= 0; byteIndex--) {
				hash = f1(hash, str.charCodeAt(byteIndex), 0x105C3);
				}
				var n1 = 0;
				while (f1(f1(hash, n1 &amp; 0xFF, 0x105C3), n1 &gt;&gt; 8, 0x105C3) !== 0xA5B6) {
				if (++n1 &gt;= 0xFFFF) {
				return &quot;Error&quot;;
				}
				}
				n1 = Math.floor(((n1 + 0x72FA) &amp; 0xFFFF) * 99999.0 / 0xFFFF);
				var n1str = (&quot;0000&quot; + n1.toString(10)).slice(-5);
				var temp = parseInt(n1str.slice(0, -3) + n1str.slice(-2) + n1str.slice(-3, -2), 10);
				temp = Math.ceil((temp / 99999.0) * 0xFFFF);
				temp = f1(f1(0, temp &amp; 0xFF, 0x1064B), temp &gt;&gt; 8, 0x1064B);
				for (byteIndex = str.length - 1; byteIndex &gt;= 0; byteIndex--) {
				temp = f1(temp, str.charCodeAt(byteIndex), 0x1064B);
				}
				var n2 = 0;
				while (f1(f1(temp, n2 &amp; 0xFF, 0x1064B), n2 &gt;&gt; 8, 0x1064B) !== 0xA5B6) {
				if (++n2 &gt;= 0xFFFF) {
				return &quot;Error&quot;;
				}
				}
				n2 = Math.floor((n2 &amp; 0xFFFF) * 99999.0 / 0xFFFF);
				var n2str = (&quot;0000&quot; + n2.toString(10)).slice(-5);
				return n2str.charAt(3) + n1str.charAt(3) + n1str.charAt(1) + n1str.charAt(0) + &quot;-&quot;
				+ n2str.charAt(4) + n1str.charAt(2) + n2str.charAt(0) + &quot;-&quot;
				+ n2str.charAt(2) + n1str.charAt(4) + n2str.charAt(1) + &quot;::1&quot;;
				}
				function checkMathId(s) {
				if (s.length != 16)
				return false;
				for (let i = 0; i &lt; s.length; i++) {
				if (i === 4 || i === 10) {
				if (s[i] !== &quot;-&quot;)
				return false;
				} else {
				if (&quot;0123456789&quot;.search(s[i]) &lt; 0)
				return false;
				}
				}
				return true;
				}
				Array.prototype.getRandom = function () {
				return this[Math.floor(Math.random() * this.length)]
				}
				document.getElementById(&quot;generate&quot;).addEventListener(&quot;click&quot;, function () {
				document.getElementById(&quot;result&quot;).innerText = &quot;&quot;;
				var mathId = document.getElementById(&quot;mathId&quot;).value.trim();
				if (!checkMathId(mathId)) {
				document.getElementById(&quot;result&quot;).innerText = &quot;Bad MathID!&quot;;
				} else {
				activationKey = &quot;&quot;;
				for (let i = 0; i &lt; 14; i++) {
				activationKey += Math.floor(Math.random() * 10);
				if (i === 3 || i === 7)
				activationKey += &quot;-&quot;;
				}
				var magicNumbers = [10690, 12251, 17649, 24816, 33360, 35944, 36412, 42041, 42635, 44011, 53799, 56181, 58536, 59222, 61041];
				var password = genPassword(mathId + &quot;$1&amp;&quot; + activationKey, magicNumbers.getRandom());
				document.getElementById(&quot;result&quot;).innerText +=
				&quot;Activation Key: &quot; + activationKey + &quot;\n&quot; +
				&quot;Password: &quot; + password + &quot;\n\n&quot; +
				&quot;Don't forget to leave a comment if this works for you. Thanks for using!&quot;
				}
				});
				&lt;/script&gt;</content><author><name>iBug</name></author><category term="keygen" /><summary type="html">Supports Wolfram Mathematica 12.0</summary></entry><entry><title type="html">Build a minimal Linux system and run it in QEMU</title><link href="https://ibugone.com/blog/2019/04/os-lab-1/" rel="alternate" type="text/html" title="Build a minimal Linux system and run it in QEMU" /><published>2019-04-07T00:00:00+00:00</published><updated>2019-05-01T14:23:39+00:00</updated><id>https://ibugone.com/blog/2019/04/os-lab-1</id><content type="html" xml:base="https://ibugone.com/blog/2019/04/os-lab-1/">&lt;p&gt;Linux is the #1 open-source operating system nowadays, and many people are running a Linux distro, such as Ubuntu or Arch. Linux is also the most popular choice for a server OS.&lt;/p&gt;
				&lt;p&gt;Building Linux from scratch is a good way to learn how it works, and is also a good practice for whoever wanting to learn about how operating systems work. And for me, the task of the first experiment of the course &lt;em&gt;Operating System Concepts&lt;/em&gt;.&lt;/p&gt;
				&lt;h1 id=&quot;environment-setup&quot;&gt;Environment setup&lt;/h1&gt;
				&lt;p&gt;The lab task is to build Linux &lt;strong&gt;2.6.26&lt;/strong&gt; and run it in &lt;a href=&quot;https://www.qemu.org/&quot;&gt;QEMU&lt;/a&gt;. For the most convenient setup, I recommend the 32-bit versions of &lt;strong&gt;Ubuntu 14.04&lt;/strong&gt; “&lt;em&gt;trusty&lt;/em&gt;” or &lt;strong&gt;Debian 7&lt;/strong&gt; “&lt;em&gt;wheezy&lt;/em&gt;”. If you prefer another Linux distro, make sure it comes with glibc of a version &lt;strong&gt;no newer than 2.19&lt;/strong&gt;. This is because glibc 2.20 requires Linux kernel 2.6.32, which supercedes our target version.&lt;/p&gt;
				&lt;p&gt;There’s no need to install the base system physically if you don’t have one yet, as a &lt;a href=&quot;/p/15&quot;&gt;virtual machine&lt;/a&gt; will work perfectly well, and you can enjoy your Windows or Mac applications while the VM is running.&lt;/p&gt;
				&lt;p&gt;Before we start this experiment, we need to have proper tools installed. On Ubuntu 14.04 or Debian 7, the following command will install all we need for this lab:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;build-essential libncurses5-dev qemu
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;ul&gt;
				&lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;build-essential&lt;/code&gt; package, as suggested by its name, contains essential tools for building, such as binutils, C compiler and library, and automation tools like Make.&lt;/li&gt;
				&lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;libncurses5-dev&lt;/code&gt; package provides header files for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Ncurses&quot;&gt;New Curses&lt;/a&gt; library, which is used to display beautiful user interface in a text terminal. Many good-looking terminal programs use it, such as Vim or Emacs.&lt;/li&gt;
				&lt;li&gt;QEMU is what we’ll be booting our Linux with - of course it’s needed&lt;/li&gt;
				&lt;/ul&gt;
				&lt;h1 id=&quot;building-the-linux-system&quot;&gt;Building the Linux system&lt;/h1&gt;
				&lt;p&gt;Now we’re ready to build our own Linux. The first thing is the kernel.&lt;/p&gt;
				&lt;h2 id=&quot;compiling-the-kernel&quot;&gt;Compiling the kernel&lt;/h2&gt;
				&lt;p&gt;Download and extract the source code:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://mirrors.edge.kernel.org/pub/linux/kernel/v2.6/linux-2.6.26.tar.gz
				&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;zxvf linux-2.6.26.tar.gz
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Next, generate the default configuration and build against that:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;linux-2.6.26
				make i386_defconfig
				make
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;You’ll likely encounter a few errors during the building process. Here are the fixes to two most common errors people encounter:&lt;/p&gt;
				&lt;p&gt;The first one you’ll meet should look like this:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc: error: elf_x86_64: No such file or directory
				make[1]: *** [arch/x86/vdso/vdso.so.dbg] Error 1
				make: *** [arch/x86/vdso] Error 2
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;To fix this, open &lt;code class=&quot;highlighter-rouge&quot;&gt;arch/x86/vdso/Makefile&lt;/code&gt; in a text editor, such as Vim or gedit. Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;-m elf_x86_64&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;-m64&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-m elf_i386&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;-m32&lt;/code&gt;. Save the changes.&lt;/p&gt;
				&lt;p&gt;The second one would be like this:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;undefined reference to `__mutex_lock_slowpath'
				undefined reference to `__mutex_unlock_slowpath'
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;To fix this, open &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/mutex.c&lt;/code&gt; and look for the above two functions. You’ll see them written like these:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noinline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sched&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;__mutex_lock_slowpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noinline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sched&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__mutex_unlock_slowpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Insert &lt;code class=&quot;highlighter-rouge&quot;&gt;__used&lt;/code&gt; after the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; in both cases, so they should end up looking like these:`&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__used&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noinline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sched&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;__mutex_lock_slowpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__used&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noinline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sched&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__mutex_unlock_slowpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;For most people, fixing the above two things should enable the build process to complete without interrupts.&lt;/p&gt;
				&lt;p&gt;That’s the kernel. Before we can boot it up, we need an initial filesystem, with some critical files for the system to be able to boot up.&lt;/p&gt;
				&lt;p&gt;Here two options are presented. Although only one is necessary, I still recommend trying out both - for a better understanding how Linux works.&lt;/p&gt;
				&lt;h2 id=&quot;preparing-the-root-filesystem---option-1-handcraft-init&quot;&gt;Preparing the root filesystem - Option 1: Handcraft init&lt;/h2&gt;
				&lt;p&gt;With the first option, we will be creating a minimal program to serve as the “startup program”.&lt;/p&gt;
				&lt;p&gt;Open your favorite text editor and write the following C program:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
				#include &amp;lt;unistd.h&amp;gt;
				&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Save it as &lt;code class=&quot;highlighter-rouge&quot;&gt;test.c&lt;/code&gt;, and run the following command to compile it:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc &lt;span class=&quot;nt&quot;&gt;-static&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; init test.c
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now you have the init program. You need to prepare the filesystem. The following commands will create an empty 4 MB image and mount it at &lt;code class=&quot;highlighter-rouge&quot;&gt;rootfs&lt;/code&gt;.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;dd &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;myinitrd.img &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4M &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
				mkfs.ext3 myinitrd.img
				&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;rootfs
				&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mount &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; loop myinitrd.img rootfs
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Next, copy your init program into it, and create some device files as required:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;init rootfs/
				&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;rootfs
				&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;dev
				&lt;span class=&quot;nb&quot;&gt;sudo mknod &lt;/span&gt;dev/ram b 1 0
				&lt;span class=&quot;nb&quot;&gt;sudo mknod &lt;/span&gt;dev/console c 5 1
				&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
				umount rootfs
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;After having the linux kernel and the root filesystem ready, you can try booting it in QEMU:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;qemu-system-i386 &lt;span class=&quot;nt&quot;&gt;-kernel&lt;/span&gt; linux-2.6.26/arch/x86/boot/bzImage &lt;span class=&quot;nt&quot;&gt;-initrd&lt;/span&gt; myinitrd.img &lt;span class=&quot;nt&quot;&gt;--append&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;root=/dev/ram init=/init&quot;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;You’ll see QEMU launching in a new window, with a lot of messages followed by the output of your init program, like this:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7273074/55729166-341d6e80-5a48-11e9-8307-575b2c8c7cd0.png&quot; alt=&quot;QEMU Looks&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;h2 id=&quot;preparing-the-root-filesystem---option-2-busybox&quot;&gt;Preparing the root filesystem - Option 2: BusyBox&lt;/h2&gt;
				&lt;p&gt;The first option is just a minimal example of what a root filesystem should contain. It is, however, not quite function-rich.&lt;/p&gt;
				&lt;p&gt;With &lt;a href=&quot;https://busybox.net/&quot;&gt;BusyBox&lt;/a&gt; that packs many common Unix &amp;amp; Linux utilities into one single binary, you’ll be able to create a mostly functional, yet still minimal Linux system.&lt;/p&gt;
				&lt;p&gt;Busybox is available as source code so whoever need it can compile it themselves. Download the source code and configure it:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://busybox.net/downloads/busybox-1.30.1.tar.bz2
				&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;jxvf busybox-1.30.1.tar.bz2
				&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;busybox-1.30.1
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;You need to configure some build options so it best suits this lab. Run &lt;code class=&quot;highlighter-rouge&quot;&gt;make defconfig&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;make menuconfig&lt;/code&gt; to start. You’ll need to change at least four options as shown below. The first option is switched on and off with the space bar, and the second and the third one requires you to enter the string manually. Finally, the last one is a multiple choice. You should put the X on the desired option.&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Settings –&amp;gt;
				Build Options
				[*] Build static binary（no share libs）
				Settings –&amp;gt;
				(-m32 -march=i386) Additional CFLAGS
				(-m32) Additional LDFLAGS
				Settings –&amp;gt;
				What kind of applet links to install –&amp;gt;
				(X) as soft-links
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;With the build properly configured, now you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;make install&lt;/code&gt; to build BusyBox and deploy your build. Installed files will appear under &lt;code class=&quot;highlighter-rouge&quot;&gt;_install&lt;/code&gt; directory inside &lt;code class=&quot;highlighter-rouge&quot;&gt;busybox-1.30.1&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;To be able to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;_install&lt;/code&gt; directory as a bootable root filesystem, you should create the special files identical to what’s there in Option 1.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; dev
				&lt;span class=&quot;nb&quot;&gt;sudo mknod &lt;/span&gt;dev/console c 5 1
				&lt;span class=&quot;nb&quot;&gt;sudo mknod &lt;/span&gt;dev/ram b 1 0
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Next, you need a init program. This time we want to go the easy way with BusyBox, instead of writing a dummy one in C. Open your favorite text editor and type the following content:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;### INIT SCRIPT ###&quot;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /proc /sys /tmp
				mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; proc none /proc
				mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; sysfs none /sys
				mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; tmpfs none /tmp
				&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;This boot took &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f1&lt;/span&gt; /proc/uptime&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; seconds&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /bin/sh
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Save it with the name &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; under the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;_install&lt;/code&gt;. Run &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod a+x init&lt;/code&gt; so it becomes executable.&lt;/p&gt;
				&lt;p&gt;Now pack everything up as a ramdisk image. Make sure you’re inside &lt;code class=&quot;highlighter-rouge&quot;&gt;_install&lt;/code&gt; directory before running the following command:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &lt;span class=&quot;nt&quot;&gt;-print0&lt;/span&gt; | cpio &lt;span class=&quot;nt&quot;&gt;-0oH&lt;/span&gt; newc | &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/initramfs.cpio.gz
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;There should be a new file &lt;code class=&quot;highlighter-rouge&quot;&gt;initramfs.cpio.gz&lt;/code&gt; in your home directory. You can now run QEMU with this new package:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;qemu-system-i386 &lt;span class=&quot;nt&quot;&gt;-kernel&lt;/span&gt; linux-2.6.26/arch/x86/boot/bzImage &lt;span class=&quot;nt&quot;&gt;-initrd&lt;/span&gt; ~/initramfs.cpio.gz &lt;span class=&quot;nt&quot;&gt;--append&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;root=/dev/ram init=/init&quot;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Make sure the path to the Linux kernel is correct. Your path will likely vary depending on your procedure. You can always run &lt;code class=&quot;highlighter-rouge&quot;&gt;find ~ -name bzImage&lt;/code&gt; to see where it’s located.&lt;/p&gt;
				&lt;p&gt;If everything’s going right, you’ll see the following screen in QEMU:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7273074/55732852-464edb00-5a4f-11e9-8e2e-7208cceadf24.png&quot; alt=&quot;QEMU Looks&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Congratulations! You’ve built your own Linux-from-Scratch and booted it in QEMU.&lt;/p&gt;
				&lt;p&gt;There’s a second part of the original Lab 1 of &lt;em&gt;Operating System Concepts&lt;/em&gt;, which I will describe in a later article (or more likely, skipped &lt;code class=&quot;highlighter-rouge&quot;&gt;:)&lt;/code&gt;).&lt;/p&gt;</content><author><name>iBug</name></author><category term="study-notes" /><category term="linux" /><summary type="html">Linux is the #1 open-source operating system nowadays, and many people are running a Linux distro, such as Ubuntu or Arch. Linux is also the most popular choice for a server OS.</summary></entry></feed>